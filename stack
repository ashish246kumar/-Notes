Implement stack using array
*********************************************************************
package com.nagarro;

public class StackImpl {
	private int[] arr;
	private int size;
	private int top;
     public StackImpl(int s) {
    	 this.arr=new int[s];
    	 this.size=s;
    	 this.top=-1;
     }
     public void push(int elem) {
    	 if(top>size) {
    		 System.out.println("stack is full");
    		 return;
    	 }
    	 arr[++top]=elem;
     }
     public int peek() {
    	 return arr[top];
     }
     public int pop() {
    	 if(top<0) {
    		 System.out.println("stack is empty"); 
    		 return -1;
    	 }
    	 return arr[top--];
     }
     public void display() {
    	 int i=top;
    	 System.out.println("Element are");
    	 while(i>=0) {
    		 
    		 System.out.println(arr[i]);
    		 i--;
    	 }
     }
	public static void main(String[]args) {
		StackImpl si=new StackImpl(5);
		si.push(3);
		si.push(10);
		si.push(8);
		si.push(12);
		si.display();
		System.out.println(si.peek());
		System.out.println(si.pop());
		si.display();
	}
}
**************************************************************************************************************************
Circular Queue
******************************************************************************************************************************
public class CircularQueue {
	private int[] arr1;
	private int maxCapacity;
	private int front;
	private int rare;
	private int size;
     public CircularQueue(int capcity) {
    	 this.arr1=new int[capcity];
    	 this.maxCapacity=capcity;
    	 this.front=0;
    	 this.rare=-1;
    	 this.size=0;
     }
     public void enqueue(int elem) {
    	 if(isFull()) {
    		 System.out.print("Queue is full");
    		 return;
    	 }
    	 rare=(rare+1)%maxCapacity;
    	 arr1[rare]=elem;
         size++;    	
     }
     public void dequeue() {
    	 if(isEmpty()) {
    		 System.out.print("Queue is Empty");
    		 return;
    	 }
    	 front=(front+1)%maxCapacity;
    	 size--;
     }
     public boolean isFull() {
    	 return size==maxCapacity;
     }
     public boolean isEmpty() {
    	 return size==0;
     }
    
     public void display() {
    	 int i=front;
    	 System.out.println("i"+front);
    	 System.out.println("Element are");
    	 int k=0;
    	 while(k<size) {
    		 System.out.println(arr1[i]);
    		 i=(i+1)%maxCapacity;
    		 k++;
    		
    		 
    	 }
     }
	public static void main(String[]args) {
		CircularQueue queue=new CircularQueue(5);
		 queue.enqueue(10);
	        queue.enqueue(20);
	        queue.enqueue(30);
	        queue.enqueue(40);
	        queue.enqueue(50);
	        System.out.println("mainFront"+queue.front+" "+"mainFront"+queue.rare);
		queue.display();
		
		queue.dequeue();
		queue.display();
	}
}
************************************************************************************************************************************************************************************
