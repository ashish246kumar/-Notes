Implement stack using array
*********************************************************************
package com.nagarro;

public class StackImpl {
	private int[] arr;
	private int size;
	private int top;
     public StackImpl(int s) {
    	 this.arr=new int[s];
    	 this.size=s;
    	 this.top=-1;
     }
     public void push(int elem) {
    	 if(top>size) {
    		 System.out.println("stack is full");
    		 return;
    	 }
    	 arr[++top]=elem;
     }
     public int peek() {
    	 return arr[top];
     }
     public int pop() {
    	 if(top<0) {
    		 System.out.println("stack is empty"); 
    		 return -1;
    	 }
    	 return arr[top--];
     }
     public void display() {
    	 int i=top;
    	 System.out.println("Element are");
    	 while(i>=0) {
    		 
    		 System.out.println(arr[i]);
    		 i--;
    	 }
     }
	public static void main(String[]args) {
		StackImpl si=new StackImpl(5);
		si.push(3);
		si.push(10);
		si.push(8);
		si.push(12);
		si.display();
		System.out.println(si.peek());
		System.out.println(si.pop());
		si.display();
	}
}
**************************************************************************************************************************
Circular Queue Implementation
******************************************************************************************************************************
public class CircularQueue {
	private int[] arr1;
	private int maxCapacity;
	private int front;
	private int rare;
	private int size;
     public CircularQueue(int capcity) {
    	 this.arr1=new int[capcity];
    	 this.maxCapacity=capcity;
    	 this.front=0;
    	 this.rare=-1;
    	 this.size=0;
     }
     public void enqueue(int elem) {
    	 if(isFull()) {
    		 System.out.print("Queue is full");
    		 return;
    	 }
    	 rare=(rare+1)%maxCapacity;
    	 arr1[rare]=elem;
         size++;    	
     }
     public void dequeue() {
    	 if(isEmpty()) {
    		 System.out.print("Queue is Empty");
    		 return;
    	 }
    	 front=(front+1)%maxCapacity;
    	 size--;
     }
     public boolean isFull() {
    	 return size==maxCapacity;
     }
     public boolean isEmpty() {
    	 return size==0;
     }
    
     public void display() {
    	 int i=front;
    	 System.out.println("i"+front);
    	 System.out.println("Element are");
    	 int k=0;
    	 while(k<size) {
    		 System.out.println(arr1[i]);
    		 i=(i+1)%maxCapacity;
    		 k++;
    		
    		 
    	 }
     }
	public static void main(String[]args) {
		CircularQueue queue=new CircularQueue(5);
		 queue.enqueue(10);
	        queue.enqueue(20);
	        queue.enqueue(30);
	        queue.enqueue(40);
	        queue.enqueue(50);
	        System.out.println("mainFront"+queue.front+" "+"mainFront"+queue.rare);
		queue.display();
		
		queue.dequeue();
		queue.display();
	}
}
************************************************************************************************************************************************************************************
496. Next Greater Element I
Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.
Example 1:
Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:
Input: s = "a"
Output: [["a"]]
************************************************************
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        HashMap<Integer,Integer>h=new HashMap<Integer,Integer>();
        Stack<Integer>st=new Stack<Integer>();
        
        int n1=nums1.length,n2=nums2.length;
        int[] ans=new int[n1];
        h.put(nums2[n2-1],-1);
        st.push(nums2[n2-1]);
        for(int i=n2-2;i>=0;i--)
        {
            while(st.size()>0&&nums2[i]>=st.peek())
            {
                st.pop();
            }
            if(st.size()==0)
            {
                h.put(nums2[i],-1);
            }
            else{
                h.put(nums2[i],st.peek());
            }
            st.push(nums2[i]);
        }
        for(int i=0;i<n1;i++)
        {
            ans[i]=h.get(nums1[i]);
        }
        return ans;

    }
}
******************************************************************************************************************************************
Next greater Element 2
Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.
The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.
Example 1:
Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
Example 2:
Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]
 **********
class Solution {
    public int[] nextGreaterElements(int[] nums) {
        Stack<Integer> st1=new Stack<>();
        
        int n=nums.length;
        
        int[] ans=new int[nums.length];

        for(int i=2*n-1;i>=0;i--){
            while(!st1.isEmpty()&& st1.peek()<=nums[i%n]){
                st1.pop();
            }
                if(i<n){
                    if(!st1.isEmpty()){
                        ans[i]= st1.peek();
                    }
                    else{
                        ans[i]=-1;
                    }
                }
                st1.push(nums[i%n]);
            

        }
         return ans;

    }
}
*************************************************************************************************************
Area of largest rectangle in Histogram
Problem Statement: Given an array of integers heights representing the histogram's bar height where the width of each bar is 1  return the area of the largest rectangle in histogram.
Example:
Input: N =6, heights[] = {2,1,5,6,2,3}
Output: 10

class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> st=new Stack<>();
        int n=heights.length;
        int[]left=new int[n];
        int[]right=new int[n];
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
while(!st.isEmpty()&& heights[st.peek()]>=heights[i]){
            st.pop();
        }
        if(st.isEmpty()){
            left[i]=0;
        }
        else{
            left[i]=st.peek()+1;
        }
        st.push(i);
        }
        while(!st.isEmpty()){
            st.pop();
        }
         for(int i=n-1;i>=0;i--){
             while(!st.isEmpty()&& heights[st.peek()]>=heights[i]){
            st.pop();
        }
        if(st.isEmpty()){
            right[i]=n-1;
        }
        else{
            right[i]=st.peek()-1;
        }
          st.push(i);
         }
        for(int i=0;i<n;i++){
            max=Math.max(max,heights[i]*(right[i]-left[i]+1));
        }
        return max;

    }
}
**********************************************************************************************************************************
Problem Statement: “Design a data structure that follows the constraints of Least Recently Used (LRU) cache”.
Implement the LRUCache class:
LRUCache(int capacity) we need to initialize the LRU cache with positive size capacity.
int get(int key) returns the value of the key if the key exists, otherwise return -1.
Void put(int key,int value), Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache.if the number of keys exceeds the capacity from this operation, evict the least recently used key.
Example:
Input:
 ["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
       [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output:
 [null, null, null, 1, null, -1, null, -1, 3, 4]
Explanation:
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
*****************************
class LRU_CACHE{
Node node=new Node(0,0);
HashMap<Integer,Node> h=new HashMap<>();
int capacity;
public LRU_CACHE(int capacity){
  this.capacity=capacity;
  head.next=tail;
  tail.prev=head;
}
public int get(int key){
if(h.containsKey(key)){
  Node node=h.get(key);
  remove(node);
  insertKey(node);
 return node.value;
}
else{
return -1;
}
}
public void put(int key,int value){
   if(h.containsKey(h.get(key)){
      remove(h.get(key));
}
else if(h.size()==capacity){
    remove(tail.prev);
}
insert(new Node(key,value));
}
public void  removeKey(Node node){
  h.remove(node.key);
   node.prev.next=node.next;
  node.next.prev=node.prev;
}
public void insertKey(Node node){
h.put(node.key,node);
node.next=head.next;
node.next.prev=node;
node.prev=head;
head.next=node;

}

}
class Node{
  Node prev,next;
  int key, vallue;
  Node(int key, int value){
     this.key=key;
     this.value=value;
}
}
****************************************************************************************************************************************
Sliding Window Maximum
Problem Statement: Given an array of integers arr, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.
Examples:
Example 1:
Input: arr = [4,0,-1,3,5,3,6,8], k = 3
Output: [4,3,5,5,6,8]
Explanation: 
Window position                   Max
------------------------         -----
[4  0  -1] 3  5  3  6  8           4
 4 [0  -1  3] 5  3  6  8           3
 4  0 [-1  3  5] 3  6  8           5
 4  0  -1 [3  5  3] 6  8           5
 4  0  -1  3 [5  3  6] 8           6
 4  0  -1  3  5 [3  6  8]          8

For each window of size k=3, we find the maximum element in the window and add it to our output array.
Example 2:
Input: arr= [20,25], k = 2
Output: [25]
Explanation: There’s just one window is size 2 that is possible and the maximum of the two elements is our answer.
*********
public static int[] maxSlidingWindow(int[] a, int k) {
       int n=a.length;
       int[] maxStore=new int[n-k+1];
       int right=0;
       Dequeue<Integer> dq=new ArrayDeque<>();
       for(int i=0;i<n;i++){
       if(!dq.isEmpty() && dq.peek()==(i-k)){
             dq.pop();
          }
     while(!dq.isEmpty() && a[dq.peekLast()]<a[i]){
        dq.pollLast();
}
   q.offer(i);
if(i>(k-1)){
maxStore[right++]=a[dq.peek()];
}
}
}
*************************************************************************************************************************
