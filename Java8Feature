Lambda Expressions
Lambda expression provides implementation of functional interface. An interface which has only one abstract method is called functional interface. 
Java provides an anotation @FunctionalInterface, which is used to declare an interface as functional interface.
In case of lambda expression, we don't need to define the method again for providing the implementation. Here, we just write the implementation code.
@FunctionalInterface  //It is optional  
interface Drawable{  
    public void draw();  
}  
  
public class LambdaExpressionExample2 {  
    public static void main(String[] args) {  
        int width=10;  
        
        //with lambda  
        Drawable d2=()->{  
            System.out.println("Drawing "+width);  
        };  
        d2.draw();  
    }  
}  
**********************
List<Integer>al=Array.asList(1,2,3,4,5)
al.stream().filter(n->n%2==0).forEach(System.out::println)
**********************************************
Method Reference
*****************************************************
List<String> strings = Arrays.asList("apple", "banana", "cherry");
strings.stream().map(String::toUpperCase).forEach(System.out::println);
Runnable runnable = this::run;

special type of lambda expression
create a simple lamda expression  by refreshing a existing method.
Method reference biggest advantage is code reusability.
There are following types of method references in java:

Reference to a static method.
Reference to an instance method.
Reference to a constructor.

***************************************
import java.util.function.Function;

class MyClass {
    private int value;

    // Constructor with a parameter
    public MyClass(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }
}

public class Main {
    public static void main(String[] args) {
        // Using constructor reference to create instances of MyClass
        Function<Integer, MyClass> constructorRef = MyClass::new;

        // Create an instance of MyClass using the constructor reference
        MyClass obj = constructorRef.apply(10);

        // Print the value
        System.out.println("Value: " + obj.getValue()); // Output: Value: 10
    }
}

****************************************************
Thread Creation with the help of method reference
public class Main {
    // Method that will be executed in a separate thread
    public static void myMethod() {
        System.out.println("Thread is running.");
    }

    public static void main(String[] args) {
        // Create a reference to the static method using method reference
        Runnable myRunnable = Main::myMethod;

        // Create a thread with the runnable
        Thread thread = new Thread(myRunnable);

        // Start the thread
        thread.start();
    }
}
****************************************
interface Sayable{  
    void say();  
}  
public class MethodReference {  
    public static void saySomething(){  
        System.out.println("Hello, this is static method.");  
    }  
    public static void main(String[] args) {  
        // Referring static method  
        Sayable sayable = MethodReference::saySomething;  
        // Calling interface method  
        sayable.say();  
    }  
}  
*******************
 Reference to an Instance Method
interface Sayable{  
    void say();  
}  
public class InstanceMethodReference {  
    public void saySomething(){  
        System.out.println("Hello, this is non-static method.");  
    }  
    public static void main(String[] args) {  
        InstanceMethodReference methodReference = new InstanceMethodReference(); // Creating object  
        // Referring non-static method using reference  
            Sayable sayable = methodReference::saySomething;  
        // Calling interface method  
            sayable.say();  
            // Referring non-static method using anonymous object  
            Sayable sayable2 = new InstanceMethodReference()::saySomething; // You can use anonymous object also  
            // Calling interface method  
            sayable2.say();  
    }  
}  
***********************************************
Functional Interface is also known as Single Abstract Method Interfaces or SAM Interfaces. 
It is a new feature in Java, which helps to achieve functional programming approach.
Java Predefined-Functional Interfaces----->
Function<T,R>--->It represents a function that accepts one argument and returns a result.
BiFunction<T,U,R>	It represents a function that accepts two arguments and returns a a result.
*************************************
List<Integer>al=Array.asList(1,2,3,4)
int a=al.stream().count()
al.ForEach(b->System.out.println(b));
bollean b=al.stream().anyMatch(n->n%2==0);
List<Integer>distinctNumber=al.stream().distinct().collect(Collectors.toList())
List<Integer>evenSquare=al.stream().filter(n->n%2==0).map(n->n*n).collect(Collectors.toList());
*********************************************************************************************************
optional class was introduced to avoid NullPointerExceptions to handle nullable values.
optional represnt the state of empty as well as filled.

import java.util.Optional;

public class OptionalExample {
    public static void main(String[] args) {
        String[] str = new String[5];
        str[2] = "Geeks Classes are coming soon";

        // Create an Optional with a non-null value
        Optional<String> value = Optional.of(str[2]);

        // Retrieve the value
        System.out.println("Value: " + value.get());

        // Check if a value is present
        System.out.println("Is present? " + value.isPresent());

        // Hash code of the Optional
        System.out.println("Hash code: " + value.hashCode());
    }
}

**************************************
import java.util.Optional;

public class Example {
    public static void main(String[] args) {
        String[] names = new String[5];
        Optional<String> optionalName = Optional.ofNullable(names[3]);

        if (optionalName.isPresent()) {
            String upperCaseName = optionalName.get().toUpperCase();
            System.out.println("Name: " + upperCaseName);
        } else {
            System.out.println("Name is not present.");
        }
    }
}
***********************************************************
obtain an empty Optional instance using its static method empty()
 Optional<String> emptyOptional = Optional.empty();
*********
equals() method is used to compare two Optional instances. 
Optional<String> opt1 = Optional.of("Hello");
        Optional<String> opt2 = Optional.of("Hello");
        
        if (opt1.equals(opt2)) {
            System.out.println("Opt1 and Opt2 are equal.");
        } else {
            System.out.println("Opt1 and Opt2 are not equal.");
        }
 
**************************************************
ifPresent() - It takes a Consumer functional interface as an argument, 
which represents the action to be performed on the value if it is present.
Optional<String> optionalString = Optional.of("Hello");
        
        optionalString.ifPresent(s -> System.out.println("Value is present: " + s));
        
        Optional<String> emptyOptional = Optional.empty();
        
        emptyOptional.ifPresent(s -> System.out.println("This will not be printed as the Optional is empty."));
******************************
of()-->Creating an Optional with a non-null value
Optional<String> nullOptional = Optional.of(null);--->will throw a NullPointerException
*****************************************
orElse() method is used in the Optional class to provide a default value if the Optional instance is empty
Optional<String> optionalString = Optional.of("Hello");
        
        // Retrieving the value from optionalString, or "Default" if optionalString is empty
        String value = optionalString.orElse("Default");
        System.out.println("Value: " + value); // Output: Value: Hello
        
        Optional<String> emptyOptional = Optional.empty();
        
        // Retrieving the value from emptyOptional, or "Default" if emptyOptional is empty
        String value2 = emptyOptional.orElse("Default");
        System.out.println("Value2: " + value2); // Output: Value2: Default
******************************
orElseGet()  
 it takes a Supplier functional interface as an argument instead of a direct value.
Optional<String> optionalString = Optional.of("Hello");
        
        // Using orElseGet with a supplier that generates the default value
        String value = optionalString.orElseGet(() -> generateDefaultValue());
        System.out.println("Value: " + value); // Output: Value: Hello
        
        Optional<String> emptyOptional = Optional.empty();
        
        // Using orElseGet with a supplier that generates the default value
        String value2 = emptyOptional.orElseGet(() -> generateDefaultValue());
        System.out.println("Value2: " + value2); // Output: Value2: Default Value
 public static String generateDefaultValue() {
        System.out.println("Generating default value...");
        return "Default Value";
    }
********************
orElseThrow() method in the Optional class is used to retrieve the value contained in the Optional if it is present. 
If the Optional is empty, it throws an exception specified by a provided supplier.
Optional<String> optionalString = Optional.of("Hello");
        
        // Retrieving the value from optionalString, or throwing an exception if optionalString is empty
        String value = optionalString.orElseThrow(() -> new IllegalStateException("Value is not present"));
        System.out.println("Value: " + value); // Output: Value: Hello
        
        Optional<String> emptyOptional = Optional.empty();
        
        try {
            // Attempting to retrieve the value from emptyOptional, which will throw an exception
            String value2 = emptyOptional.orElseThrow(() -> new IllegalStateException("Value is not present"));
            System.out.println("Value2: " + value2);
        } catch (IllegalStateException e) {
            System.out.println("Exception caught: " + e.getMessage()); // Output: Exception caught: Value is not present
        }
*********************************************
String str=null
Optional<String> o=Optional.ofNullable(str);
System.out.println( o.get())------->Optional.ofNullable() and the value is null, it will throw a NoSuchElementException.
*******************
Instead of using Optional<List<T>>, use an empty list (Collections.emptyList()) to represent the absence of elements.
Using Optional for collections can add unnecessary complexity and hinder consistency.
Avoid using Optional in Constructors
Avoid using Optional with Lists
Avoid using Optional as a parameter in a method
Avoid using Optional when returning a method’s value
We should avoid returning a method with an Optional.
*********************************************
optional provides various methods to work with potential values safely, 
such as isPresent(), get(), orElse(), orElseGet(), orElseThrow(), map(), flatMap(), filter(),
Avoid using Optional as a ternary operator
return Optional.ofNullable(value).orElse("BLUE");
return value == null ? "BLUE" : value;

**************************
Optional<String> modelCar = ... ;
if(modelCar.isPresent()) {
    System.out.println("Model is: " + modelCar.get());
} else {
    System.out.println("Model not found");
}
instead of these use this
Optional<String> modelCar = ... ;
modelCar.ifPresentOrElse(
    System.out::println, 
    () -> System.out.println("Model not found")
);
***************************\
public Optional<List<String>> getDoctors(String name) {
    Hospital hospital = new Hospital (List.of("Pepe", "Juan"))      
    List<String> doctors = hospital.getDoctors(); 
    return Optional.ofNullable(doctors);
}
instead  of this  use this
public List<String> getDoctors(String name) {
    Hospital hospital = new Hospital (List.of("Pepe", "Juan"))      
    List<String> doctors = hospital.getDoctors(); 
    return doctors!= null ? items: Collections.emptyList();
}
***************************************
List<Car> cars = //lista de coches;
Optional<Car> findCar = cars.stream()
    .filter(car -> c.getColor().equalsIgnoreCase("blue")
    .findFirst();

if (findCar.isPresent()) {
    return findCar.get().getModel();
} else {
    return throw new NotFoundExcepcion("Car blue not found");
}
instead  of this  use this
List<Car> cars = //lista de coches;
Optional<Car> findCar = cars.stream()
    .filter(car -> c.getColor().equalsIgnoreCase("blue")
    .findFirst()
   .map(Car::getModel)
  .orElseThrow(()-> new NotFoundException("Car blue not found")

**********************************************************
public static optional<String> getName(){
     String name="durgesh"
     return Optional.ofNullable(name);
}
class Main{
psvm(){
   Optional<String> name=getName();
  System.out.println(name.orElse("abc"))
}
}
**********************************
Lambda function is an anynomous function with 
no name,no modifier,no return type
it reduces line of code.used only with functional interface.call Api very effectively.
to write more redable writable and concisable code.
***********************
(a, b)->{
    return (a+b);
}

*****************
example of Runnable,interface and callable
to call lamda function  we require functional interface
***************
@FunctionalInterface
**********************
// Define a functional interface Function that takes a String and returns its length
        Function<String, Integer> stringLength = s -> s.length();
        
        // Call the lambda function using the functional interface
        int length = stringLength.apply("Hello Lambda");
************************

*****************************
public interface SumInterface{
    int sum(int a,int b)
}
class Main{
SumInterface  sumInterface=(a,b)->a+b;
sumInterface.sum(2,3);
}
}
********************************
Runnable thread1=()->{
    for(int i=0;i<5;i++){
        System.out.println(i);
       try{
            Thread.sleep(1000);
         } 
        catch(InteruptedException e){

}
}

}
Thread t1=new Thread(thread1)
t1.start();
************************************************
Anoumous class interface implementation  because lambda expresion only useful if interface contai only one method.

interface MyInterface {
    void method1();
    void method2();
}

public class Main {
    public static void main(String[] args) {
        // Implementing MyInterface using an anonymous class
        MyInterface myInterface = new MyInterface() {
            @Override
            public void method1() {
                System.out.println("Implementation of method1 in anonymous class");
            }

            @Override
            public void method2() {
                System.out.println("Implementation of method2 in anonymous class");
            }
        };

        // Calling the implemented methods
        myInterface.method1();
        myInterface.method2();
    }
}

************************************************************

Consumer Interface is used in Java8
it has two method accept and doThen
Consumer is used where object is taken as input and some operation is performed on that object without returning any result.

Consumer<String> consumer=(t)->{
       System.out.println(t);
}
 consumer.accept("akk");
******************
Consumer<String> consumer1=(t)->{
       System.out.println(t+"world");
}
Consumer<String> consumer2=(t)->{
       System.out.println(t+"Java");
}
consumer2.andThen(Consumer3).accept("Hello");
**************************
List<String> names = Arrays.asList("Alice", "Bob", "Charlie");

// Using a Consumer to print each element of the list
Consumer<String> printConsumer = System.out::println;
names.forEach(printConsumer);
***********************************
names.forEach(System.out::println);
same as 
names.forEach(name -> System.out.println(name));
******************************************
Supplier is a functional interface in java8 
T get()  method

***********************************
Supplier < LocalDateTime > supplier = () -> LocalDateTime.now();
System.out.println(supplier.get());
*****************************************
private static Supplier < List < Product >> productSupplier() {
        Supplier < List < Product >> productSupplier = () -> {
            List < Product > productsList = new ArrayList < Product > ();
            productsList.add(new Product(1, "HP Laptop", 25000 f));
            productsList.add(new Product(2, "Dell Laptop", 30000 f));
            productsList.add(new Product(3, "Lenevo Laptop", 28000 f));
            productsList.add(new Product(4, "Sony Laptop", 28000 f));
            productsList.add(new Product(5, "Apple Laptop", 90000 f));
            productsList.add(new Product(6, "Apple Laptop", 90000 f));
            productsList.add(new Product(7, "Dell Laptop", 30000 f));
            productsList.add(new Product(8, "Dell Laptop", 30000 f));
            return productsList;
        };
        return productSupplier;
    }
public static void main(String[] args) {
        System.out.println(productSupplier().get());
    }
************************************************
Predicate Functional Interface is used for Conditional check
List<Integer> l2=Arrays.asList(1,4,8,9);
    l2.stream().filter(n->n%2==0).forEach(System.out::println);
Supplier is used in all context where there is no input but output is expected.
