to search on the basis of id
{"_id": { "$oid": "660459e7efe8eb0301964a6e" } }
*************
MongoDb is Schemaless
****************
PS C:\Users\ashis> mongod --version
***********************
PS C:\Users\ashis> mongod(To Start mongoDb server)
*********************************************
C:\Users\ashis>mongosh(To Start mongo shell)

************************
test> show dbs
if we crete database and inside database if we not create collection and if we type show dbs then it will not 
show database.
*****************
test> use student
switched to db student
******************************************************************************

student> db.createCollection('data')
{ ok: 1 }
student> show collections
data
student> db.data.drop()
true
student> db.dropDatabase()
{ ok: 1, dropped: 'student' }

******************************
it will import data into products
***************************************************************************
C:\Users\ashis> mongoimport E:\mongo\products.json -d shop -c products
2024-04-01T00:22:09.435+0530    connected to: mongodb://localhost/
2024-04-01T00:22:09.727+0530    10355 document(s) imported successfully. 0 document(s) failed to import.
******************

C:\Users\ashis>mongoimport E:\mongo\sales.json -d tshop -c sales --jsonArray
2024-04-01T09:22:52.722+0530    connected to: mongodb://localhost/
2024-04-01T09:22:52.741+0530    5 document(s) imported successfully.
*************************************************************
To Export from database to json file
*****************************************************************
C:\Users\ashis>mongoExport -c student -d student -o E:\mongo\sales1.json
2024-04-01T09:29:16.275+0530    connected to: mongodb://localhost/
2024-04-01T09:29:16.291+0530    exported 6 records
*********************
delete Query
************************************************************
student> db.student.deleteOne({_id:ObjectId("660993746c9fa0b948c7ffa3")});
{ acknowledged: true, deletedCount: 1 }
*******
student> db.student.deleteMany({'age':29});
{ acknowledged: true, deletedCount: 2 }
*****************************************************************
Update Query
*****************************************************************************
student> db.student.updateOne({_id:ObjectId("660994816c9fa0b948c7ffa7")},{$set:{age:30,name:"shyam"},});
student> db.student.updateMany({age:30},{$set:{age:45}});
student> db.student.updateOne({_id:ObjectId("660994816c9fa0b948c7ffa7")},{$set:{grade:[50,90,75,82,88]}});
student> db.student.updateOne({_id:ObjectId("660994816c9fa0b948c7ffa7")},{$unset:{grade:1},});
student> db.student.updateOne({_id:ObjectId("6609966b6c9fa0b948c7ffa8")},{$set:{"grades.math":95}},);
student> db.student.updateOne({_id:ObjectId("6609966b6c9fa0b948c7ffa8")},{$set:{"grades":{"math":85,"science":92,"history":78}}},);
**********************************
To rename the field
student> db.student.updateOne({_id:ObjectId("660994816c9fa0b948c7ffa7")},{$rename:{name:"FullName"},});
************************************************************************************************
To remove a field in the document
***************************************************************************************************


******************************************************************************************
removing the last element from an array in a document
student> db.student.updateOne({_id:ObjectId("660994816c9fa0b948c7ffa7")},{$pop:{grade:1},});
************************************************
Read operation
**********************************************************************************
shop> db.products.find({$and:[{'price':{$gt:100}},{'name':'Laptop Pro'}]});
db.products.find({'price':{$gt:10},'name':'Laptop Pro'});
shop> db.products.find({$or:[{'price':{$gt:100}},{'name':'Laptop Pro'}]});
*******************************************************************
In MongoDb Compass
*******************************************************************
{"$or": [
    { "price": { "$gt": 100 } },
    { "name": "Laptop Pro" }
  ]}
{"price":{"$in":[129,29]}}
{"isFeatured":true}
******************************************************************************
{"price":{"$ne":100}}
**********************************
{"$nor":[{"price":{"$eq":100}},{'name':'NoteBook Collection'}]}
**************************************************************
{
  "$expr": {
    "$gt": [
      {
        "$multiply": [
          "$quantity",
          "$price"
        ]
      },
      "$targetPrice"
    ]
  }
}
***************************************************************************
{"$expr":{"$gt":["$price",50]}}
******************************************************************************
{"price":{"$eq":600}}
{"price":{"$lt":600}}
{"price":{"$nin":[129,39]}}
******************************
In the project section of mongodb
{"_id": 0,price:1}
{"name": 1,price:1}
{"name":0}

************************************************************************************************************
For Embeded document
************************************************************************************
{"comments.user":"Grace"}
*******************************************************************
{"metadata.views":{"$gt":800}}
*****************************************
{"$and":[{"comments.user":{"$eq":"Henry"}},{"metadata.likes":{"$gt":40}}]}
*********************************
{"comments.user":{$all:['Alice','Vinod']}}
******************************************************************
{
  "genres": { "$all": ["Fiction", "Mystery"] }
}

This query will return all documents where the genres array contains both "Fiction" and "Mystery". 
*****************************************
$elemMatch ensures that at least one element in the array satisfies both conditions specified inside it (name is "John Doe" and age is greater than 30).
{"comments":{$elemMatch:{"user":'Alice',"text":'Awesome article!'}}}
************************************************
shop> db.products.find({price:{$gt:100}}).explain('executionStats')
***********************************************************************************
Indexes in Products
*****************************************************************************************
shop> db.products.createIndex({'name':1})
shop> db.products.getIndexes()

*******************************************************************************************
shop> db.products.explain('executionStats').find({'name':'Smart Watch'});
**************************************************************************
shop> db.products.dropIndex({'name':1})
**********************************************************************
Indexes can slow the things down in some condition . condition is if it return huge amount of data
*********************************************************************************************************************
That is if totle product is 50000 and it returning 20k to 30k product on some query then it will slow the performance.
****************************************************************************************************************
I create indexex of column that is frequently used
***************************************************************



