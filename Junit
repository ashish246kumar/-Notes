package com.vogella.junit5;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

class CalculatorTest {

    Calculator calculator;

    @BeforeEach                                         
    void setUp() {
        calculator = new Calculator();
    }

    @Test                                               
    @DisplayName("Simple multiplication should work")   
    void testMultiply() {
        assertEquals(20, calculator.multiply(4, 5),     
                "Regular multiplication should work");  
    }

    @RepeatedTest(5)                                    
    @DisplayName("Ensure correct handling of zero")
    void testMultiplyWithZero() {
        assertEquals(0, calculator.multiply(0, 5), "Multiple with zero should be zero");
        assertEquals(0, calculator.multiply(5, 0), "Multiple with zero should be zero");
    }
****************************************************************************************************
@RepeatedTest defines that this test method will be executed multiple times, in this example 5 time
******************************************************************************************************
assertTrue('a' < 'b', () -> "Assertion messages can be lazily evaluated -- "
                + "to avoid constructing complex messages unnecessarily.");

}
**********************************************************************************
Player p1=new Player("Rj");
Player p2=new Player("Rj");
assertEquals(p1,p2);

assertEquals--> This method is suitable when you want to confirm that two objects represent the same value or 
data, even if they are two separate instances.
***********************************************************************************
assertNotEquals(p1,p2);--->test two object are not equal using there .equals method
****************************************************************
assertSame--> method is used to verify that two references point to the exact same object
 Object obj1 = new Object();
        Object obj2 = obj1;  // obj2 points to the same object as obj1
        Object obj3 = new Object();

        assertSame("Should be the same", obj1, obj2);  // This will pass
        assertNotSame("Should not be the same", obj1, obj3);  // This will pass
*****************************************
  int a = 5;
        int b = 3;
        assertTrue(a > b, "a should be greater than b");
***************************************************************************
assertNotNull: Checks that an object reference is not null
******************
assertTrue checks whether the expression a > b is true. If a is indeed greater than b, the test passes; 
if not, it fails with the provided message "a should be greater than b."
*************************
This assertion is particularly useful when you want to verify that the arrays produced
by your code match the expected arrays exactly.
char[] expected = {'a', 'b', 'c'};
char[] actual = {'a', 'b', 'c'};
assertArrayEquals(expected, actual, "The arrays should be equal");
*******************************************************************************
public class StudentScoreCalculatorTest {

    private static Stream<Object[]> testValues() {
        return Stream.of(
            new Object[]{50, 50, 2500},
            new Object[]{-10, 50, 1},
            new Object[]{50, -1, -1},
            new Object[]{-1, -1, -1},
            new Object[]{158, 50, -1},
            new Object[]{50, 150, -1},
            new Object[]{150, 150, -1}
        );
    }

    @ParameterizedTest
    @MethodSource("testValues")
    public void studentScoreCalculator(int mathsScore, int literacyScore, int expectedScore) {
        StudentScoreCalculator sc = new StudentScoreCalculator();
        sc.calculateSATScore(mathsScore, literacyScore);
        Assertions.assertEquals(expectedScore, sc.getSatScore(), "SAT scores should match expected values.");
    }
}
****************************************************************************************************
Testing for Exception
***********************************************************************************************


 public static double validateTransaction(String currency, double amount) {

        if (currencyIsAccepted(currency) && amountIsValid(amount)) {
            return amount;
        }
        return -1;
    }

    private static boolean currencyIsAccepted(String currency) {
        if (!acceptedCurrencies.contains(currency)) {
            throw new IllegalArgumentException("Currency " + currency + " not within accepted currencies list.");
        }
        return true;
    }


@Test
    public void validateTransactionUnacceptedCurrency() {
        assertThrows(RuntimeException.class, () -> {
            Cashier.validateTransaction("USD", 10);
        }, "Expected validateTransaction to throw, but it did not");
    }

**************************************************************************************************************
Mock, When and ThenReturn with Mockito
*************************************
public class BookingManager {

    private HotelDao dao;

    public BookingManager(HotelDao dao) {
        this.dao = dao;
    }

    public boolean checkRoomAvailability(String roomName) throws SQLException {

        List<String> roomsAvailable = dao.fetchAvailableRooms();
        return roomsAvailable.contains(roomName);
    }

}


public class BookingManagerTest {

    private HotelDao hotelDaoMock;
    private BookingManager bookingManager;

    @Before
    public void setup() throws SQLException {

        hotelDaoMock = mock(HotelDao.class);
        bookingManager = new BookingManager(hotelDaoMock);

        List<String> availableRooms = Arrays.asList("A");
        when(hotelDaoMock.fetchAvailableRooms()).thenReturn(availableRooms);

    }

    @Test
    public void checkAvailableRoomsTrue() throws SQLException {
        assertTrue(bookingManager.checkRoomAvailability("A"));
    }

    @Test
    public void checkAvailableRoomsFalse() throws SQLException {
        assertFalse(bookingManager.checkRoomAvailability("B"));
    }
}

**********************************************************************************************

public class TrainBarriers {

    private PassengerRepository repository;
    private EmailService emailService;

    public TrainBarriers(PassengerRepository repository, EmailService emailService) {
        this.repository = repository;
        this.emailService = emailService;
    }

    public void passengerEntry(int passengerId){

        repository.registerPassengerOnTrain(passengerId);
        emailService.notifyPassenger(passengerId);
    }
}

public class TrainBarriersTest {

    @Test
    public void passengerEntry(){

        final int PASSENGER_ID = 3;

        PassengerRepository passengerRepositoryMock = mock(PassengerRepository.class);
        EmailService emailServiceMock = mock(EmailService.class);
        TrainBarriers trainBarriers = new TrainBarriers(passengerRepositoryMock, emailServiceMock);

        trainBarriers.passengerEntry(PASSENGER_ID);

        verify(passengerRepositoryMock).registerPassengerOnTrain(PASSENGER_ID);
        verify(emailServiceMock).notifyPassenger(PASSENGER_ID);
    }
}
********************************************************************************************************************

