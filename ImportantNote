@EmbededId
@RepositoryRestResource(exported=false)
@PathVariable(value='tourId')int tourId
@RequestParam("customers")Integer customers[]
@Transactional
logging-->monitoring,accessing and debuging
@Runwith(MockitoJunitRunner.class)
@EnableWebMvc
***************************************************************************************
@Metrics annotation helps you track these kinds of statistics automatically
@Metrics annotation is used to collect and monitor metrics about your application's performance.
Metrics are important because they help you understand how well your application is running,
whether it's fast or slow, and how often certain actions are happening
************************************************************************************************************************************************************************************
Add this dependency for swagger
<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.4.0</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.4.0</version>
		</dependency>
***************************
docker images-to view all images
docker ps -a->to view all the container running or not
docker stop ec-mysql
docker start ec-mysql
***************************************************************************
flyway-->database migration tool
<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
***********************************************************************************************************************
localhost:9191/actuator                      localhost:9191/actuator/info
**********************************************************************************************************************************
CompletableFuture.runAsync(() -> {
    log.info(">> Publishing event details to topic - {} for lead - {}", this.eventTopic, eventTrackerRequest.getLeadId());
    this.kafkaService.sendMessage(this.eventTopic, eventTrackerRequest);
}).whenComplete((result, ex) -> {
    if (ex != null) {
        log.error("Failed to publish message. error - {}", ex.getMessage());
    }
});

*******************
