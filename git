.A commit records a snapshot of all the changes you've made since the last commit, along with a commit message that describes the changes.
Commits are essential for tracking the history of your project.
*******************************************************************************************************************
local means- our Computer
remote-github
***********
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/notes1
$ ls
HELP.md  mvnw*  mvnw.cmd  pom.xml  src/  target/
****************
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/notes1
$ pwd
/c/Users/ashishkumar18/OneDrive - Nagarro/Desktop/notes1
***********
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/notes1
$ git config --global user.name "Kumar14Ashish"
*********
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/notes1
$ git config --global user.email "kumar14ashish06@gmail.com"
******************
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/notes1
$ git config --list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
user.name=Kumar14Ashish
user.email=kumar14ashish06@gmail.com
credential.https://git.nagarro.com.provider=generic
********************
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DesignPattern\BuilderPattern> git config user.name
Kumar14Ashish
*************
clear-->to clear terminal
*********
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> ls 


    Directory: C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone


Mode                 LastWriteTime         Length Name                                                                                             
----                 -------------         ------ ----                                                                                             
d-----        31-03-2024     07:38                .idea
d-----        31-03-2024     07:37                .mvn
d-----        31-03-2024     07:37                src                                                                                              
-a----        31-03-2024     07:37            428 .gitignore
-a----        31-03-2024     07:37            124 Dockerfile
-a----        31-03-2024     07:37          11598 mvnw
-a----        31-03-2024     07:37           7797 mvnw.cmd                                                                                         
-a----        31-03-2024     07:37           1331 pom.xml
*****************
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/notes1
$ ls -a
./  ../  .classpath  .gitignore  .idea/  .mvn/  .project  .settings/  HELP.md  mvnw*  mvnw.cmd  pom.xml  src/  target/
*********
when we do git status it show four type of message
untracked file->untracked file that git does not yet track(means woh  file
jo humne create pheli bar kiya hai aur kabhi commit nhi kiya hai)
****
modified-changed file(Woh file jo phele se exist karti hai aur hum usme change kiye hai)
****
staged-->file is ready to be commited (after adding file move to stagged ahed)
******
unmodified--->after commit 
****
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git push origin main
***********
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git branch
* main
********************************************
git branch -M Main(to change branch name)
************
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git checkout -b feature1
Switched to a new branch 'feature1'
****************
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git checkout main
Switched to branch 'main'
Your branch is up to date with 'origin/main'
************
To delete the feature branch we have to move to the other branch
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git branch -d feature2
Deleted branch feature2 (was 379c001).
**********
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git push origin feature1
Enumerating objects: 17, done.
*******
To compare between fature branch and main branch and currently you are in feature branch.
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git diff main
********
Remote ke changes ko local par lane ke liye git pull karte hai
used to fetch and download content frome remote repo and immediately update the local repo to match that content.
abhi hum main branch mai hai. humne feature1 branch me change karke push feature branch remote me kar diya tha aur merge 
kar diya tha main ke sath. but local ke main branch me change nhi hua tha kuch bhi.Isliye hume local me main branch me 
jakar pull request karna pada. 

PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git pull origin main
******
After resolving merge conflict
we have to first do 
git add .
git commit -m "add both features"
git diff main
git checkout main
git merge feature1
git push
************
Every commit has commit id 
we can find by typing git log
*******
if we want to undo changes from staging area in the git  (that is after git add . ) we can write
git reset
*****
if we want to undo changes from Commit area (that is after git commit -m "abc" ) we can write
git reset HEAD~1
it will back commit to one commit back
***********
if we want multiple commit back then we can write 
git reset hash(every commit has unique hash)
*********
if we want to back in the code also from commit area then we can write
git reset --hard <_commit hash ->
***********
it will add changes to staging area
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git add .
******
it will remove changes from staging area and back to previous in git not on the code
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git restore --staged src/main/java/com/nagarro/springBootDocker/SpringBootDockerApplication.java
*******
It will restore the changes in the code also. It will work only when we apply previous command then this command.
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git restore src/main/java/com/nagarro/springBootDocker/SpringBootDockerApplication.java
*********










***********************************************************************************************************************
git branch -d <branch_name>` to delete local branch
To delete a remote branch, use `git push <remote_name> --delete <branch_name>`.
git push` is used to upload local repository content to a remote repository.
git commit --amend to modify the most recent commit.
git rebase:
Rebase integrates changes by moving the commits from one branch onto another branch.
git merge creates a new commit that combines the changes from both branches.
git rebase applies the changes from one branch onto another.
To resolve a merge conflict, edit the files to fix the conflicting changes
git branch <branch_name>` to create a new branch. Use `git checkout -b <branch_name>`
git log` to view the commit histor
remote refers to a shared repository utilized by all team members for the purpose of exchanging their updates.
git clone <repository_url>`.
git stash temporarily shelves changes allowing you to switch branches or save work-in-progress without committing. Later, you can apply or drop the stashed changes.
To revert a commit that has already been pushed and made public, you can use git revert
git log  # Identify the commit hash
git revert <commit-hash>
git push origin <branch-name>
git fetch retrieves changes from a remote repository to your local repository, updating your remote-tracking branches, but it doesn't merge those changes into your current branch
git pull` not only fetches the updates but also incorporates them into your active branch.
state of file-modified-staged-commited
git add will move the code from working directory to staging area
git commit(to commit changes to head but not to remote repo) will move code from staging area to repository
git config-to configure userBName and email address
git diff-to view the changes made in the file
git pull=git fetch+git merge
git statsh capture the present state of the working directory and index it and keep it n the stack at later stage.it 
returns a clean working directory
git reset --mixed is used to undo the changes made in the working directory and the staging area
git merge --abort is used to stop the merge process and return back to the state before merging again
git clean remove the untracked file from the working directory
********************************************************************************************************************
git config --list
 git config --list command lists all the configuration settings for your Git installation
This includes settings like user name, email, aliases, and other configurations.


Output

user.name=Your Name
user.email=your.email@example.com
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
remote.origin.url=https://github.com/username/repository.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
******************************************************************************************************************
Three Stages of git:
working Area
|git add .
Staging
|git commit
Repository
***********************************
.gitIgnore file
********************************
Inside that we have to type this to ignore file 
*.log--->this will ignore all the file with the extension log

*****************************************************************************************************************
latest commit is called head
head 
suppose "a" is the first commit then it will point to the head after that we commit b then head  will point to the b 
*****************************
If you want your head should point to the particular commit then you should type 
git checkout <commit-id>
*********************************************************************
git log --oneline
b9167f5 (HEAD -> main) Team added

left most portion is commit id.
b9167f5------->The string "b9167f5" is an example of an abbreviated commit hash
The full commit hash is a 40-character hexadecimal string, but it's often cumbersome to work with the entire hash
***********************************************************************************************************
git log --graph
git log --graph command will display the commit history graphically, showing the branching 
and merging structure of your repository
**************************************************************
git Stash:- Sometimes you want to switch the branches, but you are working on an incomplete part of your current project.
You don't want to make a commit of half-done work. Git stashing allows you to do so.
 Normally when you switch branch you will commit the code and switch to the new branch.
If you switch branch without committing. Two things will happen.
1. Switches to the branch carrying the changes.
2. Glt will not allow to switch the branch and asks to commit or stash the changes
The git stash command enables you to switch branches without committing the current branch.
The stash's meaning is "store something safely in a hidden place." The sense in Git is also the same for stash; 
Git temporarily saves your data safely without committing.
*************************************************************************************************************************
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git stash save "modified index2"
Saved working directory and index state On feature1: modified index2
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git stash list                  
stash@{0}: On feature1: modified index2
stash@{1}: On feature1: modified index
stash@{2}: WIP on main: b9167f5 Team added
******************************************************************************************************
        stash
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git stash pop 
On branch feature1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   src/main/java/com/nagarro/springBootDocker/SpringBootDockerApplication.java

no changes added to commit (use "git add" and/or "git commit -a")
Dropped refs/stash@{0} (adbc0910f53cccbe38dbe2968ee552af0587aeaf)

*************************************************************************************************************
PS C:\Users\ashishkumar18\OneDrive - Nagarro\Desktop\Project\DemoClone> git stash apply 'stash@{2}' 
**********************************************************************************************************
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/Project/BestPractice/BestPractice (feature1)
$ git stash apply
On branch feature1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   src/main/java/com/nagarro/springBootBestPractice/BestPractice/controller/ProductController.java
        modified:   src/main/java/com/nagarro/springBootBestPractice/BestPractice/service/ProductService.java
**************************************************************************************************************

ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/Project/BestPractice/BestPractice (feature1)
$ git reset head --hard
HEAD is now at 78d307e first Commit
*********************************************************************
git stash show  --->ye show karega jo humlogo ne stash kiya hai.
jaise kis file me changes ki hai.ye apply nhi karega code me ye bas show kis file me changes hua hai. 
***************************************************************************************************************************
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/Project/BestPractice/BestPractice (feature1)
$ git stash show
 .../BestPractice/controller/ProductController.java                      | 1 +
 .../springBootBestPractice/BestPractice/service/ProductService.java     | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)
************************************************************************************************************************

git stash show -p--->ye show bhi karega kiya changes kiya changes kya hai humlogo ne like content me.
***************************************************************************************
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/Project/BestPractice/BestPractice (feature1)
$ git stash show -p
diff --git a/src/main/java/com/nagarro/springBootBestPractice/BestPractice/controller/ProductController.java b/src/main/java/com/nagarro/springBootBestPractice/BestPractice/controller/ProductController.java
index bf300e3..f60690e 100644
--- a/src/main/java/com/nagarro/springBootBestPractice/BestPractice/controller/ProductController.java
+++ b/src/main/java/com/nagarro/springBootBestPractice/BestPractice/controller/ProductController.java
@@ -80,4 +80,5 @@ public class ProductController {
         log.info("ProductController::getProductByType Execution ended");
         return new ResponseEntity<>(apiResponse,HttpStatus.OK);
     }
+
 }
diff --git a/src/main/java/com/nagarro/springBootBestPractice/BestPractice/service/ProductService.java b/src/main/java/com/nagarro/springBootBestPractice/BestPractice/service/ProductService.java
index b0e6ff2..751aa48 100644
--- a/src/main/java/com/nagarro/springBootBestPractice/BestPractice/service/ProductService.java
+++ b/src/main/java/com/nagarro/springBootBestPractice/BestPractice/service/ProductService.java
@@ -97,7 +97,7 @@ public class ProductService {
             return productMap;
         }
         catch (Exception ex){
-            log.error("Error occured while fetching productByType Error message {}",ex.getMessage());
+            log.error("Error Occured while fetching productByType Error message {}",ex.getMessage());
             throw new ProductServiceBusinessException("Exception occurred while retrieving product grouping by type from database");
         }

*************************************************************************************************************************
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/Project/BestPractice/BestPractice (feature1)
$ git stash show stash@{1} -p
****************************************************
***********************************************************

$ git stash drop stash@{1}

****************************************************************************************
To move to the new branch and apply changes there
ashishkumar18@IN-9YZC5S3 MINGW64 ~/OneDrive - Nagarro/Desktop/Project/BestPractice/BestPractice (feature1)
$ git stash branch feature3 stash@{0}
********************************************************************************************************
Rebashing-->Alternative of merging
Rebashing a branch update one branch with another 
by applying commit of one branch on the top of the commit of another branch.
git rebase is used to cleanup your local commit history
common places where we use rebase -->clean up your commit before sharing your branch
pulling changes from another branch without merge.
**************************************************************************************************************************
 git help --all;
It will show all the command
******************************************************************************************************
git help add
It will open the page releated to add command
******************************************************************************************
git diff --->it is used in the git to track the difference between the changes made on the file
diff command take two input and reflect the difference  between them
***************************************************************************************************
git diff-->it will check the difference between the file in the working area and the staging area
git diff --staged-->it will check the difference between the file in the staging area and the repository area
git diff head-->it will check the difference between the file in the working area and the repository area
*****************************************************************************************************
git store the data in the form of key and value. value is nothing but content of file. you give the value and it will calculate 
a key for it that is nothing but hash.
**************************************************************************************************
git cacluate hash using sha1 algo.
****************************************
mv channel.txt chaneel.html--->to renaming the file
after that do --->git add .
git restore 
**********************************************************************************************************************************************************
git branch -m new_branch--->to change the branch name of your current branch
*******************************************************************************************************************************************************
git branch -d new_branch-->to delete branch you should be on the other branch not on the new_branch
**************************************
Suppose you are in the feature branch and you have done some changes on the feature branch and done commit. After that  you moved to the master branch 
now you want to delete the feature branch when you type the command  git branch -d new_branch  it will give errror, because you have not merged the changes you have done on the 
feature branch to the master.
if you still want to delete without merging you should type the command ""git branch -D new_branch""
****************************************************************************************************************
Source and target
Source is the branch you want to merge and target is the branch where you want to merge
suppose you have done some changes on feature branch and commited that changes. now you want to merge that changes to master. First you need to come to the master 
then you should type the command git merge feature.
here source is the feature and target is the master
*********************************************************************
git merge --abort
it will back the perivous merge means if you have merged some thing by mstake and now you want the previous state before merge then ypu can type this git merge --abort
****************************************************************************


