347. Top K Frequent Elements
**************************************
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
       
        Map<Integer,Integer> map=new HashMap<>();
        int[] a= new int[k];
        int m=0;
        for(int i=0;i<nums.length;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
     Map<Integer, Integer> sortedMap = map.entrySet()
            .stream()
            .sorted(Map.Entry.<Integer, Integer>comparingByValue().reversed())
            .collect(Collectors.toMap(
                Map.Entry::getKey,
                Map.Entry::getValue,
                (e1, e2) -> e1, 
                LinkedHashMap::new
            ));
   
    for(Map.Entry<Integer,Integer> key:sortedMap.entrySet()){
        if(m==k){
          break;
        }
        a[m]=key.getKey();
        m++;
    }
    return a;
        
    }
}
******************************************************************************************************************************************************
Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.

Can you solve it without sorting?
****************************

class Solution {
    public int findKthLargest(int[] nums, int k) {
        int m=1;
        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());
        for(int i=0;i<nums.length;i++){
           pq.add(nums[i]);
           
        }
        while(!pq.isEmpty()){
            if(m==k){
                return pq.poll();
            }
            pq.poll();
           m++;
        }
        return -1;
    }
}
************************************************************************************************************************
Task Schedular
https://www.youtube.com/watch?v=rYh-Kkbzsnw
You are given an array of CPU tasks, each represented by letters A to Z, and a cooling time, n. Each cycle or interval allows the completion of one task. Tasks can be completed in any order, but there's a constraint: identical tasks must be separated by at least n intervals due to cooling time.
â€‹Return the minimum number of intervals required to complete all tasks.
Example 1:
Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8
Explanation: A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B.
After completing task A, you must wait two cycles before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th cycle, you can do A again as 2 intervals have passed.
Example 2:
Input: tasks = ["A","C","A","B","D","B"], n = 1
Output: 6
Explanation: A possible sequence is: A -> B -> C -> D -> A -> B.
With a cooling interval of 1, you can repeat a task after just one other task.
Example 3:
Input: tasks = ["A","A","A", "B","B","B"], n = 3
Output: 10
Explanation: A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B.
***********
class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] freqArray=new int[26];
        int time=0;
        PriorityQueue<Integer> pq=new PriorityQueue<>(Comparator.reverseOrder());
       
        for(int i=0;i<tasks.length;i++){
            freqArray[tasks[i]-'A']++;

        }
        for(int i=0;i<26;i++){
            if(freqArray[i]>0){
                pq.add(freqArray[i]);
            }
         }
        while(!pq.isEmpty()){
             ArrayList<Integer> al=new ArrayList<>();
             for(int i=1;i<=(n+1);i++){
                 if(!pq.isEmpty()){
                    int a=pq.poll();
                     a--;
                     al.add(a);
                 }           

             }
             for(int i=0;i<al.size();i++){
                     if(al.get(i)>0){
                        pq.add(al.get(i));
                     }
                     
             }
             if(pq.isEmpty()){
                time+=al.size();
                
                }
            else{
                time+=(n+1);
            }    
        }

        return time;
    }
}
************************************************************************************************************************

Max Heap-->parent node is greater than child node that is A[parent(i)]>=A[i] except rooot node.
Min heap->child node is greater than parent node.
Heap is always Complete binary tree.
we have to insert data from leaf and as left as possible.
insertion of maxHeap timeComplexity o(log n)
************************************************************************
Min heap
*********
 int parent(int i) { return (i - 1) / 2; }
    int left(int i) { return (2 * i + 1); }
    int right(int i) { return (2 * i + 2); }


 void insertKey(int k) 
    {
        if(heap_size==(capacity-1)){
            return;
        }
        harr[heap_size]=k;
        int i=heap_size;
        while(i>=0){
            if(harr[parent(i)]>harr[i]){
                int temp=harr[parent(i)];
                harr[parent(i)]=harr[i];
                harr[i]=temp;
                System.out.println("harr[parent(i)]:-"+harr[parent(i)]+"harr[i]:-"+harr[i]);
                i=parent(i);
            }
            else{
                break;
            }
        }
        heap_size++;
        // Your code here.
    }
****************************************************************************************************************
Maximum pair sum combinATION
package com.centylatics;
import java.util.*;

public class Main {

	public List<Integer> maxPairSum(int [] A,int[]B,int n, int k){
		Arrays.sort(A);
		Arrays.sort(B);
		PriorityQueue<PairSum> pq=new PriorityQueue<>();
		ArrayList<Integer> al= new ArrayList<>();
		HashSet<Pair> h=new HashSet<>();
		
		int l=n-1;
		int m=n-1;
		pq.add(new PairSum(A[l]+B[m],l,m));
		h.add(new Pair(l,m));
		for(int i=0;i<k;i++) {
			PairSum max=pq.poll();
			
			al.add(max.sum);
			l=max.l-1;
			m=max.m;
			
			if(l>=0&& m>=0 
					&& !h.contains(new Pair(l,m))
					) {
				pq.add(new PairSum(A[l]+B[m],l,m));
			}
			l=max.l;
			m=max.m-1;
			System.out.println("l1:"+l+"m1:"+m);
			if(l>=0&& m>=0 
					&& !h.contains(new Pair(l,m))
					) {
				pq.add(new PairSum(A[l]+B[m],l,m));
			}
		}
		return al;
	}
	
	public static void main(String[]args) {
		int[] a= {1,4,2,3};
		int[] b= {2,5,1,6};
		int n=a.length;
		int k=4;
		
		Main m=new Main();
	List<Integer> al=m.maxPairSum(a,b,n,k);
	for(int i=0;i<al.size();i++) {
		System.out.println(al.get(i));
	}
	}
}
***********
package com.centylatics;

public class PairSum implements Comparable<PairSum>{

	int sum;
	int l;
	int m;
	public PairSum(int sum,int l,int m) {
		this.sum=sum;
		this.l=l;
		this.m=m;
	}
	@Override
	public int compareTo(PairSum o) {
		return Integer.compare(o.sum, sum);
	}
	
}
****
package com.centylatics;

import java.util.Objects;

public class Pair {

	int l;
	int m;
	Pair(int l,int m){
		this.l=l;
		this.m=m;
	}
	
	
}
**************************************************************************************************************************


