
2043) simple-bank-system
  ****
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class Bank {

    private static final class Account {
        private Long balance;
        private final Lock lock = new ReentrantLock(true);

        public Account(Long balance) {
            this.balance = balance;
        }

        public boolean deposit(long amount) {
            lock.lock();
            try {
                balance += amount;
            } finally {
                lock.unlock();
            }

            return true;
        }

        public boolean withdraw(long amount) {
            lock.lock();
            try {
                if (balance < amount) return false;
                balance -= amount;
            } finally {
                lock.unlock();
            }

            return true;
        }
    }

    private final Map<Integer, Account> accounts = new ConcurrentHashMap<>();

    public Bank(long[] balance) {

        for (int i = 0; i < balance.length; i++) {
            accounts.put(i, new Account(balance[i]));
        }
    }

    public boolean transfer(int account1, int account2, long money) {
        if (!validateAccount(account1) || !(validateAccount(account2)) || money < 0) return false;

        var acc1 = getAccount(account1);
        var acc2 = getAccount(account2);

        acc1.lock.lock();
        try {
            acc2.lock.lock();
            try {
                if (acc1.withdraw(money)) {
                    acc2.deposit(money);
                } else {
                    return false;
                }
            } finally {
                acc2.lock.unlock();
            }
        } finally {
            acc1.lock.unlock();
        }

        return true;
    }

    public boolean deposit(int account, long money) {
        if (!validateAccount(account)) return false;
        return getAccount(account).deposit(money);
    }


    public boolean withdraw(int account, long money) {
        if (!validateAccount(account)) return false;
        return getAccount(account).withdraw(money);
    }

    private boolean validateAccount(int account) {
        return account >= 0 && account <= accounts.size();
    }

    private Account getAccount(int account) {
        var acc = accounts.get(account - 1);
        if (acc == null)
            throw new IllegalStateException("invalid account definition " + account + " " + accounts.size());

        return acc;
    }
}
***************************************************************************
2241 Design ATM machine

class ATM {
    private int[] banknotesStore;
    private int[] noteTypes;
    public ATM() {
        banknotesStore=new int[5];
        noteTypes=new int[5];
        noteTypes[0]=20;
        noteTypes[1]=50;
        noteTypes[2]=100;
        noteTypes[3]=200;
        noteTypes[4]=500;




    }
    
    public void deposit(int[] banknotesCount) {
        for(int i=0;i<5;i++){
            banknotesStore[i]+=banknotesCount[i];
        }
    }
    
    public int[] withdraw(int amount) {
        int[] ans=new int[5];
        for(int i=4;i>=0;i--){
           if(amount>=noteTypes[i]){
                int c=amount/noteTypes[i];
                if(c>banknotesStore[i]){
                    c=banknotesStore[i];
                }
                banknotesStore[i]=banknotesStore[i]-c;
                amount=amount-(c*noteTypes[i]);
                ans[i]+=c;

           }
         
        }
        if(amount==0){
            return ans;
        }
        else{
            for(int i=0;i<=4;i++){
                banknotesStore[i]+=ans[i];
               
            }

            return new int[]{-1};
        }
    }
}

/**
 * Your ATM object will be instantiated and called as such:
 * ATM obj = new ATM();
 * obj.deposit(banknotesCount);
 * int[] param_2 = obj.withdraw(amount);
 */
***************************************************************************************************************************************************
535) encode-and-decode-tinyurl

public class Codec {

      Map<String,String> longUrlKey=new HashMap<>();
      Map<String,String> shortUrlKey=new HashMap<>();
          static final String chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    public String getCode(){
         char[] ch=new char[6];
        for(int i=0;i<6;i++){
            ch[i]=chars.charAt((int)(Math.random()*62));
        }
        return  "http://tinyurl.com/"+String.valueOf(ch);
    }
    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
       if(longUrlKey.containsKey(longUrl)){
          return longUrlKey.get(longUrl);
       }
       String code=getCode();
       while(shortUrlKey.containsKey(code)){
         code=getCode();
       }
        longUrlKey.put(longUrl,code);
        shortUrlKey.put(code,longUrl);
         return code;
    }

    public String decode(String shortUrl) {
        return shortUrlKey.get(shortUrl);
    }
}
****************************************************************
1845
seat-reservation-manager
class SeatManager {
    private PriorityQueue<Integer> seats; 
    public SeatManager(int n) {
        seats=new PriorityQueue<>();
        for(int i=1;i<=n;i++){
           seats.offer(i);
        }
    }
    
    public int reserve() {
       
            if(!seats.isEmpty()){
                int a=seats.poll();
                
                return a;
            }
        
        return -1;
    }
    
    public void unreserve(int seatNumber) {
        seats.offer(seatNumber);
    }
}
****************************************************************************
1472
Design BrowserHistory

class BrowserHistory {
   private List<String> al;
   private int cursor=0;
    public BrowserHistory(String homepage) {
        al=new ArrayList<>();
       al.add(homepage);
    }
    
    public void visit(String url) {
        while(al.size()>cursor+1){
            al.remove(al.size()-1);
        }
        al.add(url);
        cursor+=1;
    }
    
    public String back(int steps) {
        if(cursor-steps<0){
            cursor=0;
            return al.get(cursor);

        }
        else{
            cursor=cursor-steps;
            return al.get(cursor);
        }
    }
    
    public String forward(int steps) {
        if(cursor+steps>=al.size()){
           cursor=al.size()-1;
           return al.get(cursor);
        }
        cursor=cursor+steps;
        return al.get(cursor);

    }
}
*******************************************************************************************************
933
Number of Recent calls

You have a RecentCounter class which counts the number of recent requests within a certain time frame.
Implement the RecentCounter class:
RecentCounter() Initializes the counter with zero recent requests.
int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].


class RecentCounter {
    Queue<Integer> q;
    public RecentCounter() {
        q=new LinkedList<Integer>();

    }
    
    public int ping(int t) {
        q.add(t);
        while(q.peek()<t-3000){
            q.remove();
        }
        return q.size();
    }
}
***************************************************************************
225
Implement-stack-using-queues
*********
class MyStack {

   private Queue<Integer> queue;
    public MyStack() {
        queue=new LinkedList<>();
        
    }
    
    public void push(int x) {
        queue.add(x);
        int size=queue.size();
        while(size>1){
            size--;
            queue.add(queue.remove());
        }
    
    }
    
    public int pop() {
        
        return queue.remove();
    }
    
    public int top() {
      
        return queue.peek();
    }
    
    public boolean empty() {
        return queue.isEmpty();
    }
}
******************************************************
622
Design Circular queue
*****
class MyCircularQueue {
    private int[] arr;
     private int front;
     private int rear;
     private int size;
     private int capacity;
    public MyCircularQueue(int k) {
        arr=new int[k];
        this.front=0;
        this.rear=-1;
        this.size=0;
        this.capacity=k;

    }
    
    public boolean enQueue(int value) {
        if(size==capacity){
            return false;
        }
        rear=(rear+1)%capacity;
        arr[rear]=value;
        size++;
        return true;
    }
    
    public boolean deQueue() {
        if(size==0){
            return false;
        }
        front=(front+1)%capacity;
        size--;
        return true;
    }
    
    public int Front() {
        if(size==0){
            return -1;
        }
        return arr[front];
    }
    
    public int Rear() {
        if(size==0){
            return -1;
        }
        return arr[rear];
    }
    
    public boolean isEmpty() {
        return size==0;
    }
    
    public boolean isFull() {
        return size==capacity;
    }
}
*************************************************************************************************************************************************
1670
design-front-middle-back-queue
class Node{
     int val;
    Node next;
    public Node(int val){
        this.next=null;
        this.val=val;
    }
}


class FrontMiddleBackQueue {
   private int size;
   Node head;
    public FrontMiddleBackQueue() {
        head=null;
        this.size=0;
    }
    
    public void pushFront(int val) {
        Node newNode=new Node(val);
        if(head==null){
            head=newNode;
            size++;
            return;
        }
        newNode.next=head;
        head=newNode;
        size++;
    }
    
    public void pushMiddle(int val) {
        Node newNode=new Node(val);
          if(head==null){
            head=newNode;
            size++;
            return;
        }
        if(head.next==null){
           newNode.next=head;
           head=newNode;
           size++;
           return;
        }
        Node temp=head,prev=null;
       
        int mid=size/2;
        for(int i=0;i<mid;i++){
            prev=temp;
            temp=temp.next;
        }
        
        prev.next=newNode;
        newNode.next=temp;
         size++;
    }
    
    public void pushBack(int val) {
        Node newNode=new Node(val);
          if(head==null){
            head=newNode;
            size++;
            return;
        }
        if(head.next==null){
           head.next=newNode;
           size++;
           return;
        }
        Node temp=head;
        while(temp.next!=null){
            temp=temp.next;
        }
        temp.next=newNode;
        size++;

    }
    
    public int popFront() {
        if(head==null){
            return -1;
        }
        if(head.next==null){
          int val=head.val;
          head=null;
          size--;
          return val;
        }
        int val=head.val;
        head=head.next;
        size--;
        return val;
    }
    
    public int popMiddle() {
        if(head==null){
            return -1;
        }
         if(head.next==null){
          int val=head.val;
          head=null;
          size--;
          return val;
        }
         if(size == 2){
            int val = head.val;
            head = head.next;
            size--;
            
            return val;
        }

        int mid=(size-1)/2;
        Node temp=head;
        Node prev=null;
        for(int i=0;i<mid;i++){
            prev=temp;
            temp=temp.next;
        }
        int val=temp.val;
        prev.next=temp.next;
        size--;
        return val;
    }
    
    public int popBack() {
        if(head==null){
            return -1;
        }
        if(head.next==null){
            int val=head.val;
            head=null;
            size--;
            return val;
        }
         Node temp=head;
         while(temp.next.next!=null){
            temp=temp.next;
         }
         int val=temp.next.val;
         temp.next=null;
        size--;
        return val;
    }
}
***********************************************************************************************************************************************
707
Design LinkedList
**********************************************
class Node{
    Node next;
    int val;
    Node(int val){
        this.next=null;
        this.val=val;
    }
}



class MyLinkedList {
   Node head;
   int size;
    public MyLinkedList() {
        head=null;
        this.size=0;
    }
    
    public int get(int index) {
        if(head==null){
            return -1;
        }
        if(index>=size){
            return -1;
        }
        Node temp=head;
        int count=0;
        while(temp!=null){
            if(count==index){
                return temp.val;
            }
            temp=temp.next;
            count++;
            
        }
        return -1;
    }
    
    public void addAtHead(int val) {
        Node newNode=new Node(val);
        
       
            newNode.next=head;
            head=newNode;
        
        size++;
    }
    
    public void addAtTail(int val) {
        Node newNode=new Node(val);
        Node temp=head;
        if(head==null){
            head=newNode;

        }
        
        else{
            while(temp.next!=null){
                temp=temp.next;
            }
            temp.next=newNode;
        }
        size++;

    }
    
    public void addAtIndex(int index, int val) {
        if(index<0 || index>(size)){
            return;
        }
        Node newNode=new Node(val);

        if(index==0){
            newNode.next=head;
            head=newNode;
        }
        else{
            int count=0;
            Node temp=head,prev=null;
            while(temp!=null){
                if(count==index-1){

                    newNode.next=temp.next;
                    temp.next=newNode;
                    break;
                }
                
                temp=temp.next;
                count++;
            }
        }
        size++;
    }
    
    public void deleteAtIndex(int index) {
        if(index<0 || index>=size){
            return;
        }
        if(head==null){
            return;
        }
        if(index==0){
            head=head.next;

        }
        else{
            int count=0;
            Node temp=head,prev=null;
            while(temp!=null){
                if(count==index){
                    prev.next=temp.next;
                    break;
                }
                prev=temp;
                temp=temp.next;
                count++;
            }

        }
        size--;
        
    }
}
******************************************************************************************

355
Design Twiteer
*********
class Twitter {

   private static int timeStamp=0;
   private Map<Integer,User> userMap;
   private class Tweet{
    public int id;
    public int time;
    public Tweet next;
      Tweet(int tweetId){
        time=timeStamp++;
       id=tweetId;
        next=null;
      }

   }
   public class User{
    public int id;
    public Set<Integer> follwed;
    public Tweet head;
       public User(int id){
          this.id=id;
          follwed=new HashSet<>();
          follow(id);
          head=null;
       }
      public void follow(int id){
         follwed.add(id);
      }
      public void unfollow(int id){
         follwed.remove(id);
      }
      public void post(int id){
        Tweet t=new Tweet(id);
        t.next=head;
        head=t;
      }
   }
    public Twitter() {
        userMap=new HashMap<>();

    }
    
    public void postTweet(int userId, int tweetId) {
        if(!userMap.containsKey(userId)){
            User u=new User(userId);
            userMap.put(userId,u);
        }
        userMap.get(userId).post(tweetId);

    }
    
    public List<Integer> getNewsFeed(int userId) {
        List<Integer> l=new LinkedList<>();
        if(!userMap.containsKey(userId)){
            return l;
        }
        Set<Integer> users=userMap.get(userId).follwed;
        PriorityQueue<Tweet>pq=new PriorityQueue<>( (a, b) -> Integer.compare(b.time, a.time));

        for(int user:users){
            Tweet t=userMap.get(user).head;
            if(t!=null){
                pq.add(t);
            }
        }
        int n=0;
        while(!pq.isEmpty() && n<10){
            Tweet t1=pq.poll();
             l.add(t1.id);
             n++;
             if(t1.next!=null){
                pq.add(t1.next);
             }
        }
        return l;
    }
    
    public void follow(int followerId, int followeeId) {
        if(!userMap.containsKey(followerId)){
            User u=new User(followerId);
            userMap.put(followerId,u);
        }
        if(!userMap.containsKey(followeeId)){
            User u=new User(followeeId);
            userMap.put(followeeId,u);
        }
        userMap.get(followerId).follow(followeeId);
      
    }
    
    public void unfollow(int followerId, int followeeId) {
          if(!userMap.containsKey(followerId)||!userMap.containsKey(followeeId)||followerId==followeeId){
            return;
        }
        userMap.get(followerId).unfollow(followeeId);

    }
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */
*******************************************
146
LRU cache
class LRUCache {

    private LinkedHashMap<Integer, Integer> map;
    private int total_capacity;

    public LRUCache(int capacity) {
        map = new LinkedHashMap<>(capacity, 0.75f, true);
        this.total_capacity = capacity;
    }
    
    public int get(int key) {
        if (!map.containsKey(key)) {
            return -1;
        }
        return map.get(key); 
    }
    
    public void put(int key, int value) {
        if (map.containsKey(key)) {
        
            map.put(key, value);
        } else {
            if (map.size() == total_capacity) {

                Integer lruKey = map.keySet().iterator().next();
                map.remove(lruKey);
            }
            map.put(key, value);
        }
    }
}
******************************************************************************************************************************************
class Food{
    int rating;
    String cusine,name;
    public Food(int rating,String cusine,String name){
            this.rating=rating;
            this.cusine=cusine;
            this.name=name;
    }
}

class FoodRatings {

    HashMap<String,Food> menu=new HashMap<>();
    HashMap<String,PriorityQueue<Food>> x=new HashMap<>();
    public FoodRatings(String[] foods, String[] cuisines, int[] ratings) {
      for(int i=0;i<foods.length;i++){
        Food food1=new Food(ratings[i],cuisines[i],foods[i]);
        x.putIfAbsent(cuisines[i],new PriorityQueue<>((a,b)->b.rating==a.rating?a.name.compareTo(b.name):b.rating-a.rating)

        );
        PriorityQueue<Food> pq=x.get(cuisines[i]);
        pq.add(food1);
        menu.put(foods[i],food1);

      } 
        
    }
    
    public void changeRating(String food, int newRating) {
        Food food1=menu.get(food);
         PriorityQueue<Food> pq=x.get(food1.cusine);
         pq.remove(food1);
         food1.rating=newRating;
         pq.add(food1);

    }
    
    public String highestRated(String cuisine) {
        return x.get(cuisine).peek().name;
    }
}

***************************************************************************************************************************************************************


    







