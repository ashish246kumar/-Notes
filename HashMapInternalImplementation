Initially Empty hashMap: Here, the hashmapâ€™s size is taken as 16.  that is 16 buckets

 class Entry<K,V>{

	K key;
	V value;
	Entry next;
	public Entry(K key, V value) {
		
		this.key = key;
		this.value = value;
	}
	public K getKey() {
		return key;
	}
	public void setKey(K key) {
		this.key = key;
	}
	public V getValue() {
		return value;
	}
	public void setValue(V value) {
		this.value = value;
	}
	
}
**************

public class HashMap<K,V>{

	private static  final int INITIAL_SIZE=1<<4;
	private static  final int MAXIUM_CAPACITY=1<<30;
	Entry[] hashTable;
	 HashMap() {
		hashTable=new Entry[INITIAL_SIZE];
	}
	HashMap(int capacity){
		int tabelsize=tableSize(capacity);
		hashTable=new Entry[tabelsize];
	}
	final int tableSize(int cap) {
		 int n=cap-1;
		 n|=n>>>1;
	     n|=n>>>2;
	     n|=n>>>4;
	     n|=n>>>8;
	     n|=n>>>16;
	     
	     return (n<0)?1:(n>=MAXIUM_CAPACITY)?MAXIUM_CAPACITY:n+1;
	     
	}
	public void put(K key,V value) {
		int hash=key.hashCode()%hashTable.length;
		Entry node=hashTable[hash];
		if(node==null) {
			Entry newNode=new Entry(key,value);
			hashTable[hash]=newNode;
			
		}
		else {
			Entry previousNode=node;
			while(node!=null) {
				if(node.key==key) {
					node.value=value;
					return;
				}
				previousNode=node;
				node=node.next;
				
			}
			Entry newNode=new Entry(key,value);
			previousNode.next=newNode;
		}
	}
	public V get(K key) {
		int hash=key.hashCode()%hashTable.length;
		Entry node=hashTable[hash];
		while(node!=null) {
			if(node.key.equals(key)) {
				return (V)node.value;
			}
			node=node.next;
		}
		return null;
		
	}
}
*****************
public class Main {

	 public static void main(String args[]) {

	        HashMap<Integer, String> map = new HashMap<>(1);
	        map.put(1, "hi");
	        map.put(2, "my");
	        map.put(3, "name");
	        map.put(4, "is");
	       

	        String value = map.get(4);
	        System.out.println(value);


	    }

}
*******************************


 

