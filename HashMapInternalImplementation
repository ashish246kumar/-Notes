Initially Empty hashMap: Here, the hashmapâ€™s size is taken as 16.  that is 16 buckets

 class Entry<K,V>{

	K key;
	V value;
	Entry next;
	public Entry(K key, V value) {
		
		this.key = key;
		this.value = value;
	}
	public K getKey() {
		return key;
	}
	public void setKey(K key) {
		this.key = key;
	}
	public V getValue() {
		return value;
	}
	public void setValue(V value) {
		this.value = value;
	}
	
}
**************

public class HashMap<K,V>{

	private static  final int INITIAL_SIZE=1<<4;
	private static  final int MAXIUM_CAPACITY=1<<30;
	Entry[] hashTable;
	 HashMap() {
		hashTable=new Entry[INITIAL_SIZE];
	}
	HashMap(int capacity){
		int tabelsize=tableSize(capacity);
		hashTable=new Entry[tabelsize];
	}
	final int tableSize(int cap) {
		 int n=cap-1;
		 n|=n>>>1;
	     n|=n>>>2;
	     n|=n>>>4;
	     n|=n>>>8;
	     n|=n>>>16;
	     
	     return (n<0)?1:(n>=MAXIUM_CAPACITY)?MAXIUM_CAPACITY:n+1;
	     
	}
	public void put(K key,V value) {
		int hash=key.hashCode()%hashTable.length;
		Entry node=hashTable[hash];
		if(node==null) {
			Entry newNode=new Entry(key,value);
			hashTable[hash]=newNode;
			
		}
		else {
			Entry previousNode=node;
			while(node!=null) {
				if(node.key==key) {
					node.value=value;
					return;
				}
				previousNode=node;
				node=node.next;
				
			}
			Entry newNode=new Entry(key,value);
			previousNode.next=newNode;
		}
	}
	public V get(K key) {
		int hash=key.hashCode()%hashTable.length;
		Entry node=hashTable[hash];
		while(node!=null) {
			if(node.key.equals(key)) {
				return (V)node.value;
			}
			node=node.next;
		}
		return null;
		
	}
}
*****************
public class Main {

	 public static void main(String args[]) {

	        HashMap<Integer, String> map = new HashMap<>(1);
	        map.put(1, "hi");
	        map.put(2, "my");
	        map.put(3, "name");
	        map.put(4, "is");
	       

	        String value = map.get(4);
	        System.out.println(value);


	    }

}
*******************************
which datastrcture hashMap represent
A HashMap is a data structure that allows you to store and manage key-value pairs.
It is also known as a Hash Table.
insertion of elements are very fast, usually with O(1) time complexity.
which data Strcture use to implemet hashMap
Array and LinkedList
Array for bucket and LinkedList for mAPIING which land in the same bucket.
HashMap is not thread safe
When multiple thread access the HashMap they can modify the data at the same time.
**********************************
how do you remove mapping while iterating over hashMap in java



Iterator<Map.Entry<Integer, String>> iterator = hashMap.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<Integer, String> entry = iterator.next();
            if (entry.getValue().equals("Two")) {
                iterator.remove(); // Remove the entry if the value is "Two"
            }
        }
*********************
loadFactor->no that control resizing of the hashMap or table
initally load factor value is 0.75
that is 75%
***********
mappingCount() ->it return the size of the hashMap it return type is long 
size is also used but if hashMap size increases beyond 2^31 it will fail .size return type is integer.
hashMap has not limit

 ******************
ConcurrentHashMap can be safely used in concurent and multithreaded java program. It is thread safe
***************
HashTable and ConcurrentHashMap  both are thread safe but ConcurrentHashMap performace is better.
ConcurrentHashMap  can lock only few segment.
HashTable  can lock whole object.
****************
In hashMap element are not stored in ordered way because hashIndex is calculated.
*********************
import java.util.Objects;

public class Employee {
    private String name;
    private int age;
    private String department;
    private double salary;

    public Employee(String name, int age, String department, double salary) {
        this.name = name;
        this.age = age;
        this.department = department;
        this.salary = salary;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Employee employee = (Employee) o;
        return age == employee.age &&
                Double.compare(employee.salary, salary) == 0 &&
                Objects.equals(name, employee.name) &&
                Objects.equals(department, employee.department);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, age, department, salary);
    }
}
**********
public class Test{
public static void main(String[] args) {
        // Creating an Employee object
        Employee e1 = new Employee("John Doe", 30, "Engineering", 50000.0);
        Employee e2 = new Employee("Jane Smith", 35, "HR", 60000.0);
	HashMap<Employee,String>h=new HashMap<>();
	h.put(e1,"First");
	h.put(e2,"Second");
        System.out.println(h.size());
}
}
***************************************************************************************************************
                                          Concurrent HashMap
************************************************************************************************
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ConcurrentHashmapDemo {

	
	 private static final int NUM_THREADS = 5;
	    private static final int NUM_INSERTIONS = 100;

	    private static ConcurrentHashMap<String, Integer> hashMap = new ConcurrentHashMap<>();


	    public static void main(String[] args) throws InterruptedException {
	        ExecutorService executorService = Executors.newFixedThreadPool(NUM_THREADS);

	        for (int i = 0; i < NUM_THREADS; i++) {
	            executorService.execute(insertRecord());
	        }

	        executorService.shutdown();

	        if (!executorService.isTerminated()) {
	            Thread.sleep(1000);
	        }

	        System.out.println("Size of the hashmap = " + hashMap.size());
	    }

	    private static Runnable insertRecord() {
	        return () -> {
	            for (int i = 0; i < NUM_INSERTIONS; i++) {
	            	System.out.println( Thread.currentThread().getName());
	                hashMap.put(i + Thread.currentThread().getName(), i);
	            }
	        };
	    }
}

****************************
concurent hashMAP has a segmented or bucket level locking.
*************************************
public class ConcurrentHashmapDemo {

	
	   public static void main(String[] args) {
           Map<String, Integer> map = new ConcurrentHashMap<>();
           map.put("one", 1);
           map.put("two", 2);
           map.put("three", 3);

           Iterator<Map.Entry<String, Integer>> iterator = map.entrySet().iterator();

           // Attempt to modify the map while iterating
           while (iterator.hasNext()) {
               Map.Entry<String, Integer> entry = iterator.next();
               if (entry.getKey().equals("two")) {
                   map.put("four", 4); 
               }
           }

       System.out.println(map);
       }
}
this will throw exception if we use HashMap--->// This will throw ConcurrentModificationException
