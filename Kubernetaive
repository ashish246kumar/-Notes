 Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications
It abstracts the underlying infrastructure and provides a consistent API for interacting with the cluster.
*************************************
Master Node:
The heart of a Kubernetes cluster is the Master Node.manages the overall cluster state.
The Master Node is responsible for such as scheduling new pods, monitoring the health of nodes and pods, and scaling applications based on demand.
The Master Node consists of several key components:
API Server: This is the central management point of the cluster. It exposes the Kubernetes API, which allows users and other components to interact with the cluster.
etcd: It is a distributed key-value store that stores the configuration data of the cluster. All information about the cluster’s state is stored here.
Controller Manager: The Controller Manager includes several controllers that watch the cluster state through the API Server and take corrective actions to ensure the desired state is maintained.
Scheduler: The Scheduler is responsible for assigning new pods to nodes based on resource requirements and availability. It helps distribute the workload evenly across the worker nodes.
************************************************************************
Worker Nodes:
The Worker Nodes are the machines where containers (pods) are scheduled and run. 
Kubelet: The Kubelet is the agent that runs on each Worker Node and communicates with the Master Node.It ensures that the containers described in the pod specifications are running and healthy.
Container Runtime: Kubernetes supports multiple container runtimes, such as Docker or containerd. The Container Runtime is responsible for pulling container images and running containers on the Worker Nodes
Kube Proxy: Kube Proxy is responsible for network communication within the cluster. It manages the network routing for services and performs load balancing.
****************************************
when a user deploys a new application, the configuration is sent to the API Server, which then stores it in etcd.
The Controller Manager continuously monitors the cluster state through the API Server. If there are any deviations from the desired state (e.g., a pod is not running), the Controller 
Manager takes corrective actions to reconcile the state
****************************************************************************
we have a Kubernetes cluster with three worker nodes: Node A, Node B, and Node C. These nodes are responsible for hosting and running our containerized applications
Nodes represent individual machines in a cluster
*************************************************************************************************************************************
A Pod is the smallest deployable unit in Kubernetes and represents one or more tightly coupled containers.
*****************************************************************************
Suppose we want to deploy a simple web application in our Kubernetes cluster, and this web application requires both an application server and a database. 
We can package both the application server and the database server into a single pod.
****************************************************************************************************************
apiVersion: v1
kind: Pod
metadata:
  name: webapp-with-db
  labels:
    app: my-webapp
spec:
  containers:
    - name: webapp
      image: nginx:latest
      ports:
        - containerPort: 80
    - name: database
      image: mongo:latest
***************************************************************************************************************************************
A Kubernetes Service is an abstraction that defines a stable endpoint to access a group of pods. 
It allows you to expose your application to other pods within the cluster or to external clients. 
Services provide load balancing and automatic scaling for the pods behind them, ensuring that the application remains highly available.
*****************************************************************************************************************************************
Ingress:
While the service enables internal communication between pods within the cluster, Kubernetes Ingress provides a way to expose your services to external clients outside the cluster. 
It acts as an external entry point to your applications and enables you to configure routing rules and load balancing for incoming traffic.
**********************************************************************************************************************************************
A Kubernetes ConfigMap is used to store configuration data that can be consumed by pods as environment variables or mounted as configuration files. It helps separate the configuration from the container image, 
making it easier to update configurations without rebuilding the container.
************************************************************************************************************************************
Kubernetes Secrets are used to store sensitive information, such as passwords, API keys, or TLS certificates. 
Secrets are base64-encoded by default and can be mounted as files or used as environment variables in pods.
**********************************************************************************************************************************
A Kubernetes Volume is a directory that is accessible to all containers in a pod. It decouples the storage from the containers, ensuring that data persists even if a container is restarted or rescheduled.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
We’ve added a new YAML block to create a PersistentVolumeClaim (PVC) named database-pvc.
The PVC defines the storage requirements for our database. In this example, we request a 1Gi storage volume
The MongoDB data will be stored persistently in the db-data volume, which is backed by the dynamically provisioned PersistentVolume
The db-data volume is used by the MongoDB container to store its data.
The db-data volume is backed by a PersistentVolume (in Kubernetes) that was dynamically
apiVersion: v1
kind: Pod
metadata:
  name: webapp-with-db
  labels:
    app: my-webapp
spec:
  containers:
    - name: webapp
      image: nginx:latest
      ports:
        - containerPort: 80
      envFrom:
        - configMapRef:
            name: webapp-config
    - name: database
      image: mongo:latest
      env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
      volumeMounts:
        - name: db-data
          mountPath: /data/db
  volumes:
    - name: db-data
      persistentVolumeClaim:
        claimName: database-pvc

********************************************************************************************************************************************************
Deployment:
A Kubernetes Deployment is a higher-level abstraction that manages a set of identical pods. It's ideal for stateless applications where individual pods are interchangeable
The Deployment ensures that the desired number of replicas is maintained. If a pod fails or is terminated, the Deployment will automatically create a new pod to replace it, ensuring high availability
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-webapp
  template:
    metadata:
      labels:
        app: my-webapp
*********************************************************************************************************************************************************************
Interacting with a Kubernetes cluster is primarily done using the `kubectl` command-line tool. `kubectl`
 allows you to inspect and manage various Kubernetes resources, such as pods, deployments, services, and more, in the cluster.
**********************************************************************************************************************************************************************
Inspecting Cluster Information:
To check the status of your cluster and its components:
kubectl cluster-info
To view the nodes in your cluster:
kubectl get nodes
To get a list of resources (pods, services, deployments, etc.) in your namespace
kubectl get <resource>
Replace `<resource>` with the name of the resource you want to list (e.g., `pods`, `services`, `deployments`, etc.).
2. To get detailed information about a specific resource:

kubectl describe <resource> <resource_name
To create or apply a Kubernetes resource from a YAML configuration file:
kubectl apply -f <filename>
2. To delete a resource:
kubectl delete <resource> <resource_name>
Interacting with Pods:
To view the pods in your namespace:
kubectl get pods
2. To view the logs of a specific pod:
kubectl logs <pod_name>
Interacting with Services:
To view the services in your namespace:
kubectl get services
2. To access a service from your local machine:

kubectl port-forward <service_name> <local_port>:<service_port>
******************************************************************************


