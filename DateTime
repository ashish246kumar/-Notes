A LocalDate represents a year-month-day in the ISO calendar and is useful for representing a date without a time.
reprent a date without time
Issue with old date and calender classes is that they are mutuable that is there object are mutuable.

***************************************************************************************************************************************************************************
/ Current date
LocalDate currentDate = LocalDate.now();
int year = currentDate.getYear();
int month = currentDate.getMonthValue();
int day = currentDate.getDayOfMonth();
LocalDate newDate = currentDate.withYear(2025).withMonth(5);
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
String formattedDate = currentDate.format(formatter);

// Specific date
LocalDate specificDate = LocalDate.of(2024, 4, 2); // Year, Month, Day

**************************************************************
private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d/MM/yyyy");
private static final DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("d-MMM-yyyy");
private static final DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("d/MM/yyyy");
public static void main(String[] args) {
 //default format
 System.out.println("Default format of LocalDate = " + LocalDate.now());
   
 // The ISO date formatter that formats or parses a date without an
  // offset, such as '20111203'
 LocalDate date = LocalDate.now();
 
 System.out.println(date.format(DateTimeFormatter.BASIC_ISO_DATE));
 
 System.out.println(date.format(DateTimeFormatter.ISO_DATE));
 
 System.out.println(formatter.format(LocalDate.parse("16/08/2016", formatter)));
 
 System.out.println(formatter1.format(LocalDate.parse("16-Aug-2016", formatter1)));
 
 System.out.println(formatter2.format(LocalDate.parse("16/08/2016", formatter2)));
}

Default format of LocalDate = 2018-07-11
20180711
2018-07-11
16/08/2016
16-Aug-2016
16/08/2016
***********************************************************************************************************
03-Apr-2024 
***********************************************************************************************************
LocalDate currentDate = LocalDate.now();

        // Define a custom DateTimeFormatter to format the date as "dd-MMM-yyyy"
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");

        // Format the current date using the custom formatter
        String formattedDate = currentDate.format(formatter);

        // Print the formatted date
        System.out.println("Formatted Date: " + formattedDate);

Formatted Date: 03-Apr-2024

*******************************************************************************************************************************
 String timeString="23:45:55";
 LocalTime l=LocalTime.now();
 LocalTime parsed= LocalTime.parse(timeString);
 System.out.println(parsed.getMinute());
 System.out.println(l.minusHours(3));
****************************************************************************************************************************
 LocalDateTime localDateTime=LocalDateTime.now();

        DateTimeFormatter  dateTimeFormatter=DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
      System.out.println(localDateTime.format(dateTimeFormatter));
****************************************************************************************************************************
UTC-->it is time which is same everywhere in the world
Universal time 
ZonedDateTime z=ZonedDateTime.now();

        System.out.println(z);
        System.out.println(z.getZone());
2024-04-03T12:08:12.866782900+05:30[Asia/Calcutta]
Asia/Calcutta
+5:30 is saying that it is ahed of UTC by 5:30 hours
**********************************************************************************************************************
To get all the zone
  Set<String> l1=ZoneId.getAvailableZoneIds();
*************************************************************************************************]
 ZonedDateTime newWorkTime=ZonedDateTime.now(ZoneId.of("America/New_York"));
        System.out.println(newWorkTime);
******************************************************
Duration is used when we need compare between minutes hours  second
*********************************************
Instant start=Instant.now();
//        System.out.println(i.getNano());
        Instant end=Instant.now();
        Duration d1=Duration.between(start,end);
        System.out.println(d1);
****************************************************
Period is used when we need to copare between year
****************
 LocalDate l1=LocalDate.now();
       for(int i=0;i<10000;i++);
       LocalDate l2=LocalDate.of(1990,2,2);
        Period p1=Period.between(l1,l2);
        System.out.println(p1);
***************************************************
      String d1="2023/01/02";
      String d2="2022/01/02";
      DateTimeFormatter dateTimeFormatter=  DateTimeFormatter.ofPattern("yyyy/MM/dd");
      LocalDate l2=LocalDate.parse(d1,dateTimeFormatter);
      String s1=d2.formatted(dateTimeFormatter);
      System.out.println(s1);

2022/01/02
*************************************************************
  final Date dropOffStatusTime;
  final LocalDateTime createdAt=LocalDateTime.ofInstant(dropOffStatusTime.toInstant(), ZoneId.systemDefault());
     private LocalDateTime createdAt;
     abc.builder().createdAt(createdAt).build();
   Instant: Preferred in modern applications for precise and time zone-independent 
point-in-time representation, often used in conjunction with other java.time classes 
for more complex date and time manipulation.
**************************************************************************
 public static Date dateAndTimeToDateOnly(LocalDate inputDate) {
    return Date.from(inputDate.atTime(12, 0, 0).atZone(ZoneId.systemDefault()).toInstant());
  }
*******************************************************************************


