
Equals method has hashcode | 
overloaded method 
hashcode
use the concept of multithreading-one thread will print even and one will odd
hashcode->Linkedlist<>
ashish :delhi
ashish1:mumbai
if at the time of getting the value how we can fetch. if the hascode of bth the value same
what is hashing
can we overload private method?
can we overload static method?
same with overiding
 write the example that will produce one value and one will consume that value
if in parent class there is no  exception and in child class there is uncheked exception can we overide
if in parent class there is no  exception and in child class there is cheked exception can we overide
if in parent class there is exception and in child class there is no can we overide it.
what is the benefit of stram api 
public static void main(String[] args)-> isko explain karo. 
difference between hashcode and equals method
Do you have working experience on Exception Handling , Multithreading , Concurrency Control
*******************
if in parent class there is exception and in child class there is no can we overide it.


Child class method zyada strict ya same level ka exception handle kar sakta hai, lekin zyada broad nahi.
No exception in the child method is allowed even if the parent throws an exception

******************************************
stream api 
Stream API se for-loops ki jagah method chaining ka use hota hai, jisse code short aur clean lagta hai.
Data ko ek form se dusre form me convert karna easy hota hai using map().
✅ Performance boost with parallel streams
✅ Functional programming ka flavor milta hai
✅ Less code, more readability
*********************************
if in parent class there is no  exception and in child class there is uncheked exception can we overide

override kar sakte ho agar parent class ke method me koi exception nahi hai aur child class ke method me unchecked exception hai.
Unchecked Exceptions (jaise RuntimeException, NullPointerException, etc.) ko method signature me declare karna zaroori nahi hota (throws lagane ki need nahi hoti).
class Parent {
    void show() {
        System.out.println("Parent show()");
    }
}

class Child extends Parent {
    @Override
    void show() throws RuntimeException {  // Unchecked exception
        System.out.println("Child show() with unchecked exception");
        throw new RuntimeException("Runtime Exception in Child");
    }
}
Explanation:
Parent Class ka show() method koi exception nahi throw kar raha.
Child Class ka show() method unchecked exception (RuntimeException) throw kar raha.
✅ Ye allowed hai kyunki unchecked exception compile time pe nahi check hota.
Lekin agar tum checked exception (jaise IOException) throw karte ho bina parent me declare kiye, toh compile time error aayega.
********************************





*********************************************************************************
can we overload static method?
Static methods ko overload kar sakte ho.
Static ya non-static hone ka koi effect nahi padta.
Static methods ko override nahi kiya ja sakta.
Agar subclass me same naam ka static method likhoge, toh wo method hiding kehlata hai, overriding nahi.
class Parent {
    static void display() {
        System.out.println("Parent static method");
    }
}

class Child extends Parent {
    static void display() {
        System.out.println("Child static method");
    }
}

public class Main {
    public static void main(String[] args) {
        Parent obj1 = new Parent();
        Parent obj2 = new Child();

        obj1.display();  // Output: Parent static method
        obj2.display();  // Output: Parent static method (method hiding hua, overriding nahi)
    }
}
obj2 actually Child ka object hai, phir bhi Parent ka method call hua.
Kyunki static methods class level pe bind hote hain, runtime pe nahi badalte.
************************************************************************************



*****************************************************************
can we overload private method?
Overloading ka matlab hota hai same method name ka use karna but alag-alag parameters ke saath.
Dono methods private hain, lekin overloading within the class perfectly valid hai.
Overloading compile-time pe decide hota hai, isliye access modifier (jaise private) ispe koi effect nahi daalta.
Agar subclass mein same private method likhoge toh wo override nahi hoga, balki ek naya method banega, kyunki private methods subclass ko visible hi nahi hote.
****************************
Jab tum code likhte ho aur run karne se pehle compile karte ho, tabhi compiler check karta hai ki kis method ko call karna hai. Overloading sirf method signature pe depend karta hai — matlab
method ka naam aur uske parameters (type aur number).
*******************************











difference between hashcode and equals method
✅ 1. equals() aur hashCode() ka Default Behavior
Jab hum kisi bhi class ka object banate hain aur equals() aur hashCode() override nahi karte, toh dono methods Object class ke methods use karte hain.

equals() Method:
By default, yeh memory reference ko compare karta hai, yaani ki do objects ek hi memory location ko point karte hain ya nahi.
Agar do alag objects same data ke saath bhi banaye gaye hain, toh equals() false return karega kyunki unka memory address alag hoga.
hashCode() Method:
By default, yeh object ke memory address se ek unique integer generate karta hai.
Do alag objects ka hashCode alag hoga, chahe unka data same hi kyun na ho.2 same object ka hascode same hoga but 2 alag object ka hashcode differnet hoga.
hashCode() Method:
By default, yeh object ke memory address se ek unique integer generate karta hai.
Do alag objects ka hashCode alag hoga, chahe unka data same hi kyun na ho.

Object o1 = new Object();
Object o2 = o1;           // Same reference
Object o3 = new Object();  // Different reference

System.out.println(o1.equals(o2));  // true (dono same memory ko point karte hain)
System.out.println(o1.equals(o3));  // false (alag memory location)

System.out.println(o1.hashCode());  // Example: 102345
System.out.println(o2.hashCode());  // 102345 (same as o1)
System.out.println(o3.hashCode());  // Example: 205678 (different)
✅ 2. Kyun equals() aur hashCode() Override Karna Zaroori Hai?
Agar hum apne custom class ke objects ko HashMap, HashSet jaisi collections mein use karte hain, toh equals() aur hashCode() override karna zaroori hai.

Scenario:
Maan lo humare paas ek Student class hai jisme rollNum aur name fields hain.

Without Overriding:
java
Copy
Edit
class Student {
    int rollNum;
    String name;

    Student(int rollNum, String name) {
        this.rollNum = rollNum;
        this.name = name;
    }
}

public class Main {
    public static void main(String[] args) {
        Student s1 = new Student(1, "Sam");
        Student s2 = new Student(1, "Sam");

        System.out.println(s1.equals(s2));  // false (kyunki reference compare hoga)
        System.out.println(s1.hashCode());  // Example: 123456
        System.out.println(s2.hashCode());  // Example: 789012
    }
}
Yaha problem kya hai?

Same roll number aur name hone ke bawajood equals() false de raha hai.
HashSet ya HashMap mein yeh dono alag entries banayenge, jo galat behavior hai.
✅ 3. Overriding equals() aur hashCode() sahi tarike se
Ab hum dono methods override karenge taki Student object ka comparison data ke basis pe ho.
class Student {
    int rollNum;
    String name;

    Student(int rollNum, String name) {
        this.rollNum = rollNum;
        this.name = name;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;  // Agar dono same object hain
        if (obj == null || getClass() != obj.getClass()) return false;  

        Student student = (Student) obj;
        return this.rollNum == student.rollNum;  // RollNum se compare karo
    }

    @Override
    public int hashCode() {
        return rollNum;  // Same rollNum ka same hashCode hoga
    }
}
Ab yeh kaise behave karega?

public class Main {
    public static void main(String[] args) {
        Student s1 = new Student(1, "Sam");
        Student s2 = new Student(1, "Sam");

        System.out.println(s1.equals(s2));  // true (kyunki rollNum same hai)
        System.out.println(s1.hashCode());  // 1
        System.out.println(s2.hashCode());  // 1

        // HashSet ka example
        Set<Student> set = new HashSet<>();
        set.add(s1);
        set.add(s2);

        System.out.println(set.size());  // Output: 1 (same object treat kiya gaya)
    }
}



***********************de**************************
Create a custom immutable class.
**********
To create a custom immutable class in Java, you need to ensure that the state of the class cannot be modified after the object is created.
*******
Mark the class as final to prevent subclassing.
Make all fields private and final, ensuring they are initialized only once.
Provide a constructor that sets all the fields.
Do not provide setters (no methods to modify the state).
If the class contains mutable fields, ensure they are properly handled (e.g., using defensive copies).
public final class ImmutablePerson {

    private final String name;
    private final int age;
    private final Address address; 
 public ImmutablePerson(String name, int age, Address address) {
        this.name = name;
        this.age = age;
        this.address = new Address(address.getStreet(), address.getCity());
    }

    // Getter methods to access the fields
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public Address getAddress() {
        // Return a defensive copy of the mutable field to prevent modification
        return new Address(address.getStreet(), address.getCity());
    }

  public static class Address {
        private final String street;
        private final String city;

        public Address(String street, String city) {
            this.street = street;
            this.city = city;
        }

        public String getStreet() {
            return street;
        }

        public String getCity() {
            return city;
        }
    }
}

*******************************************************************************************************************************************************************
Serialization, deserialization, and externalization.

Java provides a built-in mechanism for serialization by implementing the java.io.Serializable interface.
When an object is serialized, all of its instance variables and references are converted into bytes.
Fields marked as transient are not serialized.
The class must have a unique serialVersionUID (automatically generated if not provided). This helps during deserialization to verify that the same class (or compatible version) is used.
Java uses ObjectInputStream to read the serialized byte stream and converts it back into the original object.
The class being deserialized must have the same serialVersionUID as when it was serialized,
*******************
Deserilization:_
the process of reconstructing an object from its byte stream back into a fully functional Java object.
Java uses ObjectInputStream to read the serialized byte stream and converts it back into the original object.

**************************************************
 Externalization:_Externalization is a more advanced version of serialization where the developer has control over what to serialize and how to serialize it.
the class must implement the java.io.Externalizable interface, which requires you to override two methods:
writeExternal(ObjectOutput out): Controls how the object is written to the output stream.
readExternal(ObjectInput in): Controls how the object is reconstructed from the input stream.
import java.io.*;
class Car implements Externalizable {
    static int age;
    String name;
    int year;

    public Car()
    {
        System.out.println("Default Constructor called");
    }

    Car(String n, int y)
    {
        this.name = n;
        this.year = y;
        age = 10;
    }

    @Override
    public void writeExternal(ObjectOutput out)
        throws IOException
    {
        out.writeObject(name);
        out.writeInt(age);
        out.writeInt(year);
    }

    @Override
    public void readExternal(ObjectInput in)
        throws IOException, ClassNotFoundException
    {
        name = (String)in.readObject();
        year = in.readInt();
        age = in.readInt();
    }

    @Override public String toString()
    {
        return ("Name: " + name + "\n"
                + "Year: " + year + "\n"
                + "Age: " + age);
    }
}

public class ExternExample {
    public static void main(String[] args)
    {
        Car car = new Car("Shubham", 1995);
        Car newcar = null;

        // Serialize the car
        try {
            FileOutputStream fo
                = new FileOutputStream("gfg.txt");
            ObjectOutputStream so
                = new ObjectOutputStream(fo);
            so.writeObject(car);
            so.flush();
        }
        catch (Exception e) {
            System.out.println(e);
        }

        // Deserialization the car
        try {
            FileInputStream fi
                = new FileInputStream("gfg.txt");
            ObjectInputStream si
                = new ObjectInputStream(fi);
            newcar = (Car)si.readObject();
        }
        catch (Exception e) {
            System.out.println(e);
        }

*******************
The serialVersionUID is a unique identifier in Java used during the serialization and deserialization process to ensure that a serialized object
 corresponds exactly to the class definition used to deserialize it.
When an object is serialized, the serialVersionUID of the class is saved with the object's byte stream
*****************************************************************************
generics and wildcards:-
generics and wildcards are used to define collections that can hold elements of specific or any type.
Generics  helps catch type mismatches during compilation.
Wildcards
A wildcard is a special type argument that can be used in place of a type parameter in a generic class or method. The wildcard is represented by the “?” symbol.
*****************************************************************
Generics allow you to define a class or a method that can work with any type, without specifying a particular class until you use it.
public class Box<T> {
    private T item;

    public void set(T item) {
        this.item = item;
    }

    public T get() {
        return this.item;
    }
}
Box<Integer> integerBox = new Box<>();
integerBox.set(10);
Integer value = integerBox.get();  // Value is safely cast to Integer.

Box<String> stringBox = new Box<>();
stringBox.set("Hello");
String str = stringBox.get();  // Safely cast to String.

*********************************
Types of wild card
Unbounded Wildcard (<?>):
public void printBox(Box<?> box) {
    System.out.println(box.get());  // You can call methods that don't depend on the type.
}
****
Upper Bounded Wildcard:-) is used when you need to get data from a generic structure.

public void addToBox(Box<? extends Number> box) {
    Number number = box.get();  // Safely retrieves a Number or its subclass (e.g., Integer, Double).
}
**************
Lower Bounded Wildcard (<? super T>):) is used when you need to put data into a generic structure.

public void addNumber(Box<? super Integer> box) {
    box.set(100);  // Can add an Integer or any of its subclasses.
}
************************************************************************************************************************
how the string object are store in memory in java?
string objects are stored in the heap memory. 
When you create a string literal (using double quotes), Java first checks if an identical string already exists in the String Pool, a special area within the heap.
If the string exists, a reference to that existing string is returned, saving memory.
If the string doesn't exist, a new string object is created in the String Pool, and a reference to it is returned.

String str1 = "Hello";
String str2 = "Hello";

// str1 and str2 will refer to the same object in the String Pool

String str1 = new String("Hello");
String str2 = new String("Hello");

// str1 and str2 are two different objects in the heap
********************************************************************************************************************
toString() is the built-in method of java.lang which return itself a string.
 Since toString() method simply returns the current string without any changes, there is no need to call the string explicitly, it is usually called implicitly.
public class Geeks { 
  
    public static void main(String args[]) 
    { 
        String Strobj = new String("Welcome to the world of geeks."); 
        System.out.print("Output String Value :"); 
        System.out.println(Strobj.toString()); 
  
        String Strobj2 = new String("Let's make it simple for you."); 
        System.out.print("Output String Value :"); 
        System.out.println(Strobj2.toString()); 
    } 
} 
************************************************************************************************************************************
If a class does not extend any other class then it is a direct child class of Object
 toString() method to get the string representation of an object
The toString() method is present in the Object class. Since every class in Java implicitly extends the Object class (except Object itself), all classes inherit the toString() method by default.
The Object class is part of the java.lang package.
toString() in the Object class provides the default implementation.

 @Override
    public String toString() {
        return "Best_Friend{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", college='" + college + '\'' +
                ", course='" + course + '\'' +
                ", address='" + address + '\'' +
                '}';
    }
**********************************************************************************************************************************************
PUT VS PATCH
Spring Boot, PUT and PATCH are both HTTP methods used to update resources, but they differ in how they handle the update process
Purpose: PUT is used to replace an entire resource with the new data provided in the request.

Purpose: PATCH is used to partially update a resource. Only the fields provided in the request are updated, and the rest of the resource remains unchanged.
Use Case	Complete replacement of a resource	Partial updates to a resource

*********************
Using POST for an update operation is not RESTful and goes against standard HTTP semantics
Yes, you can technically perform a GET operation using a POST request, but it is not recommended because it violates HTTP semantics
**********************************
2. What are the Spring Boot key components?
key components
1️⃣ Spring Boot Starter
spring-boot-starter-web → For building web applications.
spring-boot-starter-data-jpa → For working with JPA & Hibernate.
spring-boot-starter-security → For authentication & authorization.

 Spring Boot Auto-Configuration
Automatically configures Spring Beans based on the dependencies present in the classpath

Spring Boot Embedded Server
Spring Boot includes an embedded web server, eliminating the need to deploy a WAR file.
Default: Tomcat (can be replaced with Jetty or Undertow).

Spring Boot Profiles
Supports multiple environments (e.g., dev, prod)

Spring Boot Logging
Uses SLF4J with Logback by default

🔟 Spring Boot Testing
Supports JUnit, Mockito, and Spring Boot Test.

Built-in support for Microservices

Comes with Spring Boot Actuator for monitoring
✅ Less Code, Less Configuration

**************************************************************************
How Spring Boot Works

Every Spring Boot app starts with the main() method containing SpringApplication.run().
This method initializes the Spring Boot framework, scans for beans, and sets up the application.
@SpringBootApplication enables component scanning, auto-configuration, and Spring Boot configurations.
Spring Boot scans packages for @Component, @Service, @Repository, etc.

***********
✅ Initializes with SpringApplication.run()
✅ Auto-configures dependencies (No XML, No manual setup)
✅ Starts an embedded server (Tomcat by default)
✅ Manages beans with Dependency Injection
✅ Provides pre-configured Starters (Web, JPA, Security, etc.)
✅ Includes Actuator for monitoring & health checks
*********************************************************************************************
Summary of Key Spring Boot CLI Commands
Command	Description
spring --version	  Check Spring Boot version
spring init myapp	  Create a new Spring Boot project
spring run app.groovy Run a Spring Boot Groovy script
mvn spring-boot:run	  Run a Spring Boot Java application
spring init --list	  List available dependencies
mvn clean package	  Package the app as a JAR
java -jar myapp.jar	  Run an executable JAR
mvn spring-boot:run -Ddebug	Enable debug mode
**********************************************************************
Spring Boot CLI (Command Line Interface) is a powerful tool that allows you to run Spring Boot applications without needing an IDE
*********
Spring Initializr is a web-based tool that helps developers quickly generate Spring Boot project templates with the required dependencies
*****************************************************************************************************

15. Can we create a non-web application in Spring Boot?
Yes, you can create a non-web application in Spring Boot! While Spring Boot is widely used for building web applications, it can also be used to develop console-based, batch processing, or background task applications
*********************************************************************************************
Aspect	                                     hashCode()                                                         	equals()
Definition (परिभाषा)	Ye ek method hai jo object ka ek unique integer value (hash code) return karta hai. 	Ye ek method hai jo do objects ko compare karta hai aur batata hai ki wo equal hain ya nahi.
Return          Type (रिटर्न टाइप)	Integer (ek number)                                                       	Boolean (true ya false)
Purpose (उद्देश्य)	Objects ko efficiently store aur retrieve karne ke liye use hota hai (e.g., HashMap, HashSet mein).	Do objects ke content ya value ko compare karne ke liye use hota hai.
Relation (संबंध)	Agar do objects equals hain, to unka hashCode bhi same hona chahiye.	             Agar do objects ka hashCode same hai, to ye zaroori nahi ki wo equals hain.
Performance (प्रदर्शन)	Fast hota hai kyunki sirf ek integer calculate karta hai.	               Thoda slow ho sakta hai kyunki detailed comparison karta hai.
****************
consumer Interface

https://youtube.com/shorts/Tdy8HQoO9t0?si=f64m11bCYshX09OK

supplier interface
https://youtube.com/shorts/xn6mYzaBk1s?si=nHYDjS3t2q7tJQSb
predicate

https://youtube.com/shorts/dqy1Dn4YLOI?si=IkOLwvNaZ-yG-znc

functional interface
https://youtube.com/shorts/4VMLaSVRphE?si=u4xnuAWLhlXyABrR
java 8 new feature

https://youtube.com/shorts/KYY8S06JqjY?si=hZ8eslWnwGQvAQit

lambda expression
https://youtube.com/shorts/nHv-f72lRPQ?si=Z372IuFtoyDlm6bo


https://youtube.com/shorts/nHv-f72lRPQ?si=anNn2yWtFng_b2P0

stream api
https://youtube.com/shorts/kGJXM0nj_5g?si=tzbid_-u_sKsFr3g

method reference
https://www.youtube.com/watch?v=ar5jQQRWxFM

hashmap vs hashtable

https://youtube.com/shorts/cCHjZfh9vGo?si=6wvO3aGxexbPzyev


hashmap vs hashset
https://youtube.com/shorts/f4JENbCxQjM?si=cwQ9NRLDVg_sL4HW

hashMap vs concurrentHashMap

https://youtube.com/shorts/twDt-USkzoA?si=PiZDttvxlHgEZsHr

HashMap vs linkedhashMap vs treeMap
https://youtube.com/shorts/1F1Kvv6JLIw?si=T_kGlgfGRYKLtkih


queue vs priorityQueue
https://youtube.com/shorts/8Xik6C6FL40?si=uvF_VHZ5xnof0NIg

deque

https://youtube.com/shorts/5XOYJrOagDQ?si=fnMr2OlbMpoq0lwu

https://youtube.com/shorts/f1YYdt-Qb9g?si=95VBAYKuVz6WRFpb

arrays vs arraylist

https://youtube.com/shorts/PwfbSoe9n4g?si=JFg7pVPLx5q2Bl4N


arraylist vs linkedlist
https://youtube.com/shorts/oEtdKJfEaQU?si=PBQZ7aCtUliS5j1A


stream vs parallel stream
https://youtube.com/shorts/9sWvarP_9Y8?si=kTtv9kIK6wi9l07s


optional class
https://youtube.com/shorts/5oU6u5lgWl8?si=rDT9KRlpj2HcgMNf
https://youtube.com/shorts/ggezoW3y3YU?si=k00LBCtVlxsCWwVG


omparable vs comparator
https://www.youtube.com/watch?v=B9vwD5mA_jA
https://youtube.com/shorts/ibTd_Cp2Z_8?si=1HdruaLU1dYUD3xQ

https://youtube.com/shorts/Ksod8h7SCvk?si=nMeXskCH2kJaMVrJ

volatile keyword
https://www.youtube.com/watch?v=WDn_Bax0UFo
https://youtube.com/shorts/TFxKKtaxOKs?si=YjLdQKACq7ewQpFn
https://youtube.com/shorts/9c_wJ8yllwA?si=G4mczbXyg6gEq3yf
https://www.youtube.com/shorts/8aGh1YzBRaQ



future vs compatible future

https://youtube.com/shorts/MX-EPzY5DHA?si=SczezNoCfnppcb0j

********
Completablefuture in java

https://www.youtube.com/watch?v=JoYFkYqE8S0

https://youtube.com/shorts/ewZXBJCev_M?si=Wy1Z4IZQoq6I89eu
https://www.youtube.com/shorts/duDx_ZMpcOY
*************
Arrays.asList

https://www.youtube.com/shorts/fICpWZbCDX8

******
@Target Annotatation
https://youtube.com/shorts/aIHysrmQHZg?si=UQioMZgWw-5InPF3
******


public class MyService{
  
  public MyService(){
  }
  public void init(){
  }
  public void cleanUp(){
  }
}
*******
@Configuration
public class AppConfig{
  
  @Bean(initMethod="init", destroyMethod="cleanUp")
  public MyService myService(){
     return new MyService();
  }
}
*****************
retry_failed_to_reltio_records

***********************************************
core java
*************************
marker interface
https://youtube.com/shorts/oXlkcpfaZy0?si=nwp_EJQ01aiP0YEh

*************
java 11
https://youtube.com/shorts/sQ_9TSbyFgs?si=BwrFXv08GKbEETYy
******
filter 
https://youtube.com/shorts/qL_ItvIgSwk?si=msiSt0hWQm3ffcvw

***
reduce
https://youtube.com/shorts/Nx6Vfvdb4Ao?si=W1CzOAxP6xsL-pJJ

**********
Streams
https://youtube.com/shorts/VdUomgk1614?si=H69RU5xbQCK6QhPS

*****
limit,sorted,distinct
https://youtube.com/shorts/i9U-Kpzs6OI?si=MRqeinalLKMoJY8X
*******
java 8 question

https://youtube.com/shorts/_qrWqXeq4Eg?si=-lnSyrtMPkrKBqZ8

*****
functional interface

https://youtube.com/shorts/9w6wcMaR368?si=JSKVR8GoSiUV_ucR
********
Sting buffer vs String builder
https://youtube.com/shorts/n4vhfigJW1U?si=TzETtVjcfLglJV1y

*****************
skip,findfirst
https://youtube.com/shorts/pIVaDhNnITY?si=knhk8_bRW3h72JpH

*********
String is a panagram or not
https://youtube.com/shorts/PqLN8O7Dlx4?si=V4GAJ_t5X4qjSQ2e

***************
count 1s in the list

https://youtube.com/shorts/KL-gN4oBkgU?si=MUw0S6wmvR__fTiM

****
enum
https://youtube.com/shorts/C8EAtYtwjQg?si=6ePKhWC0Ac3yjO3j
***
https://youtube.com/shorts/i2wldd5KyxY?si=wGYYecD23DVZfrPF
***
compare two enum
https://youtube.com/shorts/2rJ2i3oRA-Y?si=Zx73CmtqbwI0cTo2
*****
autoboxing 
https://youtube.com/shorts/hbLgws0O9cs?si=Nw7DsQNgjJG9I9KU
*******
can we overload main method
https://youtube.com/shorts/-A-ns-3V55M?si=po0d70XE2nwAY_AW
*******
String template -java 21
https://youtube.com/shorts/RBzIjcXKzSE?si=hBFxKK7Gy0dAA1Rx
******
Sequence of access modifier does not matter in java
main method 
https://youtube.com/shorts/fMmgS4cpYvQ?si=__fRVfUAbwwhiLQS

***********
String joiner
https://youtube.com/shorts/R-qeaalGjdI?si=A71fRosCp8Hs-7ZW
*********
Retention policy
https://youtube.com/shorts/-tHLu3M04w0?si=URj8Ffid9EC6PEXD

******
Scheduled annotation
https://youtube.com/shorts/IrEHU4msM3g?si=keDXfAf-2c8sx7h5
*******
initial capacity in list
https://youtube.com/shorts/Zsqtl4056ew?si=qTOaQFhU05Tw__SO
******
switch to jetty in spring boot
https://youtube.com/shorts/9IRc0ihnPCA?si=x7XTWVuYt_t2qwoP
****
@component vs @Bean
https://youtube.com/shorts/atYaw5Vbj_0?si=D9LrGAtm7SYhO31d

*******
pagination
https://youtube.com/shorts/9VXA4NF-J4E?si=ZXQLOCtScfOIfJUN

********************
spring data jpa repository new feature
https://www.youtube.com/shorts/vNMrCe2WP7E

********
Retryable annotation
https://youtube.com/shorts/e3cGzhRpSZ8?si=WS4I-nzcoxdwlYDW
***********
Recover annotation
https://youtube.com/shorts/x539D1bENsw?si=SrGxEBgduUKg9Qfn
******
hascode method

https://youtube.com/shorts/h717BjFSFLk?si=8vGvt0duxk-78byC

*****
interceptor
https://youtube.com/shorts/D6uR1LdpPe4?si=TfQO_apcrUwgVpG8

***************
handler ineceptor

https://youtube.com/shorts/F-4QRGmsy8g?si=02w4gA7BuzDpqMI8
******
implememnt interceptor
https://youtube.com/shorts/r_OvtNu75gg?si=l8mz2XFgaBmjg2ol

***************
Resilense4j
https://youtube.com/shorts/bKZ6kJcYSgo?si=ATxTrOMIHS4mzi2Z
**********
circuit breaker
https://youtube.com/shorts/92Z8DQsYyN8?si=35mMOXkztgh4oZxi

********
circuit breaker in resilence4J
https://youtube.com/shorts/oKp2xApq_iw?si=Vb3atOuninwnymmR

********
Retry in resilence4J
https://youtube.com/shorts/-YZL2eFmMRg?si=mnW2A9mZsS4GkS1j
******
Rate limiter
https://youtube.com/shorts/G1T5RRbp4I4?si=htuIYx7dfct4z9DO

********
time limiter

https://youtube.com/shorts/v_tR4wAavtc?si=Mkr7hpT69xw1svev
***********

Scheduling
https://youtube.com/shorts/Y0qILDVr_ws?si=mPIXNXzH4Cm8D47T

fixed rate scheduling
https://youtube.com/shorts/jz3pyNq-p_U?si=sKJHYaSLFcnNrUpk
**************

fixed delay
https://youtube.com/shorts/PS6dugDgjj8?si=4mq3hZEsF-wzxGgM
***
fixed rate vs fixed delay
https://youtube.com/shorts/x2AlggcmpzE?si=ithwL7znbxhWaJUx

*******
initial delay
https://youtube.com/shorts/_v2UtQWOBlU?si=UvBxvR1qf3osenHI

****
dynamic scheduling

https://youtube.com/shorts/6JbY_m8yJQ0?si=YyEldeLfXEsAMOh8

**********************
whaat happen when we load url from bowser
https://youtube.com/shorts/Q4ld8Hrt6FY?si=-8Wcjy-fKWULxLad
********
limit no of bean
https://youtube.com/shorts/mwEDqv0ALYw?si=wimGpt968PLZOktC

************
Transaction rollback

https://youtube.com/shorts/R22hFpwOk_g?si=p9vZV4VPbmoW-D68

******************
ci-cd


https://youtube.com/shorts/jQ9PdaCgPO4?si=Eeyj6pAfeg9mxuve
*****
jpa architecture
https://youtube.com/shorts/hn8KqGs9XDU?si=zDVBbpIWpMCOAgE4

*****
slf4j
https://youtube.com/shorts/-0KZiYJ7O5M?si=c7CakpEnApHSc9e3
******
map vs linkedhashmap vs treemap
https://youtube.com/shorts/qcgDxoLlsYc?si=6jA5K4v4b-64gLRk
*******
custom annotaion
https://youtube.com/shorts/RyZ3bSrkl_E?si=MidbIkPmWZlPmFyt

*********
yield keyword
https://youtube.com/shorts/5rHGcWu5N1E?si=waVykMAWwThjyaE4
*********
try with resource
https://youtube.com/shorts/aV2dPJkaYh8?si=2_ZVCm_gctNPs3mi
*****

singleton class
https://youtube.com/shorts/EGI4Zkpx0x0?si=QAtDK-wbzLKLY_xa

\************
send email from spring boot app

https://youtube.com/shorts/dDNPe6vOZ4Q?si=Z3ahmkrHE1lLHm5b

*****
REST Template 
https://youtube.com/shorts/kctiStt3Qjs?si=VvFwrZNh86sSf8xY
******
interceptor vs filter
https://youtube.com/shorts/EiyX7aLqQ3M?si=QIzM29mIXP4hVhIT
**********
first non repeating character in an array

https://youtube.com/shorts/4teL2-VxLO0?si=u4PsUIDm7J2crubW
******
immutable class

https://youtube.com/shorts/zeMsNeyNJYc?si=5G577eg45_MvT8YI

**********

@Profile

https://youtube.com/shorts/SkBCsTVtqO4?si=t41zQcoiugVvE1cJ

***************************\
spring profile

https://youtube.com/shorts/WpAAb7II6wQ?si=ntA4yEQ2d9WbcTjC
*****
@RequestBody
https://youtube.com/shorts/LjJj8pgSncc?si=EOYSWvph0gDIy-_M
*******
@Configuration
https://youtube.com/shorts/sMMNMZiEwyI?si=Slh3itnDjOMutx7p
***
spring transaction 
https://youtube.com/shorts/ldsEoxDwodA?si=DODRDwli9djPZUg8
*****
@Predestroy 
https://youtube.com/shorts/0Q-hI-0Kzqk?si=dX-w42MX7qqAvi9A
*******
dependency injection
https://youtube.com/shorts/MLDf-4kkpHA?si=94Y5tg4HsA8J29pa

********
h2 database
https://youtube.com/shorts/L121aP2iUVM?si=Bdd4_0M0-6bc9FQK

*********************
actutator

https://youtube.com/shorts/pDcVUhiczO4?si=5zDj4bI599KqfP9n

******
internal working of hashset
https://youtube.com/shorts/FKXzzZrPav0?si=qWsLZ5VzWotgduXD
******
spring cloud config
https://youtube.com/shorts/tnp01jmoHy8?si=MANQLAVEjVIcBMdA
*******

