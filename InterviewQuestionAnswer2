
Equals method has hashcode | 
overloaded method 
hashcode
***********************de**************************
Create a custom immutable class.
**********
To create a custom immutable class in Java, you need to ensure that the state of the class cannot be modified after the object is created.
*******
Mark the class as final to prevent subclassing.
Make all fields private and final, ensuring they are initialized only once.
Provide a constructor that sets all the fields.
Do not provide setters (no methods to modify the state).
If the class contains mutable fields, ensure they are properly handled (e.g., using defensive copies).
public final class ImmutablePerson {

    private final String name;
    private final int age;
    private final Address address; 
 public ImmutablePerson(String name, int age, Address address) {
        this.name = name;
        this.age = age;
        this.address = new Address(address.getStreet(), address.getCity());
    }

    // Getter methods to access the fields
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public Address getAddress() {
        // Return a defensive copy of the mutable field to prevent modification
        return new Address(address.getStreet(), address.getCity());
    }

  public static class Address {
        private final String street;
        private final String city;

        public Address(String street, String city) {
            this.street = street;
            this.city = city;
        }

        public String getStreet() {
            return street;
        }

        public String getCity() {
            return city;
        }
    }
}

*******************************************************************************************************************************************************************
Serialization, deserialization, and externalization.

Java provides a built-in mechanism for serialization by implementing the java.io.Serializable interface.
When an object is serialized, all of its instance variables and references are converted into bytes.
Fields marked as transient are not serialized.
The class must have a unique serialVersionUID (automatically generated if not provided). This helps during deserialization to verify that the same class (or compatible version) is used.
Java uses ObjectInputStream to read the serialized byte stream and converts it back into the original object.
The class being deserialized must have the same serialVersionUID as when it was serialized,
*******************
Deserilization:_
the process of reconstructing an object from its byte stream back into a fully functional Java object.
Java uses ObjectInputStream to read the serialized byte stream and converts it back into the original object.

**************************************************
 Externalization:_Externalization is a more advanced version of serialization where the developer has control over what to serialize and how to serialize it.
the class must implement the java.io.Externalizable interface, which requires you to override two methods:
writeExternal(ObjectOutput out): Controls how the object is written to the output stream.
readExternal(ObjectInput in): Controls how the object is reconstructed from the input stream.
import java.io.*;
class Car implements Externalizable {
    static int age;
    String name;
    int year;

    public Car()
    {
        System.out.println("Default Constructor called");
    }

    Car(String n, int y)
    {
        this.name = n;
        this.year = y;
        age = 10;
    }

    @Override
    public void writeExternal(ObjectOutput out)
        throws IOException
    {
        out.writeObject(name);
        out.writeInt(age);
        out.writeInt(year);
    }

    @Override
    public void readExternal(ObjectInput in)
        throws IOException, ClassNotFoundException
    {
        name = (String)in.readObject();
        year = in.readInt();
        age = in.readInt();
    }

    @Override public String toString()
    {
        return ("Name: " + name + "\n"
                + "Year: " + year + "\n"
                + "Age: " + age);
    }
}

public class ExternExample {
    public static void main(String[] args)
    {
        Car car = new Car("Shubham", 1995);
        Car newcar = null;

        // Serialize the car
        try {
            FileOutputStream fo
                = new FileOutputStream("gfg.txt");
            ObjectOutputStream so
                = new ObjectOutputStream(fo);
            so.writeObject(car);
            so.flush();
        }
        catch (Exception e) {
            System.out.println(e);
        }

        // Deserialization the car
        try {
            FileInputStream fi
                = new FileInputStream("gfg.txt");
            ObjectInputStream si
                = new ObjectInputStream(fi);
            newcar = (Car)si.readObject();
        }
        catch (Exception e) {
            System.out.println(e);
        }

*******************
The serialVersionUID is a unique identifier in Java used during the serialization and deserialization process to ensure that a serialized object
 corresponds exactly to the class definition used to deserialize it.
When an object is serialized, the serialVersionUID of the class is saved with the object's byte stream
*****************************************************************************
generics and wildcards:-
generics and wildcards are used to define collections that can hold elements of specific or any type.
Generics  helps catch type mismatches during compilation.
Wildcards
A wildcard is a special type argument that can be used in place of a type parameter in a generic class or method. The wildcard is represented by the “?” symbol.
*****************************************************************
Generics allow you to define a class or a method that can work with any type, without specifying a particular class until you use it.
public class Box<T> {
    private T item;

    public void set(T item) {
        this.item = item;
    }

    public T get() {
        return this.item;
    }
}
Box<Integer> integerBox = new Box<>();
integerBox.set(10);
Integer value = integerBox.get();  // Value is safely cast to Integer.

Box<String> stringBox = new Box<>();
stringBox.set("Hello");
String str = stringBox.get();  // Safely cast to String.

*********************************
Types of wild card
Unbounded Wildcard (<?>):
public void printBox(Box<?> box) {
    System.out.println(box.get());  // You can call methods that don't depend on the type.
}
****
Upper Bounded Wildcard:-) is used when you need to get data from a generic structure.

public void addToBox(Box<? extends Number> box) {
    Number number = box.get();  // Safely retrieves a Number or its subclass (e.g., Integer, Double).
}
**************
Lower Bounded Wildcard (<? super T>):) is used when you need to put data into a generic structure.

public void addNumber(Box<? super Integer> box) {
    box.set(100);  // Can add an Integer or any of its subclasses.
}
************************************************************************************************************************
how the string object are store in memory in java?
string objects are stored in the heap memory. 
When you create a string literal (using double quotes), Java first checks if an identical string already exists in the String Pool, a special area within the heap.
If the string exists, a reference to that existing string is returned, saving memory.
If the string doesn't exist, a new string object is created in the String Pool, and a reference to it is returned.

String str1 = "Hello";
String str2 = "Hello";

// str1 and str2 will refer to the same object in the String Pool

String str1 = new String("Hello");
String str2 = new String("Hello");

// str1 and str2 are two different objects in the heap
********************************************************************************************************************
toString() is the built-in method of java.lang which return itself a string.
 Since toString() method simply returns the current string without any changes, there is no need to call the string explicitly, it is usually called implicitly.
public class Geeks { 
  
    public static void main(String args[]) 
    { 
        String Strobj = new String("Welcome to the world of geeks."); 
        System.out.print("Output String Value :"); 
        System.out.println(Strobj.toString()); 
  
        String Strobj2 = new String("Let's make it simple for you."); 
        System.out.print("Output String Value :"); 
        System.out.println(Strobj2.toString()); 
    } 
} 
************************************************************************************************************************************
If a class does not extend any other class then it is a direct child class of Object
 toString() method to get the string representation of an object
The toString() method is present in the Object class. Since every class in Java implicitly extends the Object class (except Object itself), all classes inherit the toString() method by default.
The Object class is part of the java.lang package.
toString() in the Object class provides the default implementation.

 @Override
    public String toString() {
        return "Best_Friend{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", college='" + college + '\'' +
                ", course='" + course + '\'' +
                ", address='" + address + '\'' +
                '}';
    }
**********************************************************************************************************************************************
PUT VS PATCH
Spring Boot, PUT and PATCH are both HTTP methods used to update resources, but they differ in how they handle the update process
Purpose: PUT is used to replace an entire resource with the new data provided in the request.

Purpose: PATCH is used to partially update a resource. Only the fields provided in the request are updated, and the rest of the resource remains unchanged.
Use Case	Complete replacement of a resource	Partial updates to a resource

*********************
Using POST for an update operation is not RESTful and goes against standard HTTP semantics
Yes, you can technically perform a GET operation using a POST request, but it is not recommended because it violates HTTP semantics
**********************************
2. What are the Spring Boot key components?
key components
1️⃣ Spring Boot Starter
spring-boot-starter-web → For building web applications.
spring-boot-starter-data-jpa → For working with JPA & Hibernate.
spring-boot-starter-security → For authentication & authorization.

 Spring Boot Auto-Configuration
Automatically configures Spring Beans based on the dependencies present in the classpath

Spring Boot Embedded Server
Spring Boot includes an embedded web server, eliminating the need to deploy a WAR file.
Default: Tomcat (can be replaced with Jetty or Undertow).

Spring Boot Profiles
Supports multiple environments (e.g., dev, prod)

Spring Boot Logging
Uses SLF4J with Logback by default

🔟 Spring Boot Testing
Supports JUnit, Mockito, and Spring Boot Test.

Built-in support for Microservices

Comes with Spring Boot Actuator for monitoring
✅ Less Code, Less Configuration

**************************************************************************
How Spring Boot Works

Every Spring Boot app starts with the main() method containing SpringApplication.run().
This method initializes the Spring Boot framework, scans for beans, and sets up the application.
@SpringBootApplication enables component scanning, auto-configuration, and Spring Boot configurations.
Spring Boot scans packages for @Component, @Service, @Repository, etc.

***********
✅ Initializes with SpringApplication.run()
✅ Auto-configures dependencies (No XML, No manual setup)
✅ Starts an embedded server (Tomcat by default)
✅ Manages beans with Dependency Injection
✅ Provides pre-configured Starters (Web, JPA, Security, etc.)
✅ Includes Actuator for monitoring & health checks
*********************************************************************************************
Summary of Key Spring Boot CLI Commands
Command	Description
spring --version	  Check Spring Boot version
spring init myapp	  Create a new Spring Boot project
spring run app.groovy Run a Spring Boot Groovy script
mvn spring-boot:run	  Run a Spring Boot Java application
spring init --list	  List available dependencies
mvn clean package	  Package the app as a JAR
java -jar myapp.jar	  Run an executable JAR
mvn spring-boot:run -Ddebug	Enable debug mode
**********************************************************************
Spring Boot CLI (Command Line Interface) is a powerful tool that allows you to run Spring Boot applications without needing an IDE
*********
Spring Initializr is a web-based tool that helps developers quickly generate Spring Boot project templates with the required dependencies
*****************************************************************************************************

15. Can we create a non-web application in Spring Boot?
Yes, you can create a non-web application in Spring Boot! While Spring Boot is widely used for building web applications, it can also be used to develop console-based, batch processing, or background task applications
