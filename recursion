print all permutation of string or array
*******************
class Solution{
public void permute(int[]nums,List<Integer> ds,List<List<Integer>>ans,boolean[] freq){
          if(ds.size()==nums.length()){
              ans.add(new ArrayList<>(ans));
               return;
            }
    for(int i=0;i<nums.length;i++){
      if(!freq[i]){
          freq[i]=true;
        ds.add(nums[i]);
        permute(nums,ds,ans,freq);
        ds.remove(ds.size()-1);
        freq[i]=false;
        }
      }
            
  }
  public List<List<Integer>> permute(int[] ans){
    List<List<Integer>>ans=new ArrayList<>();
    List<Integer> ds=new ArrayList<>();
    boolean[] freq=new boolean[nums.length];
    permute(nums,ds,ans,freq);
    return ans;
    }
  }
**********************************************************************************************************
Power Set: Print all the possible subsequences of the String
Problem Statement: Given a string, find all the possible subsequences of the string.
Example 1:
Input: str = "abc"
Output: a ab abc ac b bc c
Explanation: Printing all the 7 subsequence for the string "abc".

import java.util.*;
class TUF{
static void solve(int i, String s, String f) {
	if (i == s.length()) {
		System.out.print(f+" ");
		return;
	}
	//picking 
	//f = f + s.charAt(i);
	solve(i + 1, s,  f+s.charAt(i));
	//poping out while backtracking
	//f.pop_back();
	solve(i + 1, s,  f);
}
public static void main(String args[]) {
	String s = "abc";
	String f = "";
	System.out.println("All possible subsequences are: ");
	solve(0, s, f);
}
}
*****************************************************************************************************************************************************************
Problem Statement: 
Given an array of distinct integers and a target, you have to return the list of all unique combinations where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from the given array an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.
It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.


import java.io.*;
import java.util.*;
class Solution {

    private void findCombinations(int ind, int[] arr, int target, List < List < Integer >> ans, List < Integer > ds) {
        if (ind == arr.length) {
            if (target == 0) {
                ans.add(new ArrayList < > (ds));
            }
            return;
        }

        if (arr[ind] <= target) {
            ds.add(arr[ind]);
            findCombinations(ind, arr, target - arr[ind], ans, ds);
            ds.remove(ds.size() - 1);
        }
        findCombinations(ind + 1, arr, target, ans, ds);
    }
    public List < List < Integer >> combinationSum(int[] candidates, int target) {
        List < List < Integer >> ans = new ArrayList < > ();
        findCombinations(0, candidates, target, ans, new ArrayList < > ());
        return ans;
    }
}
public class Main {
    public static void main(String[] args) {
        int arr[] = {2,3,6,7};
        int target = 7;
        Solution sol = new Solution();
        List < List < Integer >> ls = sol.combinationSum(arr, target);
        System.out.println("Combinations are: ");
        for (int i = 0; i < ls.size(); i++) {
            for (int j = 0; j < ls.get(i).size(); j++) {
                System.out.print(ls.get(i).get(j) + " ");
            }
            System.out.println();
        }
    }
}
*****************************************************************************************************************************
Combination Sum II - Find all unique combinations
In this article we will solve the most asked interview question "Combination Sum II - Find all unique combinations".
Problem Statement: Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

class Solution{
   public void findCombination(int ind,int[] arr, int target,List<List<Integer>> ans,List<Integer> ds){
          if(target==0){
           ans.add(new ArrayList<>(ds)):
          return;
          }
       for(int i=ind;i<arr.length;i++){
         if(i>ind && arr[i]==arr[i-1]) continue;
         if(arr[i]>target){
            break;
           }
        ds.add(arr[i]);
     findCombination(ind+1,arr,target-arr[i],ans,ds);
       ds.remove(ds.size()-1);
}
public List<List<Integer>> findUniqueSum(int[] candidate, int target){
List<List<Integer>> ans=new ArrayList<>();
Arrays.sort(candidate);
findCombination(0,candidate,target,ans,new ArrayList<>());
return ans;
}
}

}
