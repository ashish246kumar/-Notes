observable are used to perform asynchronous operation and handle asynchronous data.
in asynchronous task all the task are executed parallely.
observable  emit multiple value ver a period of time.while promise emit a single value at a time.
observable are lazy and they are not executed untill we subscribe them using subscribe method.
promises are not lazy
Reference example
https://medium.com/@lquocnam/a-comprehensive-guide-to-angular-observables-bde5542346fc

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DataService {
  private apiUrl = '<https://jsonplaceholder.typicode.com/posts>';
  constructor(private http: HttpClient) {}
  getPosts(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl);
  }
}

import { Component } from '@angular/core';
import { DataService } from './data.service';

@Component({
  selector: 'app-root',
  template: `
    <h1>Posts</h1>
    <ul>
      <li *ngFor="let post of posts">{{ post.title }}</li>
    </ul>
  `
})
export class AppComponent {
  posts: any[];
  constructor(private dataService: DataService) {}
  ngOnInit() {
    this.dataService.getPosts().subscribe(
      data => this.posts = data,
      error => console.error(error),
      () => console.log('Posts loaded')
    );
  }
}
**********************
Rxjs(Reactive extension for javascript)-javascript libraary-allow us to work with asynchronous data stream  with the help of observable.
*****************
way to implement observable
import observable from rxjs library
create obserable and emit data
finally subscribe the data
********************************
httpclient is builtin Service class in angular
@angular/common/http package
perform http request
*********************
typescript is superset of javascript.__>has object oriented feature-detect error at compile time-strongly typed 
****************
type annotation is assigning a variable or object a type which will show the compile time error if we try to assign the variable a different type.
let i:number

when the value is of type any then no type chcking is done by compiler.
enum allow us to define a set of name constant
enum Direction {
  Up = 1,
  Down,
  Left,
  Right
}

console.log(Direction.Down); // Output: 2
**********************
arrow function are shorthand syntax for defining the anynmyous function.
let y=(a,b)=>a*b
******************************
Angular decorator store metadata about class, method or property-represented as a  "@"
meta data is data that provide information about data
************
types of decrator-
class decorator-@NgModule @Pipe @Component
property-@Input, @Output,@Contentchild
Method decrator-@HostListner
Parameter decrator-@Inject @Host
**************************
pipes are the simple function which accept an input value and return traformed value
Angular pipe->built in pipe(lower case, upper case, date) and custom pipe
the chaning pipe use multiple pipe on data input.{{dob|date|uppercase}}
*****************
directives are classes that add adtional behaviour to element in your angular application.
type of directive
strctural->*ngIf,*ngFor,*ngSwitch(it change the apperance of dom by adding or removing element)
Attribute->[ngClass],[ngStyle](changes the apperance or behaviour of element)

component-(directive with own template)

*****************************
*ngIf-used to add or remove item based on the condition
[ngStyle] it is an attribute directive that update the style for an html element
<div [ngClass]="['first', 'second']">
[ngClass] add and remove css classes on html element

@Component({
  selector: 'app-example',
  templateUrl: './example.component.html',
  styleUrls: ['./example.component.css']
})
it is reponsible for showing the first whole view.it is the most used ones
**************************
lifecycle hook-a component from creation to destruction goes through several stages known as life cycle hook.
component instantiating
rendring the component html view
creting the child componet
destroying the component
***************
ngOnchanges->called when input property changes
constructor-not part of the lifecycle hook.default method of the typeScript class that is executed when the class is instantiated
ngOnInit-called when the component is created-called only once during the lifecycle
constrctor is used to inject dependencies(services) into component class
ngOnInit-called after ngOnchanges lifeCycle hook
constructor-called before any lifecycle hook
***************
A service is a typeScript class and reusable code which can be used in multiple component.
A provider is a object declared inside decorator which inform angular that particular service is avilable for inecting inside the component.
********************
Dependency Injection (DI) is a design pattern that helps to create loosely coupled components in Angular applications.
It allows developers to define the dependencies of a component or service at a single place and reuse them across the application.


import { Injectable } from '@angular/core'; 
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
}) 
export class UserService {

  constructor(private _http: HttpClient) { }
  
  getUsers() { 
    return this._http.get('https://jsonplaceholder.typicode.com/users'); 
  }
}
we have created a service called ‘UserService’ which is annotated with ‘@Injectable’ decorator. 
The ‘@Injectable’ decorator tells Angular that this service can be injected into other components or services
*****
we need to register the ‘UserService’ in the AppModule so that it can be injected into our components. 
We can do this by adding the ‘UserService’ to the ‘providers’ array of the AppModule

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { UserComponent } from './user/user.component';
import { UserService } from './services/user.service';

@NgModule({
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule
  ],
  providers: [UserService],
  bootstrap: [AppComponent]
})
export class AppModule { }
***************


 with @Injectale decorator one service can be used by another service
****************************
Static form-validation rules are defined directly in the HTML template using directives such as ngModel, ngForm, and ngSubmit.

******************
<!-- static-form.component.html -->
<form #staticForm="ngForm" (ngSubmit)="onSubmit(staticForm.value)">
  <div class="form-group">
    <label for="name">Name</label>
    <input type="text" id="name" name="name" ngModel required>
  </div>
  <div class="form-group">
    <label for="email">Email</label>
    <input type="email" id="email" name="email" ngModel required email>
  </div>
  <button type="submit" [disabled]="!staticForm.valid">Submit</button>
</form>

// static-form.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-static-form',
  templateUrl: './static-form.component.html'
})
export class StaticFormComponent {
  onSubmit(formData: any) {
    console.log('Static Form Data:', formData);
  }
}
**************************************
Reactive Form Example:
we define the form controls and validation programmatically using TypeScript code.
Reactive forms are preferred for applications with complex form requirements, 

<!-- reactive-form.component.html -->
<form [formGroup]="reactiveForm" (ngSubmit)="onSubmit()">
  <div class="form-group">
    <label for="name">Name</label>
    <input type="text" id="name" formControlName="name">
  </div>
  <div class="form-group">
    <label for="email">Email</label>
    <input type="email" id="email" formControlName="email">
  </div>
  <button type="submit" [disabled]="!reactiveForm.valid">Submit</button>
</form>
// reactive-form.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-reactive-form',
  templateUrl: './reactive-form.component.html'
})
export class ReactiveFormComponent implements OnInit {
  reactiveForm: FormGroup;

  constructor(private formBuilder: FormBuilder) {}

  ngOnInit() {
    this.reactiveForm = this.formBuilder.group({
      name: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]]
    });
  }

  onSubmit() {
    console.log('Reactive Form Data:', this.reactiveForm.value);
  }
}
**************************
import { RouterModule, Routes } from '@angular/router';
const routes: Routes = [
  { path: '', redirectTo: '/home', pathMatch: 'full' },
  { path: 'home', component: HomeComponent },
  { path: 'about', component: AboutComponent },
  // Add more route definitions as needed
];
<router-outlet>  in app.html

*************************
ng generate guard auth

authentication guard is a mechanism used to protect routes in your application.
It ensures that certain routes can only be accessed by authenticated users.

const routes: Routes = [
  { path: 'home', component: HomeComponent, canActivate: [AuthGuard] },]

export class AuthGuard implements CanActivate {

  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): boolean {
    if (this.authService.isAuthenticated()) {
      return true;
    } else {
      this.router.navigate(['/login']); // Redirect to login page if not authenticated
      return false;
    }
  }
}
In this example, we assume you have an AuthService with a method isAuthenticated() that returns a boolean indicating whether the user is authenticated.

Next, you can apply this guard to the routes you want to protect in your app-routing.module.ts file:
************************************
redux- provides a centralized store to manage the entire state of your application. 

Creating the Store
Defining Actions
Implementing Reducers
Creating Selectors
Dispatching Actions
Displaying Data in Components
**************************************
State changes are handled by pure functions called reducers that take the current state and the latest action to compute a new state.
Actions describe unique events that are dispatched from components and services.
State is accessed with the Store, an observable of state and an observer of actions.
*************************************
Do you know JavaScript asynchronous or synchronous?
JavaScript is inherently single-threaded, meaning it executes code in a synchronous, blocking manner by default. However, JavaScript can handle asynchronous operations using several mechanisms. Here's an overview of both synchronous and asynchronous aspects of JavaScript:
Synchronous
synchronous JavaScript, code is executed line-by- na and sach operation must be completed before the et any starts. This can lead to blocking behavior where lang-running task (like a complex calculation or wwerk request) prevents subsequent code from ing until it finishes.
Asynchronous
To handle long-running tasks without blocking the main execution thread. JavaScript uses asynchronous programming techniques. The most common mechanisms for asynchronous operations in JavaScript are:
* Callbacks
* Promises
*****************
why we use async await in javascript
 Non-Blocking Execution
When you use await, JavaScript can execute other code while waiting for the asynchronous operation to complete.
Async and await work with promises
 Avoiding Callback Hell
Traditional asynchronous programming with callbacks can lead to "callback hell," where nested callbacks create deeply indented and hard-to-read code. With async/await, you avoid nesting by writing asynchronous code in a linear, top-to-bottom style.
********
Meaning: A variable that has been declared but not assigned a value is undefined.
*********
null is a kind of value. It is a datatype which tell the specific value of the variable is null.
***********************
 An undeclared variable is one that has not been declared in the scope. Accessing undeclared variables will throw a ReferenceError.
console.log(z); // ReferenceError: z is not defined
*******************************************
rest operator (...) is used in function parameter definitions to handle an indefinite number of arguments
 It allows you to capture all remaining arguments passed to a function in an array.
 The rest operator can be used to capture all extra arguments into a single array parameter.
function sum(...numbers) {
    return numbers.reduce((acc, curr) => acc + curr, 0);
}

console.log(sum(1, 2, 3, 4));  // Output: 10
function multiply(factor, ...numbers) {
    return numbers.map(number => number * factor);
}

function logResults(...results) {
    console.log("Results:", results);
}

const scaledNumbers = multiply(2, 1, 2, 3, 4); 
logResults(...scaledNumbers)

******************************************************************************
Angular was introduced to create Single Page applications. This framework brings structure and consistency to web applications and provides excellent scalability and maintainability.
Angular is an open-source JavaScript framework entirely written in TypeScript. It uses HTML syntax to express your application's components clearly.
**************************************************************
TypeScript
It's a superset of JavaScript, meaning it builds on JavaScript by adding new features and tools while being compatible with standard JavaScript syntax.
**************************************************************************************************************
Data binding is a technique used in web development to synchronize data between the model (application logic) and the view (UI).
Data binding can be one-way or two-way depending on whether updates flow in a single direction or both directions.
One-Way Data Binding:
Interpolation: Uses {{ }} syntax to display data directly in HTML
<p>{{ title }}</p>
Property Binding: Binds a component property to an HTML attribute using [ ] syntax.
<img [src]="imageUrl">
Event Binding: Captures user interactions by binding events (e.g., (click)) to methods in the component
<button (click)="onClick()">Click me</button>

Two-Way Data Binding:
Angular achieves two-way data binding using [(ngModel)], which is a combination of property and event binding.
<input [(ngModel)]="username">
**************************************************************************************************************************
Feature	                  Angular	                          AngularJS

Language	               TypeScript	                     JavaScript
Architecture	      Component-based	                 MVC (Model-View-Controller)
Data Binding	    Two-way data binding, but favors     Primarily two-way data binding
                 one-way by default	
Mobile Support	Mobile-friendly, with tools             Limited mobile support
               for native app development	

Routing       @Route configuration is used to        @routeProvider is used to provide routing information
                define routing information
*************************************************************************************************************
6. What are decorators in Angular? 
Decorators are a design pattern or functions that define how Angular features work. 
decorators are special functions that attach metadata to classes, methods, properties, or parameters.
 Angular supports four types of decorators, they are:
Class Decorators
Property Decorators
Method Decorators
Parameter Decorators
*********************************************************************************************************************************************************
Class Decorators
Class decorators are used to define classes and provide metadata for them.
Common examples:
@Component: Defines an Angular component.
@Directive: Defines an Angular directive.
@NgModule: Defines an Angular module.
@Injectable: Marks a class as injectable, allowing it to be used in dependency injection
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent { }

Property Decorators:-
Property decorators are used to bind properties to input/output data or dependency injection tokens.
@Input: Marks a property as an input property, allowing it to receive values from a parent component.
@Output: Marks a property as an output property, allowing it to emit events to a parent component.
Parameter Decorators
Parameter decorators are used to inject dependencies into a class constructor. They allow Angular to inject specific dependencies into parameters
Common example:
@Inject: Specifies a custom provider for dependency injection in a class constructor.
@Optional: Marks a dependency as optional, meaning Angular will inject null if the dependency is not found

*******************************************************************************************
Advantage of Angular
Two-Way Data Binding
Component-Based Architecture
Dependency Injection (DI)
Strong Community and Ecosystem
Single Page Application (SPA) Capabilities
*******************
Angular Templates are written with HTML that contains Angular-specific elements and attributes
Key Features of Angular Templates
Interpolation
Interpolation allows you to bind component properties to the template.
Directives
Angular templates can use directives to manipulate the DOM
<div *ngIf="isLoggedIn">Welcome back!</div>
<ul>
  <li *ngFor="let item of items">{{ item }}</li>
</ul>
Data Binding
Angular templates support various forms of data binding to synchronize data between the model and the view:
Pipes
Pipes are a way to transform data displayed in templates.


***************************************************************************


