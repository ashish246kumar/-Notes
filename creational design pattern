Creational Design Patterns ka use object creation ko efficient aur flexible banane ke liye kiya jata hai. Ye patterns object creation ko directly new keyword se nahi karte, 
balki ek standard way provide karte hain, jisse code loosely coupled aur maintainable rahe.
**********
   Singleton Pattern ‚Äì "Ek hi object baar-baar use karo"
Is pattern me sirf ek hi instance create hota hai poore application ke liye.
üí° Use Case: Logging, Configuration files, Database connections

********
  Factory Pattern ‚Äì "Object ka factory banao"
Is pattern me object creation ka control factory class ke paas hota hai.
üí° Use Case: Complex object creation, Payment gateways, Notification services
***********
  5Ô∏è‚É£ Prototype Pattern ‚Äì "Object ko copy karo"
Jab object creation expensive ho, toh uska ek clone banaya jata hai.
Isme clone() method ka use hota hai.
üí° Use Case: Game character cloning, Document templates
******
  4Ô∏è‚É£ Builder Pattern ‚Äì "Step by step object banao"
Complex objects ko banane ke liye use hota hai jisme multiple parameters hote hain.
Object creation ko step by step control kar sakte hain.
  üí° Use Case: Pizza Builder, Complex Reports, Immutable Objects


***************
  3Ô∏è‚É£ Abstract Factory Pattern ‚Äì "Factory of Factories"
Is pattern me multiple related objects banane ke liye alag-alag factory classes hoti hain.
Yaha ek super factory hoti hai jo sub-factories ko banati hai.
*************************
    class Product {
    private String part1;
    private String part2;
    private String part3;

    public void setPart1(String part1) {
        this.part1 = part1;
    }

    public void setPart2(String part2) {
        this.part2 = part2;
    }

    public void setPart3(String part3) {
        this.part3 = part3;
    }

    @Override
    public String toString() {
        return "Product [part1=" + part1 + ", part2=" + part2 + ", part3=" + part3 + "]";
    }
}
*******
interface Builder {
    void buildPart1();
    void buildPart2();
    void buildPart3();
    Product getProduct();
}
******
class ConcreteBuilder implements Builder {
    private Product product = new Product();

    @Override
    public void buildPart1() {
        product.setPart1("Part 1");
    }

    @Override
    public void buildPart2() {
        product.setPart2("Part 2");
    }

    @Override
    public void buildPart3() {
        product.setPart3("Part 3");
    }

    @Override
    public Product getProduct() {
        return product;
    }
}
**********
class Director {
    private Builder builder;

    public Director(Builder builder) {
        this.builder = builder;
    }

    public void construct() {
        builder.buildPart1();
        builder.buildPart2();
        builder.buildPart3();
    }
}
*************
public class BuilderPatternDemo {
    public static void main(String[] args) {
        Builder builder = new ConcreteBuilder();
        Director director = new Director(builder);

        director.construct();
        Product product = builder.getProduct();

        System.out.println(product);
    }
}
Product [part1=Part 1, part2=Part 2, part3=Part 3]
*************************
 Product: Yeh woh class hai jise hum build karna chahte hain.

Builder: Yeh ek interface hai jisme product ke har part ko set karne ke methods hote hain.

ConcreteBuilder: Yeh woh class hai jo Builder interface ko implement karti hai aur product ke parts ko set karti hai.

Director: Yeh class builder ka use karke product ko construct karti hai.

Client Code: Yeh woh code hai jo builder pattern ka use karke product ko banata hai.
************************************************************************************************************************************



