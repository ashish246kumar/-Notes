 each microservice is focused on single business capability. Search, Rating & Review and Payment each have their instance (server) and communicate with each other.
Each service is designed to perform a specific business function and can be developed, deployed, and scaled independently of other services.
Advantages:
Scalability: Microservices architecture allows for individual services to be scaled independently based on demand. 
Microservices architecture allows teams to choose the most suitable technologies, programming languages, and frameworks for each service.
Fault isolation, e., a process failure should not bring the whole system down.
Disadvantages:
If you are using Microservice architecture, you need to ready for operations overhead.
Increased Complexity
Microservices always rely on each other. Therefore, they need to communicate with each other.
Name  commonly used tools for Microservices.
Docker: Docker is a popular containerization platform that allows developers to package applications and their dependencies into lightweight, portable containers.
Hystrix is a latency and fault tolerance library.Hystrix implements the Circuit Breaker pattern, which monitors the health of external dependencies. 
If the failure rate exceeds a certain threshold, Hystrix opens the circuit, preventing further requests from being sent to that service.
*************************************************************
In Monolithic Architecture all the software components of an application are clubbed inside a single package.
Microservices are loosely coupled architecture.It mainly focuses on products, not projects.
Monolithic architecture is mostly tightly coupled.It mainly focuses on the whole project.

***************************************************
What is RESTful?
Representational State Transfer (REST)/RESTful web services is an architectural style that helps computer systems to communicate over the internet.
***************************************
How independent micro-services communicate with each other?
It depends upon your project needs. However, in most cases, developers use HTTP/REST with JSON or Binary protocol. However, they can use any communication protocol.
What is the meaning of OAuth?
OAuth means open authorization protocol.  It helps you to share resources stored on one site with another site without the need for their credentials.
Containers are easiest and effective method to manage the microservice based application. It also helps you to develop and deploy individually.
 open-standard authorization protocol 
**************************************************************************
Spring Cloud-->. It provides a set of tools and libraries for building and managing cloud-native applications, addressing common challenges such as service discovery, 
configuration management, load balancing, circuit breaking, and distributed tracing.
*********************************************************************
 What are the biggest challenges in Microservice deployment?
The main challenges from the business point of view:
Microservices require a heavy investment.
It requires a heavy infrastructure setup also.
**********************
Autoscaling->where we automatically and dynamically scale our services to meet the varying levels of demand.
*********************
service registry is a place where all the microservices are registred.
Other microservices or the API Gateway need to know where to send requests. They ask the Service Registry for the location of the microservice they need to communicate with.
Example: Service B needs to talk to Service A. It asks the registry, "Where is Service A?" The registry responds with the location details (IP and port) of Service A.
If multiple instances of a microservice are running (for load balancing and fault tolerance), the Service Registry can provide a list of all available instances.
The requester can then choose one of the instances to send the request to, often using a load balancing algorithm.
*******************************************************
A client (such as a web browser, mobile app, or another system) initiates a request
The client request is first received by an API Gateway. The API Gateway acts as a reverse proxy, handling all incoming requests and routing them to the appropriate microservices.
The API Gateway can also perform other functions such as authentication, authorization, request validation, rate limiting, and logging.
The API Gateway queries a Service Discovery  to find the network location (IP address and port) of the microservice it needs to forward the request to.
The API Gateway forwards the request to the appropriate microservice. Each microservice is responsible for a specific piece of business functionality.
Microservices communicate with each other through lightweight protocols like HTTP/HTTPS or messaging queues like Kafka, RabbitMQ, etc.
The aggregated response is sent back to the API Gateway, which in turn sends the final response back to the client.
**************************************************************
on api gateway-
spring.cloud.config.uri=http://localhost:9196
spring.cloud.gateway.routes[0].id=customer-service
spring.cloud.gateway.routes[0].uri=lb://customer-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/customer/**
@SpringBootApplication
@EnableDiscoveryClient
public class ApiGatewayApplication {
***********************
Api gateway dependency
<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
**************************************************************************************************************
Discovery server
@SpringBootApplication
@EnableEurekaServer
public class DiscoveryServerApplication {}
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
***********************************************************************************
spring.datasource.url=jdbc:mysql://localhost:3306/microservices?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
**************
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
*****************************************
resilience4j.circuitbreaker.instances.customer.registerHealthIndicator=true
#resilience4j.circuitbreaker.instances.customer.eventConsumerBufferSize=10
#resilience4j.circuitbreaker.instances.customer.slidingWindowType=COUNT_BASED
#resilience4j.circuitbreaker.instances.customer.slidingWindowSize=10
#resilience4j.circuitbreaker.instances.customer.failureRateThreshold=50
#resilience4j.circuitbreaker.instances.customer.waitDurationInOpenState=5s
#resilience4j.circuitbreaker.instances.customer.permittedNumberOfCallsInHalfOpenState=3
#resilience4j.circuitbreaker.instances.customer.automaticTransitionFromOpenToHalfOpenEnabled=true
**********************
