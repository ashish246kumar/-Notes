Service Registry:
Jab multiple services hoti hain ek system mein, unko apne locations (URLs, IP addresses) ko track karna padta hai. 
Service Registry ek centralized database ki tarah kaam karta hai jahan sabhi services apne details register karte hain. Matlab, har service apna presence 
aur location (jaise IP address aur port) Service Registry mein register kar deti hai.


Service Discovery:
Service Discovery ka matlab hai ki ek service apni required service ko dynamically find kar sakti hai bina uske fixed IP ya hostname ke. 
Service Registry se service apne required services ki location retrieve kar sakti hai.


Eureka: Yeh ek Service Registry and Discovery tool hai jo Netflix ne develop kiya tha.
Services apne aap ko Eureka server mein register karti hain aur doosri services ko Eureka ke through discover kar sakti hain.

*****************************
Jab koi service start hoti hai, wo apne aap ko Service Registry mein register kar deti hai.
Jab kisi service ko doosri service ki zarurat hoti hai, wo Service Registry se us service ki details fetch kar leti hai.
Agar koi service down ho jati hai, toh Service Registry ko pata chal jata hai aur wo automatically update ho jata hai, taaki koi bhi service outdated information pe rely na kare
**********
Advantage
Scalability: Jab services scale hoti hain, naye instances register hote hain aur purane instances remove ho jaate hain, bina kisi manual intervention ke.
Dynamic Communication: Agar services ka IP ya location change hota hai, toh koi manual configuration ki zarurat nahi hoti. Service Registry automatic update ho jata hai.
********
API Gateway ek bahut hi important component hota hai microservices architecture mein. Yeh ek "single entry point"
ki tarah kaam karta hai jahan se sabhi incoming requests pass hoti hain, aur phir yeh requests ko appropriate microservices tak route karta hai. Iske alawa,
API Gateway kuch aur important tasks bhi perform karta hai, jaise authentication, load balancing, response aggregation, et
*******************
Tools for API Gateway:
Zuul (by Netflix): Netflix ka API Gateway solution hai. Yeh request routing, load balancing, aur security features provide karta hai.
Spring Cloud Gateway: Yeh Spring Boot applications ke liye ek powerful API Gateway hai, jo route requests, authentication, aur other filters handle karta hai
*************
Authentication & Authorization:

API Gateway authentication aur authorization ke tasks bhi perform kar sakta hai. Jab client request bhejta hai, toh API Gateway sabse pehle check karta hai ki user authenticated hai ya nahi.
Agar nahi, toh woh error return kar sakta hai ya client ko login karne ke liye redirect kar sakta hai.
Isse service layer pe security ka burden kam hota hai, aur central location se security manage ki ja sakti hai.
*************
Load Balancing:
API Gateway load balancing bhi kar sakta hai. Maan lijiye, kisi microservice ke multiple instances hain (horizontal scaling). 
Toh API Gateway requests ko in instances ke beech distribute karta hai taaki koi ek instance pe zyada load na ho aur system evenly scale ho.
***********
Rate Limiting and Throttling:
API Gateway request rate limiting aur throttling bhi implement kar sakta hai. Iska matlab hai ki agar kisi client se ek specific time frame mein zyada requests aa rahi hain, 
toh API Gateway unhe limit kar sakta hai, taaki system overload na ho.
*****
Fayde of Using API Gateway:
Centralized Management: Sabhi requests ek hi entry point se handle hote hain, jo management ko easy banata hai.
Security: Authentication aur authorization API Gateway level par handle hoti hai, jo security ko centralized banata hai.
********************************************************
Circuit Breaker ‚Äì System-Wide Failure Ko Kaise Prevent Karta Hai?
Tumhara ek e-commerce system hai jisme:
Order Service
Payment Service
Inventory Service
Order Service ko Payment Service aur Inventory Service se data lena padta hai. Agar Payment Service slow ho ya fail ho jaye, toh Order Service continuously retry karega aur threads block ho sakti hain. 
Poora system slow ho sakta hai ya down ho sakta hai.
******************
Circuit Breaker ek safety mechanism hai jo prevent karta hai system-wide failures ko. Ye kaise kaam karta hai?
Monitor Requests:
Circuit Breaker continuously service requests ko track karta hai.
Agar ek particular service slow ho gayi ya baar-baar fail ho rahi hai, toh Circuit Breaker notice karega.
Cut Off Failing Service (OPEN State):
Jab failures threshold se zyada ho jaye, toh Circuit Breaker us service ke requests ko block kar deta hai.
Iska matlab hai ki jo bhi naye requests us service ke liye aayenge, unko immediately reject kar diya jayega bina backend service ko call kiye.
*******************
Retry Mechanism (HALF-OPEN State):
Thodi der baad, Circuit Breaker check karega ki service wapas theek ho gayi hai ya nahi.
**********
Circuit Breaker States (Modes of Operation)
1Ô∏è‚É£ CLOSED (Normal Operation) ‚úÖ
Service sahi se kaam kar rahi hai
 OPEN (Failure Detected) ‚ùå
Service slow ya fail ho gayi hai.
Circuit Breaker us service ko cut off kar deta hai.
HALF-OPEN (Retry Mode) üîÑ

Thodi der baad Circuit Breaker test requests bhejta hai.
Agar service recover ho gayi, toh Circuit Breaker CLOSED ho j
***********
Resilience4j
Ye lightweight aur modern Circuit Breaker library hai jo Spring Boot ke saath easily integrate hoti hai.
Ye functional programming aur reactive programming ke saath compatible hai.
Features: Circuit Breaking, Rate Limiting, Bulkhead, Retry, Time Limiting
************
@CircuitBreaker(name = "paymentService", fallbackMethod = "fallbackPayment")
<dependency>
    <groupId>io.github.resilience4j</groupId>
    <artifactId>resilience4j-spring-boot2</artifactId>
    <version>1.7.1</version>
</dependency>
*******
Saga Pattern
=> Manages distributed transactions across multiple services via orchestration or choreography.
üîß Tools: Camunda, Temporal. explain in hinEnglish


Jab hum monolithic application use karte hain, toh ek single database hota hai aur transactions easily handle ho jati hain using ACID properties (Atomicity, Consistency, Isolation, Durability).
Lekin microservices architecture me distributed transactions ka issue aata hai kyunki har service apna alag database maintain karti hai.
 Problem:
Agar ek transaction multiple microservices me involve ho, toh agar ek service fail ho jaye, toh baaki services me changes rollback kaise hoga?

üí° Solution: Saga Pattern
Saga ek asynchronous transaction management pattern hai jo distributed transactions ko handle karta hai do tarike se:
1Ô∏è‚É£ Choreography-based Saga
2Ô∏è‚É£ Orchestration-based Saga
*****
1Ô∏è‚É£ Choreography-based Saga (Event-Driven Approach)
Kaise Kaam Karta Hai?
Choreography me koi central coordinator nahi hota. Har service apne events emit karti hai aur doosri services uss event ko listen karke apna operation perform karti hain.
Agar koi service fail ho jaye, toh compensating events fire hote hain taaki previous operations rollback ho sake.

üëâ Example: E-commerce Order Processing

Order Service ‚Üí Order Create karta hai aur OrderCreated Event emit karta hai.
Payment Service ‚Üí OrderCreated event sunta hai aur payment process karta hai. Agar payment successful ho, toh PaymentSuccess Event emit karta hai.
Inventory Service ‚Üí PaymentSuccess event sunta hai aur inventory update karta hai.
Shipping Service ‚Üí Inventory update hone ke baad order ship karta hai.
üõë Agar koi step fail hota hai:

Suppose Payment Fail ho gaya, toh Payment Service ek PaymentFailed Event emit karega.
Order Service isko sunke Order ko cancel kar dega.
Agar Inventory Update fail ho jaye, toh ek compensating event generate hoga jo payment refund karega.
üîß Tools for Choreography:

Apache Kafka
RabbitMQ
****************************************************
Orchestration-based Saga (Central Controller Approach)
Kaise Kaam Karta Hai?
Orchestration me ek central Saga Coordinator hota hai jo poori transaction ko manage karta hai. Har service directly Saga Coordinator se communicate karti hai,
jo decide karta hai ki kaunsi service kab execute hogi aur agar koi failure hota hai toh rollback kaise hoga.
**************
xample: Flight Booking System

User Flight Book Karta Hai ‚Üí Saga Orchestrator transaction start karta hai.
Payment Service ‚Üí Saga Coordinator Payment process karta hai.
Seat Booking Service ‚Üí Payment success hone ke baad, Saga Coordinator seat booking request send karta hai.
Notification Service ‚Üí Ticket confirmation send karta hai.
üõë Agar koi step fail hota hai:

Suppose Seat Booking fail ho jaye, toh Saga Coordinator Payment Service ko refund karne ka instruction dega.
******
Choreography Best Hai Jab:
Microservices highly decentralized hain.
System event-driven architecture follow karta hai.
****************************************************************
2. What are the key features of Spring Security?
Spring Security ek powerful authentication aur authorization framework hai jo Spring-based applications ko secure karta hai.

üîπ Authentication (Login/Identity Verify Karna) ‚Äì User valid hai ya nahi?
üîπ Authorization (Access Control) ‚Äì User kya access kar sakta hai?

Authentication ‚Äì User Ka Verification
Authentication ka matlab yeh check karna ki user kaun hai.
Spring Security different authentication methods support karta hai, jaise:
‚úÖ Username & Password Based Login
‚úÖ OAuth2 / Social Login (Google, Facebook)
‚úÖ JWT (JSON Web Token)
‚úÖ LDAP (Lightweight Directory Access Protocol)

 Authorization ‚Äì Kis User Ko Kya Access Milega?
Authorization ka matlab yeh decide karna ki authenticated user kya access kar sakta hai.

üîπ Role-Based Access Control (RBAC) ‚Äì Different users ke alag-alag roles hote hain, jaise:
**********
Spring Security Features
‚úÖ Built-in Login Page ‚Äì Default login form milta hai jo hum customize bhi kar sakte hain.
‚úÖ Password Encoding ‚Äì Secure password storage ke liye BCrypt jaisa hashing algorithm use hota hai.
‚úÖ CSRF Protection ‚Äì Cross-Site Request Forgery se protection milti hai.
‚úÖ OAuth2 & JWT Support ‚Äì Token-based authentication ke liye best solution.
*****************
Spring Security Implementation Example (Basic Authentication)
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
üîπ Step 2: Create Security Configuration Class
@Configuration
@EnableWebSecurity
public class SecurityConfig {
    
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/admin").hasRole("ADMIN")
                .requestMatchers("/user").hasAnyRole("USER", "ADMIN")
                .anyRequest().authenticated()
            )
            .formLogin(withDefaults()); // Default login page use karega
        return http.build();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        UserDetails user = User.withDefaultPasswordEncoder()
            .username("user")
            .password("password")
            .roles("USER")
            .build();
        
        UserDetails admin = User.withDefaultPasswordEncoder()
            .username("admin")
            .password("admin123")
            .roles("ADMIN")
            .build();

        return new InMemoryUserDetailsManager(user, admin);
    }
}
******************
5Ô∏è‚É£ Spring Security with JWT Authentication (Token-Based Login)
Agar tum session-based login se bachna chahte ho aur stateless authentication chahte ho, toh JWT (JSON Web Token) use kar sakte ho.
JWT ke andar user ki details hoti hain, jo har request ke sath bheji jati hai.

‚úÖ JWT ka Flow:
1Ô∏è‚É£ User login karega aur username-password bhejega.
2Ô∏è‚É£ Server JWT generate karke user ko return karega.
3Ô∏è‚É£ Har request ke sath user JWT token bhejega (Authorization Header me).
4Ô∏è‚É£ Server token verify karega aur user ko access dega.
*******************************************************
Spring Security Ke Key Features 

Authentication ka matlab hota hai ye check karna ki user kaun hai.
üîπ Jab koi user application me login karne ki koshish karta hai, toh uska username & password verify kiya jata hai.
*********
Authorization ‚Äì Kis User Ko Kya Access Hai?
Spring Security me tum easily roles & permissions define kar sakte ho, jaise:
.requestMatchers("/admin").hasRole("ADMIN")
.requestMatchers("/user").hasAnyRole("USER", "ADMIN")


*********************
3Ô∏è‚É£ Principal ‚Äì Kaun Login Hai?
üîπ Principal ka matlab hai jo user abhi application me logged-in hai.
üîπ Jab ek user successfully authenticate ho jata hai, toh uska data session me store hota hai.
üîπ Principal se tum current user ka username ya roles access kar sakte ho.

Spring Security me tum principal ko access kar sakte ho:
Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
String username = authentication.getName(); 
************
Protection ‚Äì Security Threats Se Bachav

‚úÖ Cross-Site Scripting (XSS) ‚Äì Malicious scripts ko block karta hai.
‚úÖ SQL Injection ‚Äì Database hacking attempts se bachata hai.
‚úÖ CSRF (Cross-Site Request Forgery) ‚Äì Fake requests ko block karta hai.
**************
 Granted Authority ‚Äì Kis User Ke Pass Kya Permission Hai?
üîπ Granted Authorities wo permissions hain jo kisi user ke pass hoti hain.
üîπ Kisi bhi user ke pass multiple authorities ho sakti hain.
*************
Agar tum current user ke authorities check karna chahte ho, toh:
Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
***********************
Spring Security Me Authentication Configure Karna (Custom Authentication) üöÄ
Agar tum Spring Security me authentication configure karna chahte ho (basic authentication ke bina), toh tumhe khud ka authentication manager create karna padega.
Iske liye hum ek custom class banayenge jo WebSecurityConfigurerAdapter ko extend karegi, aur custom authentication logic define karenge
*************
 Iss class me Spring Security ka configuration likhna hoga.
üîπ @EnableWebSecurity annotation lagana zaroori hai, jo batayega ki ye security configuration class  hai
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
}

********
configure(AuthenticationManagerBuilder) Method Override Karo
üîπ AuthenticationManagerBuilder ka use karke authentication configure karni hoti hai.
üîπ Isme hum user, password, aur roles define karenge.
@Override
protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth.inMemoryAuthentication()
        .withUser("ashish")
        .password("{noop}password") // {noop} ka matlab plain text password hai
        .roles("USER")
        .and()
        .withUser("admin")
        .password("{noop}admin123")
        .roles("ADMIN");
}
***********************************
3Ô∏è‚É£ Authentication Manager Ko Bean Ke Taur Par Define Karo
üîπ Ab hume custom Authentication Manager ko expose karna hoga taaki baaki system use kar sake.
@Bean
@Override
public AuthenticationManager authenticationManagerBean() throws Exception {
    return super.authenticationManagerBean();
}

************************
Spring Security Ka HTTP Configuration Set Karo
üîπ Kaunse URLs secure honge aur kaunse open rahenge, ye define karna zaroori hai.
*************
Spring Security Ka HTTP Configuration Set Karo
üîπ Kaunse URLs secure honge aur kaunse open rahenge, ye define karna zaroori hai
@Override
protected void configure(HttpSecurity http) throws Exception {
    http
        .authorizeRequests()
        .antMatchers("/admin/**").hasRole("ADMIN")  // Admin ke liye access control
        .antMatchers("/user/**").hasAnyRole("USER", "ADMIN") // User aur Admin dono access kar sakte hain
        .antMatchers("/public/**").permitAll()  // Public URL kisi bhi user ke liye open hai
        .and()
        .formLogin();  // Default login form enable kar raha hai
}
****************
Spring Security me authorization configure karne ke liye, hume HTTP security rules define karne hote hain, jo batate hain ki kaunse endpoints kis role wale users access kar sakte hain.
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
}

***************
Spring Security ka latest version 6.1 hai
OAuth2 Enhancements: OAuth2 support ko aur behtar banaya gaya
OAuth2 client ko aur flexible banaya gaya hai, jisse aap asani se multiple OAuth2 providers (jaise Google, Facebook, GitHub) ke saath integrate kar sakte hain.
*******
Improved Password Storage: Password storage mechanisms ko upgrade kiya gaya hai,
Better Integration with Spring Boot: Spring Boot ke saath integration ko aur smooth banaya gaya
New APIs for Customization: Naye APIs introduce kiye gaye hain, jisse developers apne hisab se security features ko customize kar sakte hain
*******
Ab Spring Security zyada secure hashing algorithms (jaise bcrypt, PBKDF2, Argon2) ko default taur par use karta hai.
****************************************************
7. Explain basic authentication in Spring Security.
Basic Authentication ek simple authentication mechanism hai jisme username & password ka use karke HTTP requests secure ki jaati hain
Jab bhi koi client request bhejta hai, to username & password ko Base64 encode karke request ke header me send karta hai.
@Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
            .anyRequest().authenticated() // Har request authenticated honi chahiye
            .and()
            .httpBasic(); // Basic Authentication enable karna
    }

********
CSRF ek security attack hai jisme malicious site user ke authentication session ka unauthorized request bhejne ke liye misuse karti hai. 
Spring Security by default CSRF protection enable karta hai taaki unauthorized requests block ho sakein
**********
CSRF Protection Disable Karna (API ke liye Recommended)
Agar aapki application sirf REST APIs expose karti hai jo session-based authentication nahi use karti (e.g., JWT, OAuth2), to CSRF disable karna safe ho sakta hai kyunki REST APIs me session maintain nahi hota.
üîπ CSRF disable karne ke liye
@Override
protected void configure(HttpSecurity http) throws Exception {
    http
        .authorizeRequests()
        .anyRequest().authenticated()
        .and()
        .csrf().disable(); // CSRF protection disabled
}
****************************************
üîπ CSRF Enable/Disable Kab Karna Chahiye?
Scenario	CSRF Enable	CSRF Disable
Session-based authentication (Login Forms, Thymeleaf, JSP, etc.)	‚úÖ Enable	‚ùå
REST APIs using JWT, OAuth2 (No session management)	‚ùå	‚úÖ Disable
Microservices communication (Internal APIs)	‚ùå	‚úÖ Disable
Public APIs (Token-based auth)	‚ùå	‚úÖ Disable
*************
what is Spring Security Filter Chain?
Jab bhi ek HTTP request aati hai, Spring Security usko directly process nahi karta. Pehle ek filter chain ke through request pass hoti hai,
jo security checks perform karti hai jaise authentication, authorization, CSRF protection, CORS handling
******************
Filter chain ek sequence of filters ka collection hai jo ek ke baad ek execute hote hain, jisme har filter ka ek specific role hota hai. Yeh ensure karta hai ki request valid hai ya nahi.
2Ô∏è‚É£ Filter Chain Kaise Kaam Karta Hai?
Example:
Agar ek user dashboard page (/dashboard) open karta hai, to uski request filter chain ke through jaati hai.
üîπ Client request -> üîπ Filter 1 (CORS) -> üîπ Filter 2 (Authentication) -> üîπ Filter 3 (Authorization) -> üîπ Filter 4 (CSRF) -> üîπ Request Controller tak pahunchti hai
**********
FilterSecurityInterceptor	Authorization rules apply karta hai
SecurityContextPersistenceFilter	User session ka security context maintain karta hai
UsernamePasswordAuthenticationFilter	Username/Password authentication handle karta hai
CsrfFilter	CSRF attacks se protect karta hai
CorsFilter	CORS (Cross-Origin Requests) allow ya block karta hai
***************************
Custom Filter Add Karna
Agar apne custom logic add karna hai, to khud ka filter create kar sakte ho aur usko filter chain me add kar sakte ho.
@Component
public class CustomFilter extends OncePerRequestFilter {
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        System.out.println("Custom Filter Executing...");
        filterChain.doFilter(request, response); // Next filter execute hoga
    }
}
‚úîÔ∏è Isko security configuration me add karne ke liye:


@Override
protected void configure(HttpSecurity http) throws Exception {
    http
        .addFilterBefore(new CustomFilter(), UsernamePasswordAuthenticationFilter.class);
}
******************************************
 Spring Security antMatchers() ‚Äì HinEnglish Explanation
Jab hum Spring Security me kisi URL ko secure ya allow karna chahte hain, tab hum antMatchers() ka use karte hain.

üëâ Yeh decide karta hai ki kaunse URL kis user role ya authority ke liye accessible hain.
üëâ Isme wildcard characters (?, *, **) ka use hota hai taaki flexible URL patterns define kiye jaye
***********
Wildcard Characters in antMatchers()
Wildcard	Explanation	Example
?	Ek single character match karega	/user/ab? -> /user/abc valid, but /user/abcd invalid
*	Koi bhi ek word ya set of characters match karega	/user/* -> /user/profile, /user/settings valid but /user/details/info invalid
**	Multiple directories match karega	/admin/** -> /admin/dashboard, /admin/settings/info sab valid
*********
.hasRole("ROLE")	Sirf specified ROLE wale users ko access dena
.hasAnyRole("ROLE1", "ROLE2")	Multiple ROLEs allow karna
.hasAuthority("PERMISSION")	Sirf specified authority wale users ko access dena
.hasAnyAuthority("PERMISSION1", "PERMISSION2")	Multiple authorities allow karna
.authenticated()	Koi bhi authenticated user access kar sakta hai
********************
Spring Security me logged-in user ka naam fetch karne ke liye Principal interface ka use hota hai.
Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();
String userName = principal.getName();
public String helloGfg(Principal principal, Authentication auth, Model model) {
    // üü¢ Current Logged-in User ka Username
    String userName = principal.getName();
    System.out.println("Current Logged-in User is: " + userName);

    // üü¢ Current Logged-in User ki Roles/Authorities
    Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();
******************************


