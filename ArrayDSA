Q)Given an array arr[], find the first repeating element. The element should occur more than once and the index of its first occurrence should be the smallest.
*************
class Solution {
    // Function to return the position of the first repeating element.
    public static int firstRepeated(int[] arr) {
        // Your code here
        HashMap<Integer,Integer> h=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            h.put(arr[i],h.getOrDefault(arr[i],0)+1);
        }
        for(int i=0;i<arr.length;i++){
            if(h.get(arr[i])>1){
                return (i+1);
            }
        }
        return -1;
    }
}
***********************************************************************************************************************
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.
******
import java.util.*;

public class tUf {
    public static int findAllSubarraysWithGivenSum(int arr[], int k) {
        int n = arr.length; // size of the given array.
        int cnt = 0; // Number of subarrays:

        for (int i = 0 ; i < n; i++) { // starting index i
            int sum = 0;
            for (int j = i; j < n; j++) { // ending index j
                // calculate the sum of subarray [i...j]
                // sum of [i..j-1] + arr[j]
                sum += arr[j];

                // Increase the count if sum == k:
                if (sum == k)
                    cnt++;
            }
        }
        return cnt;
    }

    public static void main(String[] args) {
        int[] arr = {3, 1, 2, 4};
        int k = 6;
        int cnt = findAllSubarraysWithGivenSum(arr, k);
        System.out.println("The number of subarrays is: " + cnt);
    }
}  
*****************************************************************************************************************************************k
You are given an array arr[] of N integers. The task is to find the smallest positive number missing from the array.

Note: Positive number starts from 1.

class Solution {
    public int subarraySum(int[] nums, int k) {
       
        int count=0;
        for(int i=0;i<nums.length;i++){
            int  sum=0;
            for(int j=i;j<nums.length;j++){
                if(j==i && nums[i]==k){
                    count++;
                    sum=nums[j];
                }
                else{
                sum=sum+nums[j];
                 if(sum==k){
                count++;
                  }
                }
              
              
            }
        }
        return count;
    }
}
*****************************************************************************************************************************
You are given an array arr[] of N integers. The task is to find the smallest positive number missing from the array.

class Solution
{
    //Function to find the smallest positive number missing from the array.
    static int missingNumber(int arr[], int size)
    {
       int[]a=new int[arr.length+1];
       Arrays.fill(a,0);
       for(int i=0;i<arr.length;i++){
           if(arr[i]>0&& arr[i]<(a.length)){
               a[arr[i]]=arr[i];   
           }
       }
       int k;
       for( k=1;k<a.length;k++){
           if(a[k]==0){
               return k;
           }
       }
       return k;
    }
}
**************************************************************************************************


