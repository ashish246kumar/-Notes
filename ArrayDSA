PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(Comparator.reverseOrder());-->to store the element in reverse order
while (!priorityQueue.isEmpty()) {
    System.out.println(priorityQueue.poll());
}
**************


Q)Given an array arr[], find the first repeating element. The element should occur more than once and the index of its first occurrence should be the smallest.
*************
class Solution {
    // Function to return the position of the first repeating element.
    public static int firstRepeated(int[] arr) {
        // Your code here
        HashMap<Integer,Integer> h=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            h.put(arr[i],h.getOrDefault(arr[i],0)+1);
        }
        for(int i=0;i<arr.length;i++){
            if(h.get(arr[i])>1){
                return (i+1);
            }
        }
        return -1;
    }
}
***********************************************************************************************************************
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.
******
import java.util.*;

public class tUf {
    public static int findAllSubarraysWithGivenSum(int arr[], int k) {
        int n = arr.length; // size of the given array.
        int cnt = 0; // Number of subarrays:

        for (int i = 0 ; i < n; i++) { // starting index i
            int sum = 0;
            for (int j = i; j < n; j++) { // ending index j
                // calculate the sum of subarray [i...j]
                // sum of [i..j-1] + arr[j]
                sum += arr[j];

                // Increase the count if sum == k:
                if (sum == k)
                    cnt++;
            }
        }
        return cnt;
    }

    public static void main(String[] args) {
        int[] arr = {3, 1, 2, 4};
        int k = 6;
        int cnt = findAllSubarraysWithGivenSum(arr, k);
        System.out.println("The number of subarrays is: " + cnt);
    }
}  
*****************************************************************************************************************************************k


class Solution {
    public int subarraySum(int[] nums, int k) {
       
        int count=0;
        for(int i=0;i<nums.length;i++){
            int  sum=0;
            for(int j=i;j<nums.length;j++){
                if(j==i && nums[i]==k){
                    count++;
                    sum=nums[j];
                }
                else{
                sum=sum+nums[j];
                 if(sum==k){
                count++;
                  }
                }
              
              
            }
        }
        return count;
    }
}
*****************************************************************************************************************************
You are given an array arr[] of N integers. The task is to find the smallest positive number missing from the array.

class Solution
{
    //Function to find the smallest positive number missing from the array.
    static int missingNumber(int arr[], int size)
    {
       int[]a=new int[arr.length+1];
       Arrays.fill(a,0);
       for(int i=0;i<arr.length;i++){
           if(arr[i]>0&& arr[i]<(a.length)){
               a[arr[i]]=arr[i];   
           }
       }
       int k;
       for( k=1;k<a.length;k++){
           if(a[k]==0){
               return k;
           }
       }
       return k;
    }
}
**************************************************************************************************
check if array is sorted and rotated
******
class Solution {
    public boolean check(int[] nums) {
     int count=0;
     for(int i=1;i<nums.length;i++){
        if(nums[i-1]>nums[i]){
            count++;
        }
     }
     if(nums[nums.length-1]>nums[0]){
        count++;
     }
       return count<=1;
    }
}
********************************
Find Second Smallest and Second Largest Element in an array

*****
class Solution {
    public int print2largest(List<Integer> arr) {
        // Code Here
        
        int sl=-1,fl=arr.get(0);
        for(int i=1;i<arr.size();i++){
            if(arr.get(i)>fl){
                sl=fl;
                fl=arr.get(i);
                continue;
            }
            if(sl<arr.get(i)&& arr.get(i)!=fl){
                sl=arr.get(i);
            }
        }
        
            return sl;
      
    }
}
***********************************************************************************************
26. Remove Duplicates from Sorted Array

class Solution {
    public int removeDuplicates(int[] nums) {
        int left=0;
         for(int i=1;i<nums.length;i++){
              if(nums[i-1]!=nums[i]){
                 nums[left]=nums[i-1];
                 left++;
              }
         }
         nums[left]=nums[nums.length-1];
         left++;
         return left;
    }
}
*****************************
Longest Sub-Array with Sum K
*****
class Solution{
    
   
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int A[], int N, int K) {
        int sum=0,max=0;
        HashMap<Integer,Integer> h=new HashMap<>();
        for(int i=0;i<N;i++){
            sum+=A[i];
            if(sum==K){
                max=Math.max(max,i+1);
            }
            int rem=sum-K;
            if(h.containsKey(rem)){
                max=Math.max(max,i-h.get(rem));
            }
             if(!h.containsKey(sum)){
               h.put(sum,i);
             }
        }
        return max;
    }
    
    
}
***********************************************************************************************************
349. Intersection of Two Arrays
*********
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        
      List<Integer> s =Arrays.stream(nums2).boxed().distinct().collect (Collectors.toList());

        ArrayList<Integer> al=new ArrayList<>();
        for(int i=0;i<nums1.length;i++){
            if(s.contains(nums1[i])){
                 al.add(nums1[i]);
                 s.remove((Integer)nums1[i]);
            }

        }
        return al.stream().mapToInt(i->i).toArray();
    }
}
****************************************************************************************************************
Merge two sorted array

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        if(n==0){
            return;
        }
        int temp=0,k=0;
        for(int i=0;i<m;i++){
            if(nums1[i]>nums2[0]){
                temp=nums1[i];
                nums1[i]=nums2[0];
               int j=1;
               while(j<n&& nums2[j]<temp){
                nums2[j-1]=nums2[j];
                j++;
               }
               nums2[j-1]=temp;
            }
        }
        for(int i=m;i<(m+n);i++){
            nums1[i]=nums2[k];
            k++;
        }
        
    }
}
****************************************************
Majority Elements(&gt;N/3 times)
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
**********
 
class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> al=new ArrayList<>();
        HashMap<Integer,Integer> h=new HashMap<>();
        int n=(nums.length/3)+1;
        for(int i=0;i<nums.length;i++){
            h.put(nums[i],h.getOrDefault(nums[i],0)+1);
            if(h.get(nums[i])==n){
                al.add(nums[i]);
            }
            if(al.size()==2){
                break;
            }
        }
        return al;
    }
}
**********************************************************************************************
Maximum Product Subarray in an Array
Given an integer array nums, find a subarraythat has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.
********
 class Solution {
    public int maxProduct(int[] nums) {
      int left=1,right=1,max=Integer.MIN_VALUE;
      for(int i=0;i<nums.length;i++){
           if(left==0){
            left=1;
           }
           if(right==0){
            right=1;
           }
           left=left*nums[i];
           right=right*nums[nums.length-1-i];
           max=Math.max(max,Math.max(left,right));
          
      }
      return max;  
    }
}
**************************************************************************************************************************************************



