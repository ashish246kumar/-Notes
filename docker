docker -v or docker --version->to see the version of the docker
docker run hello-world
docker images
docker.hub-where all the images are stored
cls
docker pull hello-world
docker pull openjdk
docker pull openjdk:18
docker pull python
*****************************************************************************************************
C:\Users\ashis\Downloads\springBootDocker\springBootDocker>docker build -t spring-boot-docker.jar .
this is the path  where dockerFileScript is located                    command to build docker image 
*******************************
C:\Users\ashis\Downloads\springBootDocker\springBootDocker>docker image ls
***************************************************************************************
C:\Users\ashis>docker tag spring-docker.jar ashishhkr14791/spring-docker.jar:v1.0
                              image name        userName/ImageName
*************************************************************************************
C:\Users\ashis>docker push ashishhkr14791/spring-docker.jar:v1.0
to push docker image into docker hub
C:\Users\ashis>docker pull ashishhkr14791/spring-docker.jar:v1.0
C:\Users\ashis>docker run -p 9090:8082 -d ashishhkr14791/spring-docker.jar:v1.0

*************************************************************************************************
C:\Users\ashis\Downloads\springBootDocker\springBootDocker>docker run -p 9090:8082 spring-boot-docker.jar
to run docker image     8082 is the port in the docker file and our application port
***************************************************************************************************
docker search nginx
 docker run -d openjdk----->to run jdk
docker ps->to see which container is runnig
docker run --name jdkContainer -d openjdk-->to run the image in detached mode and giving the name to jdkContainer
docker run --name jdkContainer1 -it -d openjdk
docker exec -it 0510bda0d8b9 jshell-> command is used to execute the Java shell (JShell) within a Docker container with the specified container ID (0510bda0d8b9) 
id we get from docker ps command 
to run mysql
docker run --name mySqlDB -e MYSQL_ROOT_PASSWORD=root -d mysql
docker exec -it mySqlDB bash
 mysql -p
enter passowod-root
docker pull httpd is used to pull the official Apache HTTP Server Docker image from Docker Hub
Once the image is pulled, you can run a container using the following command:
docker run --name my-httpd-container -p 8080:80 -d httpd
 docker stop mySqlDB->to stop container which is runnning
command docker ps -a is used to list all containers, both running and stoppe
If you want to remove all stopped containers, you can combine docker ps -a with docker rm using shell command substitution like this:
docker rm $(docker ps -a -q)
docker restart mySqlDB-to restart mysql container
docker build -t myubuntuimage .---->to build image
docker run --name JavaProject myjavauimage
********************************************************************************************
Letâ€™s assume you built the application and exported the source code to the client but now he is not able to run it on his machine. Probably due to software version mismatch 
or different configurations. And this is where Docker comes to the rescue
We can easily package up our application with the respective requirements and run it anywhere, on any machine with Docker
Configure once and run it on any machine where the configuration part will be then handled with Docker
*********************************************************
container:-
When the dependencies are installed it runs under an isolated environment called containers.
For example, if there are two applications both using Node but with different versions. They can run side by side in an isolated environment without messing with each other.
**
a container is a lightweight, stand-alone, executable package that includes everything needed to run an application: code, runtime, libraries, environment variables, and system tools
***********************************************************************
We can run several virtual machines on a real physical machine using a hypervisor
**********************************************************************************************************************************
Docker uses a client-server architecture. Where a client component talks with the server component 
using a restful API, over UNIX sockets, or a network interface.
***********************************************************************************
docker is installed globaly so no worry about path 
***********************
If your system have different node version and your container have different node version then in this case also it will work perfectly fine.
*********************************************************************
FROM node:latest
     baseImage:version which you want to install
WORKDIR /app
COPY . .
     source , Destination
RUN npm install
EXPOSE 5500
CMD ["node","index.js"]
******
docker build -t basic app .
if you are not giving the port then you will not able to acess the application still when the application is running in the container.
There is a chanses that your application is running on different port inside the container but you are accessing those application on different port outside the container
***************
.dockerignore:-if you want particular file not be included whiie making images of the application then you should include all those file inside .dockerignore file
********************
file inside .dockerignore
node_modules
*.txt-->it will exclude all the file with .txt extension to go to the image
**********
delete image->we can not update image. image  is in read only mode
docker image rm basic-app
*********
if the image is running on the container then it will delete the image forcefully
docker container rm tonny -f--->here tonny is container name
******
if the image is stoped in the container
docker container rm tonny -f
**********
to create image with version
docker build -t basic-app:v2 .
to run the image having version
docker run --name basic-app-container-v2 -p 5500:5500 basic-app:v2
                                   first port is the port in which you want to access  your application. second one is the port in which your application is running


********************************************************************************************
data saved inside the container are temproary
docker run --name basic-container -p 5050:5050 --rm -v <path of the application>:/app basic-app
                                                                          path in the volume
*************************************************************************************************
how container in docker ensure they will  there is no versioning issue come?
Environment Isolation: Each Docker container runs in its own isolated environment, meaning that the application, its dependencies, and specific versions
 are bundled together in the container. This prevents conflicts with other applications or dependencies on the host machine or other containers.

*********************************************************
i want to run my application on linux machine as well as window machine did i need to change the docker ?
***************************************************************************************************************
how we can create the container?
For creating container we need a image. images are nothing but a lueprint for the container. so when we run the image we get a container .
Now the question is how you will create the image for the software
throgh the docker.
What are the layer of image?
there are two type of docker image one is public and one is custom
for running a java application we need jdk. on the top of the  jdk we have our certain layer that we write in Dockerfile.
WORKDIR /app :- what ever the command we are going to write it will executed in /app directory
***************
FROM ubuntu:${VERSION}
ARG VERSION=latest
Versioning: Specify versions of software dependencies to ensure consistent builds.
The ARG instruction in a Dockerfile defines a variable that users can pass at build-time to the Docker build process.
# Specify the base image
FROM python:3.9

# Define an argument with a default value
ARG APP_NAME=myapp
*********************************************************************************************************************************
COPY <source_path> <destination_path>
The COPY instruction in a Dockerfile is used to copy files and directories from the local filesystem (the build context) into the filesystem of the Docker image
# Use a base image
FROM node:14

# Set the working directory
WORKDIR /usr/src/app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./
***************************************
COPY . . :-> IT Will copy from your current working directory to current working directory.
what ever you specify in the entry point those command will get executed when your container will run
*****************************************************************************************************************************************************************

# Use the .NET 6 SDK as the build environment
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build

# Set the working directory for the build stage
WORKDIR /src

# Copy the project file and restore dependencies
COPY ["Demo Application/Demo Application.csproj", "Demo Application/"]
RUN dotnet restore "Demo Application/Demo Application.csproj"

# Copy the rest of the application source code
COPY . .

# Build the application
RUN dotnet build "Demo Application/Demo Application.csproj" -c Release -o /app/build

# Publish the application
FROM build AS publish
RUN dotnet publish "Demo Application/Demo Application.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Use the .NET 6 runtime as the base for the final image
FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final

# Set the working directory for the runtime environment
WORKDIR /app

# Copy the published output from the build stage
COPY --from=publish /app/publish .

# Expose ports 80 and 443
EXPOSE 80
EXPOSE 443

# Specify the command to run the application
ENTRYPOINT ["dotnet", "Demo Application.dll"]
****************************************************************************************************************************
Example file 
# Use the .NET 6 SDK as the build environment
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build

# Set the working directory for the build stage
WORKDIR /src

# Copy the project file and restore dependencies                               |
COPY ["Demo Application/Demo Application.csproj", "Demo Application/"]         |
RUN dotnet restore "Demo Application/Demo Application.csproj"                  |-----> why i specify copy command above and below also?
                                                                                    suppose you have done some changes on the code but not on the dependency . if you have  not  used first copy command then 
# Copy the rest of the application source code                                 |    my application will run  from starting it will build dependency file also again if there is no change in it. so above first copy command
COPY . .                                                                       | will prevent doing the above thing. it will do caching.

# Build the application
RUN dotnet build "Demo Application/Demo Application.csproj" -c Release -o /app/build

# Publish the application
FROM build AS publish
RUN dotnet publish "Demo Application/Demo Application.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Use the .NET 6 runtime as the base for the final image
FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final

# Set the working directory for the runtime environment
WORKDIR /app

# Copy the published output from the build stage
COPY --from=publish /app/publish .

# Expose ports 80 and 443
EXPOSE 80
EXPOSE 443

# Specify the command to run the application
ENTRYPOINT ["dotnet", "Demo Application.dll"]
********************************************************************************************************************************************
Explanation of COPY and Caching
Layering and Caching:
Docker builds images in layers. Each instruction in the Dockerfile creates a new layer. If a layer doesnâ€™t change, Docker can use the cached version of that layer in future builds, which significantly speeds up the build process.
When you run docker build, Docker checks if the current instruction (like COPY or RUN) and its inputs (files being copied or the command being run) have changed since the last build. If nothing has changed, it reuses the cached layer.
Separation of Concerns:

In your example, the first COPY command specifically copies the project file (Demo Application.csproj) to the container. This file typically contains the project dependencies.
The command RUN dotnet restore "Demo Application/Demo Application.csproj" is executed after this copy, which restores the dependencies specified in that project file.
Efficient Rebuilds:

If you only modify the source code (like .cs files), the project file (Demo Application.csproj) and its dependencies havenâ€™t changed. Because of the way Docker handles caching, the build can skip the dotnet restore step (if it is cached), saving time.
If the project file had not been copied separately, any change in the source files would trigger a rebuild of all layers, including RUN dotnet restore, even if the dependencies themselves had not changed. This would slow down the build process unnecessarily.
*****************************************************************************************************************************************************
docker inspect <imageId>
