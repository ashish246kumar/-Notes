creational design patteren control the creation of object
***********************************
----------------Factory design pattern------------
---------------------------------
|            Client             |
---------------------------------
| |
---------------------------------
                  |
                  |
          -----------------
          |   Shape Factory   |
          -----------------
          | 
          -----------------
                  |create object of
         -------------------
         |      shape     |
         -------------------
         | 
         -------------------
                  |
          -----------------
          | circle|Square|Rectangle

          -----------------
          | 
          -----------------
************************************
 Factory Method is one of the best ways to create an object while keeping the object creation logic hidden from the client.
use the Factory Method when:
A class cannot predict the type of objects it needs to create.
By using this pattern, we can make the object creation process more flexible and modular, making it easier to change or add new object types in the future.

*****************************************************************
Database Connection Management:
When an application needs to connect to different types of databases (e.g., MySQL, PostgreSQL, MongoDB),
the Factory Method can create the appropriate database connection objects based on configuration or user input.
It is used when all the object Creation and it bushiness logic we need to kept at one place.
*****************************************************************************************************************
public interface Shape {
   void draw();
}
public class Circle implements Shape {
   @Override
   public void draw() {
      System.out.println("Drawing Circle");
   }
}

public class Square implements Shape {
   @Override
   public void draw() {
      System.out.println("Drawing Square");
   }
}
public class ShapeFactory {
   public static Shape getShape(String shapeType) {
      if (shapeType == null) {
         return null;
      }
      if (shapeType.equalsIgnoreCase("CIRCLE")) {
         return new Circle();
      } else if (shapeType.equalsIgnoreCase("SQUARE")) {
         return new Square();
      }
      return null;
   }
}
public class FactoryPatternDemo {
   public static void main(String[] args) {
      Shape shape1 = ShapeFactory.getShape("CIRCLE");
      shape1.draw();

      Shape shape2 = ShapeFactory.getShape("SQUARE");
      shape2.draw();
   }
}
***************************************************
// Abstract product: DatabaseConnection
abstract class DatabaseConnection {
    abstract void connect();
    // Other common methods for database connections
}

// Concrete products
class MySqlConnection extends DatabaseConnection {
    @Override
    void connect() {
        System.out.println("Connected to MySQL database.");
        // MySQL-specific connection logic
    }
}

class PostgreSqlConnection extends DatabaseConnection {
    @Override
    void connect() {
        System.out.println("Connected to PostgreSQL database.");
        // PostgreSQL-specific connection logic
    }
}

class MongoDbConnection extends DatabaseConnection {
    @Override
    void connect() {
        System.out.println("Connected to MongoDB database.");
        // MongoDB-specific connection logic
    }
}

// Creator: DatabaseConnectionFactory
abstract class DatabaseConnectionFactory {
    abstract DatabaseConnection createConnection();
}

// Concrete creators
class MySqlConnectionFactory extends DatabaseConnectionFactory {
    @Override
    DatabaseConnection createConnection() {
        return new MySqlConnection();
    }
}

class PostgreSqlConnectionFactory extends DatabaseConnectionFactory {
    @Override
    DatabaseConnection createConnection() {
        return new PostgreSqlConnection();
    }
}

class MongoDbConnectionFactory extends DatabaseConnectionFactory {
    @Override
    DatabaseConnection createConnection() {
        return new MongoDbConnection();
    }
}

// Client code
public class Main {
    public static void main(String[] args) {
        DatabaseConnectionFactory factory = new MySqlConnectionFactory();
        DatabaseConnection connection = factory.createConnection();
        connection.connect();
        // Use the connection for MySQL operations

        // Similarly, you can switch to other factories (PostgreSQL, MongoDB) as needed
    }
}
******************************************************
----------------Singleton Design Pattern----------------
Singleton Design Pattern---> ensure that a class has only one instance while allowing global access to that instance.
. Here are the key elements of the Singleton pattern:

Private Constructor: To prevent direct instantiation of multiple instances.
Static Method: Provides access to the single instance.
Static Variable: Holds the single instance.
Database Connections: ensure that thereâ€™s only one connection pool instance throughout your application.
Singleton ensures efficient resource utilization and avoids unnecessary overhead.
*****************************************
Eager 
public class DbConnection{

   private Static DbConncetion conObject=new DbConncetion();
private DbConnection(){
}
public static DbConnection dbGetInstance(){
     return conObject;
}
public class Main{
   public static void main(String[]args){
     DbConncetion conObject= DbConncetion.getInstance();
}
}


}
*****************************
Singleton Lazy

public class SingletonLazy {
    private static SingletonLazy instance;

    private SingletonLazy() {}

    public static SingletonLazy getInstance() {
        if (instance == null) {
            instance = new SingletonLazy();
        }
        return instance;
    }
}
Thread Safety Issue: It is not thread-safe, meaning in a multi-threaded environment, 
multiple threads can simultaneously enter the if (instance == null) block and create multiple instances unintentionally.
*********************************
Singleton Lazy Thread Safe
public class SingletonLazyThreadSafe {
    private static SingletonLazyThreadSafe instance;

    private SingletonLazyThreadSafe() {}

    public static synchronized SingletonLazyThreadSafe getInstance() {
        if (instance == null) {
            instance = new SingletonLazyThreadSafe();
        }
        return instance;
    }

}
**********************
double locking used in the industry
public class DbConnection{
   private static DbConnection conObject;
   private DbConnection(){
   }
  public static DbConnection dbGetInstance(){
     if(conObject==null){
      synchronized(DbConnection.class){
        if(conObject==null){
         conObject=new DbConnection();
}
}

}
return conObject;
}
}
*********************************
----------------  Prototype design pattern----------------
Prototype design pattern in Java.
The concept is to copy an existing object rather than create a new instance from scratch, especially when object creation involves costly operations1.
When to Use the Prototype Pattern:
Use the prototype pattern when:
Object creation is time-consuming and costly.
You have a similar object already existing that can serve as a prototype
******************************************
public abstract class Shape {
    public abstract Shape copy();
    // Other common shape methods...
}
public class DrawingApp {
    public static void main(String[] args) {
        // Create a prototype of a red circle
        Shape circlePrototype = new Circle();
        circlePrototype.setColor("red");

        // Create a new shape (red circle) by cloning the prototype
        Shape redCircle = circlePrototype.copy();
        redCircle.setPosition(100, 200);

        // Draw the red circle
        redCircle.draw();
    }
}
public class DrawingApp {
    public static void main(String[] args) {
        // Create a prototype of a red circle
        Shape circlePrototype = new Circle();
        circlePrototype.setColor("red");

        // Create a new shape (red circle) by cloning the prototype
        Shape redCircle = circlePrototype.copy();
        redCircle.setPosition(100, 200);

        // Draw the red circle
        redCircle.draw();
    }
}
**************************************************
________________________Builder Pattern___________________________
WHEN YOU WANT TO CREATE OBJECT STEP BY STEP
Creational design pattern
it is mostly used in class than contain optional field


public class Employee {

    private String name;
    private String company;
    private boolean hasCar;//optional
    private boolean hasBike;//optional

    private Employee(EmployeeBuilder employeeBuilder) {
        name = employeeBuilder.name;
        company = employeeBuilder.company;
        hasCar = employeeBuilder.hasCar;
        hasBike = employeeBuilder.hasBike;
    }

    public String getName() {
        return name;
    }

    public String getCompany() {
        return company;
    }

    public boolean isHasCar() {
        return hasCar;
    }

    public boolean isHasBike() {
        return hasBike;
    }

    public static class EmployeeBuilder {
        private String name;
        private String company;
        private boolean hasCar;//optional
        private boolean hasBike;//optional

        //constructor for required fields
        public EmployeeBuilder(String name, String company) {
            this.name = name;
            this.company = company;
        }

        //setter methods for optional fields
        public EmployeeBuilder setHasCar(boolean hasCar) {
            this.hasCar = hasCar;
            return this;
        }

        public EmployeeBuilder setHasBike(boolean hasBike) {
            this.hasBike = hasBike;
            return this;
        }

        //Build the Employee object
        public Employee build() {
            return new Employee(this);
        }
    }
}

class TestBuilder {
    public static void main(String[] args) {
        //Building the object of Employee thru the build() method provided in EmployeeBuilder class.
        Employee employee = new Employee.EmployeeBuilder("Vikram", "ABC").setHasBike(false).setHasBike(true).build();
    }
}
***************************************
