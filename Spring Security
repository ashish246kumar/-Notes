https://www.geeksforgeeks.org/spring-security-interview-questions/

*********************************

Spring Security is powerful and custimizable security framework that is used in spring boot application to handle authentication and authorization
******
Authentication:- The process of verifying user identity (userName and Password)
*********
dependency need to add to enable spring security-->spring boot starter security
once the dependency is added spring boot autoconfiguration feature will automatically apply security to the application.
*************
By default spring security uses Http basic authentication
***********
@EnableWebSecurity
This annotations signals spring to enable its webSecurity support. It is used in conjunction with @Configuration.
*********
configure method provide a way to configure how request are secured . It define how request matching should be done and what security action should be applied.
******
A jwt is string that consist of three part separated by dots. 
The header typically consist of two part. the token type(JWT) and the signing algorithm  being used such as SHA256 or RSA
The second part of the token is the payload which contains the claims. claims are the statement about the entity(typically the user)  and the additional data 
Signature:- to create a signature you have to take a encoded header, encoded payload a secret and the algorithm specified in the header and sign that.
************************************************************************
 Spring Security Features
‚úÖ Built-in Login Page ‚Äì Default login form milta hai jo hum customize bhi kar sakte hain.
‚úÖ Password Encoding ‚Äì Secure password storage ke liye BCrypt jaisa hashing algorithm use hota hai.
‚úÖ CSRF Protection ‚Äì Cross-Site Request Forgery se protection milti hai.
‚úÖ OAuth2 & JWT Support ‚Äì Token-based authentication ke liye best solution.
*****************
Spring Security Implementation Example (Basic Authentication)
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
üîπ Step 2: Create Security Configuration Class
@Configuration
@EnableWebSecurity
public class SecurityConfig {
    
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/admin").hasRole("ADMIN")
                .requestMatchers("/user").hasAnyRole("USER", "ADMIN")
                .anyRequest().authenticated()
            )
            .formLogin(withDefaults()); // Default login page use karega
        return http.build();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        UserDetails user = User.withDefaultPasswordEncoder()
            .username("user")
            .password("password")
            .roles("USER")
            .build();
        
        UserDetails admin = User.withDefaultPasswordEncoder()
            .username("admin")
            .password("admin123")
            .roles("ADMIN")
            .build();

        return new InMemoryUserDetailsManager(user, admin);
    }
}
******************
5Ô∏è‚É£ Spring Security with JWT Authentication (Token-Based Login)
Agar tum session-based login se bachna chahte ho aur stateless authentication chahte ho, toh JWT (JSON Web Token) use kar sakte ho.
JWT ke andar user ki details hoti hain, jo har request ke sath bheji jati hai.

‚úÖ JWT ka Flow:
1Ô∏è‚É£ User login karega aur username-password bhejega.
2Ô∏è‚É£ Server JWT generate karke user ko return karega.
3Ô∏è‚É£ Har request ke sath user JWT token bhejega (Authorization Header me).
4Ô∏è‚É£ Server token verify karega aur user ko access dega.
*******************************************************
Spring Security Ke Key Features 

Authentication ka matlab hota hai ye check karna ki user kaun hai.
üîπ Jab koi user application me login karne ki koshish karta hai, toh uska username & password verify kiya jata hai.
*********
Authorization ‚Äì Kis User Ko Kya Access Hai?
Spring Security me tum easily roles & permissions define kar sakte ho, jaise:
.requestMatchers("/admin").hasRole("ADMIN")
.requestMatchers("/user").hasAnyRole("USER", "ADMIN")


*********************
3Ô∏è‚É£ Principal ‚Äì Kaun Login Hai?
üîπ Principal ka matlab hai jo user abhi application me logged-in hai.
üîπ Jab ek user successfully authenticate ho jata hai, toh uska data session me store hota hai.
üîπ Principal se tum current user ka username ya roles access kar sakte ho.

Spring Security me tum principal ko access kar sakte ho:
Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
String username = authentication.getName(); 
************
Protection ‚Äì Security Threats Se Bachav

‚úÖ Cross-Site Scripting (XSS) ‚Äì Malicious scripts ko block karta hai.
‚úÖ SQL Injection ‚Äì Database hacking attempts se bachata hai.
‚úÖ CSRF (Cross-Site Request Forgery) ‚Äì Fake requests ko block karta hai.
**************
 Granted Authority ‚Äì Kis User Ke Pass Kya Permission Hai?
üîπ Granted Authorities wo permissions hain jo kisi user ke pass hoti hain.
üîπ Kisi bhi user ke pass multiple authorities ho sakti hain.
*************
Agar tum current user ke authorities check karna chahte ho, toh:
Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
***********************
Spring Security Me Authentication Configure Karna (Custom Authentication) üöÄ
Agar tum Spring Security me authentication configure karna chahte ho (basic authentication ke bina), toh tumhe khud ka authentication manager create karna padega.
Iske liye hum ek custom class banayenge jo WebSecurityConfigurerAdapter ko extend karegi, aur custom authentication logic define karenge
*************
 Iss class me Spring Security ka configuration likhna hoga.
üîπ @EnableWebSecurity annotation lagana zaroori hai, jo batayega ki ye security configuration class  hai
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
}

********
configure(AuthenticationManagerBuilder) Method Override Karo
üîπ AuthenticationManagerBuilder ka use karke authentication configure karni hoti hai.
üîπ Isme hum user, password, aur roles define karenge.
@Override
protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth.inMemoryAuthentication()
        .withUser("ashish")
        .password("{noop}password") // {noop} ka matlab plain text password hai
        .roles("USER")
        .and()
        .withUser("admin")
        .password("{noop}admin123")
        .roles("ADMIN");
}
***********************************
3Ô∏è‚É£ Authentication Manager Ko Bean Ke Taur Par Define Karo
üîπ Ab hume custom Authentication Manager ko expose karna hoga taaki baaki system use kar sake.
@Bean
@Override
public AuthenticationManager authenticationManagerBean() throws Exception {
    return super.authenticationManagerBean();
}

************************
Spring Security Ka HTTP Configuration Set Karo
üîπ Kaunse URLs secure honge aur kaunse open rahenge, ye define karna zaroori hai.
*************
Spring Security Ka HTTP Configuration Set Karo
üîπ Kaunse URLs secure honge aur kaunse open rahenge, ye define karna zaroori hai
@Override
protected void configure(HttpSecurity http) throws Exception {
    http
        .authorizeRequests()
        .antMatchers("/admin/**").hasRole("ADMIN")  // Admin ke liye access control
        .antMatchers("/user/**").hasAnyRole("USER", "ADMIN") // User aur Admin dono access kar sakte hain
        .antMatchers("/public/**").permitAll()  // Public URL kisi bhi user ke liye open hai
        .and()
        .formLogin();  // Default login form enable kar raha hai
}
****************
Spring Security me authorization configure karne ke liye, hume HTTP security rules define karne hote hain, jo batate hain ki kaunse endpoints kis role wale users access kar sakte hain.
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
}

***************
Spring Security ka latest version 6.1 hai
OAuth2 Enhancements: OAuth2 support ko aur behtar banaya gaya
OAuth2 client ko aur flexible banaya gaya hai, jisse aap asani se multiple OAuth2 providers (jaise Google, Facebook, GitHub) ke saath integrate kar sakte hain.
*******
Improved Password Storage: Password storage mechanisms ko upgrade kiya gaya hai,
Better Integration with Spring Boot: Spring Boot ke saath integration ko aur smooth banaya gaya
New APIs for Customization: Naye APIs introduce kiye gaye hain, jisse developers apne hisab se security features ko customize kar sakte hain
*******
Ab Spring Security zyada secure hashing algorithms (jaise bcrypt, PBKDF2, Argon2) ko default taur par use karta hai.
****************************************************
7. Explain basic authentication in Spring Security.
Basic Authentication ek simple authentication mechanism hai jisme username & password ka use karke HTTP requests secure ki jaati hain
Jab bhi koi client request bhejta hai, to username & password ko Base64 encode karke request ke header me send karta hai.
@Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
            .anyRequest().authenticated() // Har request authenticated honi chahiye
            .and()
            .httpBasic(); // Basic Authentication enable karna
    }

********
CSRF ek security attack hai jisme malicious site user ke authentication session ka unauthorized request bhejne ke liye misuse karti hai. 
Spring Security by default CSRF protection enable karta hai taaki unauthorized requests block ho sakein
**********
CSRF Protection Disable Karna (API ke liye Recommended)
Agar aapki application sirf REST APIs expose karti hai jo session-based authentication nahi use karti (e.g., JWT, OAuth2), to CSRF disable karna safe ho sakta hai kyunki REST APIs me session maintain nahi hota.
üîπ CSRF disable karne ke liye
@Override
protected void configure(HttpSecurity http) throws Exception {
    http
        .authorizeRequests()
        .anyRequest().authenticated()
        .and()
        .csrf().disable(); // CSRF protection disabled
}
****************************************
üîπ CSRF Enable/Disable Kab Karna Chahiye?
Scenario	CSRF Enable	CSRF Disable
Session-based authentication (Login Forms, Thymeleaf, JSP, etc.)	‚úÖ Enable	‚ùå
REST APIs using JWT, OAuth2 (No session management)	‚ùå	‚úÖ Disable
Microservices communication (Internal APIs)	‚ùå	‚úÖ Disable
Public APIs (Token-based auth)	‚ùå	‚úÖ Disable
*************
what is Spring Security Filter Chain?
Jab bhi ek HTTP request aati hai, Spring Security usko directly process nahi karta. Pehle ek filter chain ke through request pass hoti hai,
jo security checks perform karti hai jaise authentication, authorization, CSRF protection, CORS handling
******************
Filter chain ek sequence of filters ka collection hai jo ek ke baad ek execute hote hain, jisme har filter ka ek specific role hota hai. Yeh ensure karta hai ki request valid hai ya nahi.
2Ô∏è‚É£ Filter Chain Kaise Kaam Karta Hai?
Example:
Agar ek user dashboard page (/dashboard) open karta hai, to uski request filter chain ke through jaati hai.
üîπ Client request -> üîπ Filter 1 (CORS) -> üîπ Filter 2 (Authentication) -> üîπ Filter 3 (Authorization) -> üîπ Filter 4 (CSRF) -> üîπ Request Controller tak pahunchti hai
**********
FilterSecurityInterceptor	Authorization rules apply karta hai
SecurityContextPersistenceFilter	User session ka security context maintain karta hai
UsernamePasswordAuthenticationFilter	Username/Password authentication handle karta hai
CsrfFilter	CSRF attacks se protect karta hai
CorsFilter	CORS (Cross-Origin Requests) allow ya block karta hai
***************************
Custom Filter Add Karna
Agar apne custom logic add karna hai, to khud ka filter create kar sakte ho aur usko filter chain me add kar sakte ho.
@Component
public class CustomFilter extends OncePerRequestFilter {
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        System.out.println("Custom Filter Executing...");
        filterChain.doFilter(request, response); // Next filter execute hoga
    }
}
‚úîÔ∏è Isko security configuration me add karne ke liye:


@Override
protected void configure(HttpSecurity http) throws Exception {
    http
        .addFilterBefore(new CustomFilter(), UsernamePasswordAuthenticationFilter.class);
}
******************************************
 Spring Security antMatchers() ‚Äì HinEnglish Explanation
Jab hum Spring Security me kisi URL ko secure ya allow karna chahte hain, tab hum antMatchers() ka use karte hain.

üëâ Yeh decide karta hai ki kaunse URL kis user role ya authority ke liye accessible hain.
üëâ Isme wildcard characters (?, *, **) ka use hota hai taaki flexible URL patterns define kiye jaye
***********
Wildcard Characters in antMatchers()
Wildcard	Explanation	Example
?	Ek single character match karega	/user/ab? -> /user/abc valid, but /user/abcd invalid
*	Koi bhi ek word ya set of characters match karega	/user/* -> /user/profile, /user/settings valid but /user/details/info invalid
**	Multiple directories match karega	/admin/** -> /admin/dashboard, /admin/settings/info sab valid
*********
.hasRole("ROLE")	Sirf specified ROLE wale users ko access dena
.hasAnyRole("ROLE1", "ROLE2")	Multiple ROLEs allow karna
.hasAuthority("PERMISSION")	Sirf specified authority wale users ko access dena
.hasAnyAuthority("PERMISSION1", "PERMISSION2")	Multiple authorities allow karna
.authenticated()	Koi bhi authenticated user access kar sakta hai
********************
Spring Security me logged-in user ka naam fetch karne ke liye Principal interface ka use hota hai.
Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();
String userName = principal.getName();
public String helloGfg(Principal principal, Authentication auth, Model model) {
    // üü¢ Current Logged-in User ka Username
    String userName = principal.getName();
    System.out.println("Current Logged-in User is: " + userName);

    // üü¢ Current Logged-in User ki Roles/Authorities
    Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();
******************************
 Alternative Way: SecurityContextHolder Ka Use
Agar Principal ya Authentication inject nahi ho raha hai, to aap SecurityContextHolder ka use kar sakte hain:
Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
String userName = authentication.getName();
Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
System.out.println("User: " + userName);
System.out.println("Roles: " + authorities);
************************************
üîπ Spring Security Password Encoder 
Spring Security me passwords ko securely store aur validate karne ke liye PasswordEncoder ka use hota hai. Yeh ensure karta 
hai ki hum plain text password ko directly store na karein, balki usko hash + encode karke securely rakhein.

***********
Hume Spring Security ka BCryptPasswordEncoder use karke password hash karna hai, to uske liye ek @Bean define karna hoga:
@Configuration
@EnableWebMvc
@ComponentScan("com")
public class MySecurityAppConfig {

    @Bean 
    PasswordEncoder getPasswordEncoder() {
        return new BCryptPasswordEncoder(); // üõ°Ô∏è Passwords ko securely encode karega
    }
}
*********************
What are the essential configurations required for Spring Security?

SecurityContextHolder
Yeh ek thread-local storage hota hai jo current authenticated user ki details store karta hai. Jab bhi ek request aati hai, Spring Security SecurityContextHolder se authentication details fetch karta hai.
üí° Example:
Jab koi user login karta hai, uska authentication object SecurityContextHolder me store ho jata hai, jisse baad me authorization checks me use kiya jata hai
********
. AuthenticationManager
Yeh authentication process ko handle karta hai. Jab user login karta hai, AuthenticationManager verify karta hai ki credentials sahi hain ya nahi. Ye multiple authentication providers ko support karta hai, 
jaise in-memory, database, OAuth, JWT, etc
Agar aap database-based authentication use kar rahe hain, toh AuthenticationManager user credentials ko DB ke against validate karega.
*********
4. UserDetailsService (Custom Authentication)
Agar aap custom user authentication chahte hain, toh UserDetailsService implement karni padti hai. Ye user details ko database ya kisi external 
source se load karne ke liye use hoti hai.
@Service
public class CustomUserDetailsService implements UserDetailsService {
    @Autowired
    private UserRepository userRepository;  // Database access

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
        return new User(user.getUsername(), user.getPassword(), user.getRoles());
    }
}

***********


