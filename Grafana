 Micrometer provides a simple facade to integrate actuator metrics with external monitoring systems and it allowing us to instrument your JVM-based application

* It supports several monitoring systems like Netflix Atlas, AWS Cloudwatch, Datadog, InfluxData, SignalFx, Graphite, Wavefront, Prometheus etc.
***********************************************************************************************************************************************************
 * Prometheus is an open-source monitoring system that was original built by SoundCloud. It consists of the following core components -

* A data scraper that pulls metrics data over HTTP periodically at a configured interval.

A time-series database to store all the metrics data.
***********************************************************************************************************************************************************
Grafana
* A simple user interface where you can visualize, query, and monitor the metrics.
 Grafana allows you to bring data from various data sources like Elasticsearch, Prometheus, Graphite, InfluxDB etc, and visualize them with beautiful graphs.

* It also lets you set alert rules based on your metrics data. When an alert changes state, it can notify you over email, slack, or various other channels.
***********************************************************************************************************************************************************
<dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
      <scope>runtime</scope>
    </dependency>

<dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

*********************
Actuator-config
management.endpoints.web.exposure.include=metrics,info,health,prometheus
or
management.endpoints.web.exposure.include=*;
********
we need to create promethus.yaml file for running the promethous server.we can run the promethus server by first pulling the promethous server image fro docker th
******************************
management.metrics.web.client.requests-metrics-enabled=true
this property enable the collections of metrics for http client request made using restTemplate or webClient. these metrics can include request count sucess and failure
rates response time and more
*****************
management.metrics.web.client.requests-metrics.request-mapping-name=true
When this property is enabled, the metrics collected for web client requests will include the request mapping names. 
This means that metrics will be labeled with the names of the mappings (e.g., the names of the methods or endpoints) that are handling the requests.
*************************************************************
By default, when you enable web client request metrics (management.metrics.web.client.requests-metrics-enabled=true), the collected metrics might look something like this:

http.client.requests.count{uri="/api/users",status="200"}
http.client.requests.count{uri="/api/orders",status="200"}
When you enable the request-mapping-name property (management.metrics.web.client.requests-metrics.request-mapping-name=true), the metrics collected will include the request mapping names. 
With request-mapping-name enabled, the metrics might now look like this:

http.client.requests.count{uri="/api/users",status="200",method="GET",name="getUsers"}
http.client.requests.count{uri="/api/orders",status="200",method="GET",name="getOrders"}
*********************
@RestController
@RequestMapping("/api")
public class ApiController {

    @GetMapping("/users")
    public List<User> getUsers() {
        // Implementation to fetch users
    }
*************************************
metrics.exception.status.map = { 'ServiceUnavailableException':'503', 'NotFoundException':'404', 'ValidationException':'400', 'FeignException.NotFound':'300','FeignException.BadRequest.':'200', 'ServiceException': '500', 'NullPointerException': '500', 'IndexOutOfBoundsException': 'IOBE'}
 When an exception is thrown in your application, Micrometer will collect a metric for that exception.
By providing the metrics.exception.status.map configuration, you're telling Micrometer how to map those exceptions to HTTP status codes,
which can be useful for monitoring and reporting purposes.
*****************************************************************************************************************************************************
http::localhost:8080/actuator->to access actuator endpoint
http::localhost:8080/actuator/prometheus
**********
to pull prometheus server
docker pull prom/prometheus
docker image ls
to run prometheus server
docker run -p 9090:9090 -v (path of the prometheus.yaml file) prom/prometheus
************
docker run -d --name=grafana88 -p 3000:3000 grafana/grafana
***************************


**********************************


 
