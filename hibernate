Hibernate is orm tool used to map java object and database table|it provide jpa implementation that is jpa is an interface and hibernate is implenting jpa
it remove biolerplate code|provide transaction management implicitly
important interface used in the hibernate
SessionFactory-one session factory object per database connection-it provide session object.
Key Methods:openSession():,getCurrentSession()
session-session is used to get physical connection with database.provides methods for CRUD operations, querying, and transaction management.
cascade-used to define cascading between two entity bean used with mapping
Persistance means->the process of storing and  managing the data for long time.
Transaction
The Transaction interface manages transactions in Hibernate.
Key Methods:
begin(): Starts a transaction.
commit(): Commits the transaction, 

rollback()
The Query interface is used to create HQL (Hibernate Query Language) or SQL queries.
In Hibernate, an entity object can exist in different states as it interacts with the session and the database.

When an object is in the transient state, it is not associated with any Hibernate session or database.
The object has just been created using the new operator but hasn't been saved to the database

Persistent State
An object enters the persistent state when it is associated with a Hibernate session and the corresponding record exists in the database.

Detached State
An object enters the detached state when the Hibernate session is closed, but the object still represents a row in the database
***************
@Table(name = "user",indexes = {
        @Index(name = "mobile_no", columnList = "mobile_no"),
        @Index(name = "pan", columnList = "pan"),
        @Index(name = "created_at", columnList = "created_at"),
      
@Slf4j
public class UserEntity {

@Column(name = "created_at", nullable = false, updatable = false)
  @CreatedDate
  private LocalDateTime createdAt = LocalDateTime.now();
**************************
@Convert(converter = EncryptionServiceAES.class)
  @Column
  private String pan;
*************
 @Column(name = "updated_at", nullable = false)
  @LastModifiedDate
  private LocalDateTime updatedAt = LocalDateTime.now();
***************
@Data
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
@JsonIgnoreProperties(
    value = {"createdAt", "modifiedAt"},
    allowGetters = true)
public abstract class AuditModel {
  @Column(name = "created_at", nullable = false, updatable = false)
  @CreatedDate
  private LocalDateTime createdAt = LocalDateTime.now();

  @Column(name = "modified_at", nullable = false)
  @LastModifiedDate
  private LocalDateTime modifiedAt = LocalDateTime.now();

  @CreatedBy
  @Column(name = "created_by", nullable = false)
  private String createdBy = "System";

  @LastModifiedBy
  @Column(name = "modified_by", nullable = false)
  private String modifiedBy = "System";
}
**********
  @Enumerated(EnumType.STRING)
********
@Entity(name = "addresses")
public class AddressEntity extends AuditModel {
*******
@ManyToOne
  @JoinColumn(name = "bank_id", referencedColumnName = "id")
  private CustomerEntity bank;
******************
Spring Data JPA: It reduces the amount of boilerplate code needed for common database operations like GET, PUT, POST, etc.
Spring Repository: It is an extension of Spring Repository which contains APIs for basic CRUD operations, pagination, and Sorting.
Hibernate is a popular ORM (Object-Relational Mapping) framework in Java that provides an abstraction over relational databases
************************************************************************************************************************************
@Entity

Marks a class as an entity
@Table

Specifies the name of the table that the entity will be mapped to.
@Id

Defines the primary key of the entity.
@GeneratedValue

Specifies the generation strategy for the primary key
@Column

Specifies the column name, length, and other constraints in the database.
@Transient

Marks a field to be ignored by Hibernate and not mapped to the database.
@Lob

Marks a field to be persisted as a large object
@Temporal

Used for mapping java.util.Date or java.util.Calendar to the database.
These annotations are used to define relationships between entities (One-to-One, One-to-Many, Many-to-One, Many-to-Many).

@OneToOne

Defines a one-to-one relationship between two entities.
@ManyToOne

Defines a many-to-one relationship.
@ManyToOne

Defines a many-to-one relationship.
@ManyToMany

Defines a many-to-many relationship.
@JoinColumn

Specifies the foreign key column
@JoinColumn(name = "address_id")
private Address address;
@JoinTable

Used to specify a join table in many-to-many relationships.
@Cascade

Defines cascading operations (e.g., persist, remove, merge).
Example:
java
Copy code
@OneToOne(cascade = CascadeType.ALL)
private Address address;
@Fetch
Specifies how Hibernate should fetch related entities (eager or lazy loading).
@OneToMany(fetch = FetchType.LAZY)
private List<Order> orders;
***********************************************************************************************************
The cascade = CascadeType.ALL means that any operation (like persist, merge, remove, etc.) performed on the User entity will cascade to the associated Order entities
What this does:
PERSIST: When a User is saved, all associated Order entities are also saved automatically.
REMOVE: If a User is deleted, all associated Order entities are also deleted.
MERGE: If a User is updated, all associated Order entities are updated too.
DETACH: If a User is detached from the persistence context, all associated Order entities are also detached.
*********************
@NotNull
Ensures that a field cannot be null.
*********************************************************
@Size
Specifies the size constraints on a field
************
@Min / @Max
Ensures that numeric fields fall within a specified range.
************
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
********************************************************************************************************************************************************************
Hibernate ek ORM (Object Relational Mapping) tool hai jo Java objects ko database tables se map karta hai.
JPA (Java Persistence API) ek specification hai, aur Hibernate uska implementation provide karta hai.
Ye boilerplate code ko remove karta hai aur transaction management ko handle karta hai.

******************************************************************************************
Key Interfaces in Hibernate:
SessionFactory:

Ek baar initialize hone wala object hota hai per database connection.
Ye Session object provide karta hai.
Key Methods:
openSession(): Naya session create karta hai.
getCurrentSession(): Current session return karta hai.
Session:

Database ke sath physical connection establish karta hai.
CRUD operations, queries, aur transactions handle karta hai.
Transaction:

Transactions ko manage karta hai.
Key Methods:
begin(): Transaction start karta hai.
commit(): Changes ko database me save karta hai.
rollback(): Agar koi error aaye toh changes ko cancel karta hai.
Query Interface:

HQL (Hibernate Query Language) ya native SQL queries banane ke liye use hota hai.
*********************************************
Entity States in Hibernate:
Transient State:

Jab object new keyword se create hota hai aur kisi session se linked nahi hota.
Iska koi database record nahi hota.

User user = new User(); // Transient state
user.setName("Ashish");
*******
Persistent State:
Jab object Hibernate session ke sath linked hota hai aur database me save hota hai.
Hibernate is object ka tracking karta hai.
Session session = sessionFactory.openSession();
session.beginTransaction();
session.save(user); // Persistent state
session.getTransaction().commit();
*******************
Detached State:
Jab session close ho jata hai lekin object ab bhi database row ko represent karta hai.
session.close();
***************************************************
Cascading ka matlab hota hai parent entity par ki gayi operation ko child entities par bhi apply karna.
Hibernate me, cascading ka use hota hai taaki hume baar-baar session operations likhne ki zarurat na pade.
****
Maan lo humare paas do entities hain — Customer aur uske Orders.
Agar hum Customer ko save karte hain aur chahte hain ki uske saare Orders bhi automatically save ho jayein, toh cascade ka use karenge.
******
@Entity
public class Customer {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
    private List<Order> orders = new ArrayList<>();
}

@Entity
public class Order {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String product;

    @ManyToOne
    @JoinColumn(name = "customer_id")
    private Customer customer;
}
**************************************
Customer customer = new Customer();
customer.setName("Ashish");

Order order1 = new Order();
order1.setProduct("Laptop");
order1.setCustomer(customer);

Order order2 = new Order();
order2.setProduct("Phone");
order2.setCustomer(customer);

customer.getOrders().add(order1);
customer.getOrders().add(order2);

session.save(customer); // Automatically saves order1 and order2
*******************************************************
Example: CascadeType.REMOVE
Agar hum chahte hain ki jab Customer delete ho toh uske saare Orders bhi delete ho jayein
**********

Use Case	Recommended Cascade
Parent ke sath child bhi save karna hai	CascadeType.PERSIST / CascadeType.ALL
Parent delete pe child bhi delete	CascadeType.REMOVE
Parent update pe child bhi update	CascadeType.MERGE
**********************************************************
 When NOT to Use Cascading:
Jab child entity ka multiple parent se link ho sakta hai.
Jab accidental data loss ka risk ho (like using CascadeType.REMOVE in many-to-many).
***********************************
2. What are the advantages of using Hibernate?
HQL ka full form hai Hibernate Query Language. Ye object-oriented query language hai jo SQL jaisa lagta hai, 
lekin tables aur columns ke jagah Java classes aur fields ko target karta hai.
*******
 Basic Syntax of HQL:

SELECT <alias> FROM <EntityName> <alias> WHERE <condition>
EntityName → Java class ka naam (table ka nahi)
Fields → Entity ke properties ka naam (database columns ka nahi)
**********
Named parameters (:paramName) use karo for safer queries.
Query.list() → Multiple results ke liye
Query.uniqueResult() → Single result ke liye
******
String hql = "FROM Employee";  // Selects all employees
Query query = session.createQuery(hql);
List<Employee> employees = query.list();
******
String hql = "SELECT name FROM Employee";
Query query = session.createQuery(hql);
List<String> names = query.list();
**
String hql = "FROM Employee ORDER BY salary DESC";
Query query = session.createQuery(hql);
List<Employee> sortedEmployees = query.list();
**********
String hql = "FROM Employee WHERE name = :empName";
Query query = session.createQuery(hql);
query.setParameter("empName", "Ashish");
Employee employee = (Employee) query.uniqueResult();
**********************
1. Simplified Database Interaction:
2. HQL (Hibernate Query Language):
Hibernate apna khud ka query language provide karta hai – HQL
. Database Independence:
Hibernate queries database independent hoti hain. Agar kal ko database change karna ho (MySQL se PostgreSQL), toh code me zyada changes nahi karne padenge
. Caching Mechanism:
Hibernate caching support karta hai, jisse database queries ka load kam hota hai aur performance improve hoti hai.

First Level Cache → Session ke andar kaam karta hai.
Second Level Cache → Application level pe caching hoti hai
****************
Hibernate ACID (Atomicity, Consistency, Isolation, Durability) principles ko follow karta hai aur in-built transaction management provide karta hai.
********************
NamedQuery Hibernate ka ek feature hai jisme aap apne HQL (Hibernate Query Language) queries ko pre-define kar sakte ho aur unhe easily multiple places par reuse kar sakte ho. Ye queries directly 
entity class me likhi jati hain aur runtime pe fetch ki jati hain.
***************************
@NamedQuery(
    name = "Employee.findByDepartment",
    query = "FROM Employee WHERE department = :dept"
)
Query query = session.createNamedQuery("Employee.findByDepartment");
query.setParameter("dept", "IT");
List<Employee> employees = query.list();
************************
. What happens when the no-args constructor is absent in the Entity bean?

Hibernate me jab aap koi Entity class banate ho, toh No-Args Constructor (default constructor) hona mandatory hota hai.
Agar wo constructor nahi hoga, toh Hibernate aapke entity object ko create nahi kar paayega, aur runtime pe Exception throw karega.

💥 Why No-Args Constructor is Required?
Hibernate Reflection API ka use karta hai object create karne ke liye.
Reflection new operator ka use nahi karta, isliye wo parameterized constructor ko nahi samajh pata.
Wo directly No-Args Constructor ko call karta hai entity object banane ke liye.

*******************************
Does Hibernate Support Native SQL Queries?
Yes, Hibernate supports Native SQL Queries. Agar aapko directly apne database pe SQL chalani hai (bypassing HQL),
toh Hibernate me aap Native SQL Queries ka use kar sakte ho.
*********************************
 Why Use Native SQL Queries?
Complex Queries: Jab HQL se query banana mushkil ho.
Database-Specific Features: Jo HQL support nahi karta (like specific SQL functions).
Performance Optimization: Sometimes raw SQL is faster.
************
Hibernate me caching ka use performance boost karne ke liye hota hai. 
 First-Level Cache (Session Level Cache)
By Default Enabled: Hibernate me yeh automatically on hota hai.
Session Scoped: Har session ka apna cache hota hai.
Valid till Session is Open: Jaise hi session close hoga, cache clear ho jayega
*****
Second-Level Cache (SessionFactory Level Cache)
Manually Enable Karna Padta Hai.
Shared Across Sessions: Multiple sessions same cached data ko use kar sakte hain.
Works Even After Session Close: Jab tak cache clear nahi hoti ya expire nahi hota, data available rahega.
***********
Hibernate me get() aur load() dono hi methods database se data fetch karne ke liye use hote hain, lekin dono ka kaam karne ka tareeka alag hota hai.
🟢 1️⃣ get() Method:
Immediate Data Fetch: Jab get() call karte ho, turant database hit hota hai.
Returns null if Not Found: Agar record nahi mila toh null return karega.
Eager Loading: Data ko turant load kar leta hai.
**********
🟡 2️⃣ load() Method:
Lazy Loading: Direct database hit nahi karta, pehle proxy object deta hai.
Returns Proxy Object: Jab tak kisi property ko access nahi karte, DB hit nahi hota.
Throws Exception if Not Found: Agar record nahi mila toh ObjectNotFoundException throw karega.
************
 session.save() Method:
Return Type: Primary key (Serializable type) return karta hai.
Transient to Persistent: Object ko transient se persistent state me convert karta hai.
Immediate Insert: Jab call karoge, turant INSERT query fire hogi.
********
2️⃣ session.persist() Method:
Return Type: Kuch return nahi karta (void method).
JPA Standard: persist() JPA specification follow karta hai.
Requires Active Transaction: Transaction ke andar hona mandatory hai, warna exception throw karega.
No Immediate Insert: Jab tak transaction commit nahi hota, INSERT query nahi chalegi.
No Duplicates: Duplicate objects save nahi honge.
******

