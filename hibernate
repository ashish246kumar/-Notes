Hibernate is orm tool used to map java object and database table|it provide jpa implementation that is jpa is an interface and hibernate is implenting jpa
it remove biolerplate code|provide transaction management implicitly
important interface used in the hibernate
SessionFactory-one session factory object per database connection-it provide session object.
Key Methods:openSession():,getCurrentSession()
session-session is used to get physical connection with database.provides methods for CRUD operations, querying, and transaction management.
cascade-used to define cascading between two entity bean used with mapping
Persistance means->the process of storing and  managing the data for long time.
Transaction
The Transaction interface manages transactions in Hibernate.
Key Methods:
begin(): Starts a transaction.
commit(): Commits the transaction, 

rollback()
The Query interface is used to create HQL (Hibernate Query Language) or SQL queries.
In Hibernate, an entity object can exist in different states as it interacts with the session and the database.

When an object is in the transient state, it is not associated with any Hibernate session or database.
The object has just been created using the new operator but hasn't been saved to the database

Persistent State
An object enters the persistent state when it is associated with a Hibernate session and the corresponding record exists in the database.

Detached State
An object enters the detached state when the Hibernate session is closed, but the object still represents a row in the database
***************
@Table(name = "user",indexes = {
        @Index(name = "mobile_no", columnList = "mobile_no"),
        @Index(name = "pan", columnList = "pan"),
        @Index(name = "created_at", columnList = "created_at"),
      
@Slf4j
public class UserEntity {

@Column(name = "created_at", nullable = false, updatable = false)
  @CreatedDate
  private LocalDateTime createdAt = LocalDateTime.now();
**************************
@Convert(converter = EncryptionServiceAES.class)
  @Column
  private String pan;
*************
 @Column(name = "updated_at", nullable = false)
  @LastModifiedDate
  private LocalDateTime updatedAt = LocalDateTime.now();
***************
@Data
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
@JsonIgnoreProperties(
    value = {"createdAt", "modifiedAt"},
    allowGetters = true)
public abstract class AuditModel {
  @Column(name = "created_at", nullable = false, updatable = false)
  @CreatedDate
  private LocalDateTime createdAt = LocalDateTime.now();

  @Column(name = "modified_at", nullable = false)
  @LastModifiedDate
  private LocalDateTime modifiedAt = LocalDateTime.now();

  @CreatedBy
  @Column(name = "created_by", nullable = false)
  private String createdBy = "System";

  @LastModifiedBy
  @Column(name = "modified_by", nullable = false)
  private String modifiedBy = "System";
}
**********
  @Enumerated(EnumType.STRING)
********
@Entity(name = "addresses")
public class AddressEntity extends AuditModel {
*******
@ManyToOne
  @JoinColumn(name = "bank_id", referencedColumnName = "id")
  private CustomerEntity bank;
******************
Spring Data JPA: It reduces the amount of boilerplate code needed for common database operations like GET, PUT, POST, etc.
Spring Repository: It is an extension of Spring Repository which contains APIs for basic CRUD operations, pagination, and Sorting.
Hibernate is a popular ORM (Object-Relational Mapping) framework in Java that provides an abstraction over relational databases
************************************************************************************************************************************
@Entity

Marks a class as an entity
@Table

Specifies the name of the table that the entity will be mapped to.
@Id

Defines the primary key of the entity.
@GeneratedValue

Specifies the generation strategy for the primary key
@Column

Specifies the column name, length, and other constraints in the database.
@Transient

Marks a field to be ignored by Hibernate and not mapped to the database.
@Lob

Marks a field to be persisted as a large object
@Temporal

Used for mapping java.util.Date or java.util.Calendar to the database.
These annotations are used to define relationships between entities (One-to-One, One-to-Many, Many-to-One, Many-to-Many).

@OneToOne

Defines a one-to-one relationship between two entities.
@ManyToOne

Defines a many-to-one relationship.
@ManyToOne

Defines a many-to-one relationship.
@ManyToMany

Defines a many-to-many relationship.
@JoinColumn

Specifies the foreign key column
@JoinColumn(name = "address_id")
private Address address;
@JoinTable

Used to specify a join table in many-to-many relationships.
@Cascade

Defines cascading operations (e.g., persist, remove, merge).
Example:
java
Copy code
@OneToOne(cascade = CascadeType.ALL)
private Address address;
@Fetch
Specifies how Hibernate should fetch related entities (eager or lazy loading).
@OneToMany(fetch = FetchType.LAZY)
private List<Order> orders;
***********************************************************************************************************
The cascade = CascadeType.ALL means that any operation (like persist, merge, remove, etc.) performed on the User entity will cascade to the associated Order entities
What this does:
PERSIST: When a User is saved, all associated Order entities are also saved automatically.
REMOVE: If a User is deleted, all associated Order entities are also deleted.
MERGE: If a User is updated, all associated Order entities are updated too.
DETACH: If a User is detached from the persistence context, all associated Order entities are also detached.
*********************
@NotNull
Ensures that a field cannot be null.
*********************************************************
@Size
Specifies the size constraints on a field
************
@Min / @Max
Ensures that numeric fields fall within a specified range.
************
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
