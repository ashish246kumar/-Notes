Floor in a sorted Array
Input: arr[] = [1, 2, 8, 10, 11, 12, 19], k = 0
Output: -1
Explanation: No element less than 0 is found. So output is -1.
class Solution {

    static int findFloor(int[] arr, int k) {
       
       int mid=0,low=0,high=arr.length-1,target=-1;
       while(low<=high){
           mid=(low+high)/2;
           if(arr[mid]<=k){
               target=mid;
               low=mid+1;
           }
           else{
              high=mid-1; 
           }
       }
       return target;
    }
}

*********************************************************************************
 static int findCeil(int[] arr, int x) {
       
       int mid=0,low=0,high=arr.length-1,target=-1;
       while(low<=high){
           mid=(low+high)/2;
           if(arr[mid]>=x){
               target=arr[mid];
               high=mid-1;
           }
           else{
              low=mid+1; 
           }
       }
       return target;
    }
***************************************
SEARCH INSERT POSITION
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 


public int searchInsert(int[] nums, int target) {
        int low=0,mid=0,high=nums.length-1,pos=nums.length;
        while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]>=target){
                pos=mid;
                 high=mid-1;
                 
            }
           else{
               low=mid+1; 
            }
        }
        return pos;
        
    }
