Floor in a sorted Array
Input: arr[] = [1, 2, 8, 10, 11, 12, 19], k = 0
Output: -1
Explanation: No element less than 0 is found. So output is -1.
class Solution {

    static int findFloor(int[] arr, int k) {
       
       int mid=0,low=0,high=arr.length-1,target=-1;
       while(low<=high){
           mid=(low+high)/2;
           if(arr[mid]<=k){
               target=mid;
               low=mid+1;
           }
           else{
              high=mid-1; 
           }
       }
       return target;
    }
}

*********************************************************************************
 static int findCeil(int[] arr, int x) {
       
       int mid=0,low=0,high=arr.length-1,target=-1;
       while(low<=high){
           mid=(low+high)/2;
           if(arr[mid]>=x){
               target=arr[mid];
               high=mid-1;
           }
           else{
              low=mid+1; 
           }
       }
       return target;
    }
***************************************
SEARCH INSERT POSITION
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 


public int searchInsert(int[] nums, int target) {
        int low=0,mid=0,high=nums.length-1,pos=nums.length;
        while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]>=target){
                pos=mid;
                 high=mid-1;
                 
            }
           else{
               low=mid+1; 
            }
        }
        return pos;
        
    }
************************************************************************************************************
First and Last position of Element in a sorted array
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int a=findFirstPosition(nums,target);
        int b=findLastPosition(nums,target);
        int[] ans=new int[2];
        ans[0]=a;
        ans[1]=b;
        return ans;
    }
    static int findFirstPosition(int[] nums, int target){
        int low=0,high=nums.length-1,mid=0,ans=-1;
        while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]==target){

               ans=mid;
               System.out.println(ans);
               high=mid-1;
            }
            else if(nums[mid]>target){
               high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return ans;
    }
    static int findLastPosition(int[] nums, int target){
        int low=0,high=nums.length-1,mid=0,ans=-1;
        while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]==target){
               ans=mid;
               low=mid+1;
            }
            else if(nums[mid]<target){
              low=mid+1;
            }
            else{
               high=mid-1;
            }
        }
        return ans;
    }
}
****************************************************************************************************************************************
Search in a rotated array 
Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 
class Solution {
    public int search(int[] nums, int target) {
         int low=0,high=nums.length-1,mid=0,ans=-1;
         while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[low]<=nums[mid]){
                if(target>=nums[low] && target<=nums[mid]){
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            else{
                 if(nums[mid]<=target && target<=nums[high]){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
         }
         return -1;
    }
}
***********************************************************************************************************************************************
Search in a rotated array if it contain dulicate Element.
[1,0,1,1,1]
target=0
********************************************************************

class Solution {
    public boolean search(int[] nums, int target) {
         int low=0,high=nums.length-1,mid=0,ans=-1;
         while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]==target){
                return true;
            }
            if(nums[low]==nums[mid]&& nums[mid]==nums[high]){
                low=low+1;
                high=high-1;
                continue;
            }
            if(nums[low]<=nums[mid]){
                if(target>=nums[low] && target<=nums[mid]){
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            else{
                 if(nums[mid]<=target && target<=nums[high]){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
         }
         return false;
    }
}
*********************************************************************************************************
Find Minimum in a Rotated sorted array
************************************************
class Solution {
    public int findMin(int[] nums) {
       int low=0,high=nums.length-1,min=Integer.MAX_VALUE,mid=0;
       while(low<=high){
        mid=(low+high)/2;
          if(nums[low]<=nums[mid]){
            min=Math.min(min,nums[low]);
            low=mid+1;
          }
          else{
                min=Math.min(min,nums[mid]);
                high=mid-1;

          }
       }
       return min;

    }
}
*******************************************************************************************************************************************
