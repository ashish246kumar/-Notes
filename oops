Polymorphism
The word ‘polymorphism’ means ‘having many forms’. considered one of the important features of Object-Oriented Programming.Polymorphism allows us to perform a single action in different ways. 
In other words, polymorphism allows you to define one interface and have multiple implementations.
 In simple words, we can define Java Polymorphism as the ability of a message to be displayed in more than one 
Real-life Illustration of Polymorphism in Java: A person can have different characteristics at the same time. Like a man at the same time is a father, a husband, and an employee.
Types of Java Polymorphism
In Java Polymorphism is mainly divided into two types: 
Compile-time Polymorphism
Runtime Polymorphism
Compile-Time Polymorphism in Java
It is also known as static polymorphism. This type of polymorphism is achieved by function overloading
Method Overloading
When there are multiple functions with the same name but different parameters then these functions are said to be overloaded.by changes in the number of arguments or/and a change in the type of arguments.
class Helper {

    // Method with 2 integer parameters
    static int Multiply(int a, int b)
    {
        // Returns product of integer numbers
        return a * b;
    }

    // Method 2
    // With same name but with 2 double parameters
    static double Multiply(double a, double b)
    {
        // Returns product of double numbers
        return a * b;
    }
}
Runtime Polymorphism in Java
It is also known as Dynamic Method Dispatch
This type of polymorphism is achieved by Method Overriding. Method overriding,
abstract class Employee {
    private String name;
    private int employeeId;
    
    public Employee(String name, int employeeId) {
        this.name = name;
        this.employeeId = employeeId;
    }
    
    public String getName() {
        return name;
    }
    
    public int getEmployeeId() {
        return employeeId;
    }
    
    // Abstract method to be overridden by subclasses
    public abstract double calculateSalary();
}

// Subclass for full-time employees
class FullTimeEmployee extends Employee {
    private double annualSalary;
    
    public FullTimeEmployee(String name, int employeeId, double annualSalary) {
        super(name, employeeId);
        this.annualSalary = annualSalary;
    }
    
    @Override
    public double calculateSalary() {
        return annualSalary;
    }
}
class PartTimeEmployee extends Employee {
    private double hourlyRate;
    private int hoursWorked;
    
    public PartTimeEmployee(String name, int employeeId, double hourlyRate, int hoursWorked) {
        super(name, employeeId);
        this.hourlyRate = hourlyRate;
        this.hoursWorked = hoursWorked;
    }
    
    @Override
    public double calculateSalary() {
        return hourlyRate * hoursWorked;
    }
}
class ContractEmployee extends Employee {
    private double contractAmount;
    
    public ContractEmployee(String name, int employeeId, double contractAmount) {
        super(name, employeeId);
        this.contractAmount = contractAmount;
    }
    
    @Override
    public double calculateSalary() {
        return contractAmount;
    }
}
************************************************************************************************
why we can not create instance of abstract class?
Because an abstract class is an incomplete class (incomplete in the sense it contains abstract methods without body and output.) We cannot create an instance or object, the same way you say for an interface.
If we will create an object of the abstract class and calls the method having no body(as the method is pure virtual) it will give an error.
******************************************************************************************
Encapsulation
In Java, encapsulation is achieved by declaring the instance variables of a class as private, which means they can only be accessed within the class.
 To allow outside access to the instance variables, public methods called getters and setters are defined.
Encapsulation is defined as the wrapping up of data under a single unit
prevents the data from being accessed by the code outside this shield. 
Advantages of Encapsulation
Data Hiding

****************************************************************************************************************************************
Inheritence
 It is the mechanism in Java by which one class is allowed to inherit the features(fields and methods) of another class. It allowing you to create flexible and reusable code.
Single inheritence
class Animal{
}
class dog extend Animal{
}
******
multiple-single child multiple parent
multilevel
class A {
    // superclass A
}

class B extends A {
    // subclass B extends superclass A
}

class C extends B {
    // subclass C extends subclass B
}
************
hierarchil
class A {
    // superclass A
}

class B extends A {
    // subclass B extends superclass A
}

class C extends A {
    // subclass C
*************************************
Abstraction in Java refers to hiding the implementation details of a code and exposing only the necessary information to the user.

