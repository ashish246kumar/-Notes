The SOLID principles are five object-oriented design principles that make code easier to understand, maintain, and extend. Here’s a simple explanation of each with easy-to-understand Java examples.

✅ 1. S - Single Responsibility Principle (SRP)
A class should have only one reason to change.

Bad:

java
Copy
Edit
class Report {
    void generateReport() { System.out.println("Generating report"); }
    void saveToFile() { System.out.println("Saving to file"); } // file handling
}
Good:

java
Copy
Edit
class ReportGenerator {
    void generateReport() { System.out.println("Generating report"); }
}

class FileSaver {
    void saveToFile() { System.out.println("Saving to file"); }
}
✅ 2. O - Open/Closed Principle (OCP)
Software entities should be open for extension, but closed for modification.

Bad:

java
Copy
Edit
class Discount {
    double getDiscount(String type) {
        if (type.equals("student")) return 0.5;
        else if (type.equals("senior")) return 0.7;
        return 1.0;
    }
}
Good (Open for extension via subclass):

java
Copy
Edit
interface Discount {
    double getDiscount();
}

class StudentDiscount implements Discount {
    public double getDiscount() { return 0.5; }
}

class SeniorDiscount implements Discount {
    public double getDiscount() { return 0.7; }
}
✅ 3. L - Liskov Substitution Principle (LSP)
Subclasses should be substitutable for their base classes without breaking the program.

Bad:

java
Copy
Edit
class Bird {
    void fly() { System.out.println("Flying"); }
}

class Ostrich extends Bird {
    void fly() { throw new UnsupportedOperationException(); } // Ostrich can't fly
}
Good:

java
Copy
Edit
interface Bird {}
interface FlyingBird extends Bird {
    void fly();
}

class Sparrow implements FlyingBird {
    public void fly() { System.out.println("Sparrow flying"); }
}

class Ostrich implements Bird {} // doesn't implement fly
✅ 4. I - Interface Segregation Principle (ISP)
Clients should not be forced to implement interfaces they don't use.

Bad:

java
Copy
Edit
interface Worker {
    void work();
    void eat();
}

class Robot implements Worker {
    public void work() { System.out.println("Working"); }
    public void eat() {} // Robot doesn't eat
}
Good:

java
Copy
Edit
interface Workable {
    void work();
}

interface Eatable {
    void eat();
}

class Robot implements Workable {
    public void work() { System.out.println("Robot working"); }
}
✅ 5. D - Dependency Inversion Principle (DIP)
Depend on abstractions, not on concrete classes.

Example Without DIP (Problematic Code)

class PayPalProcessor {
    public void processPayment(double amount) {
        System.out.println("Processing payment of $" + amount + " via PayPal");
    }
}

class PaymentService {
    private PayPalProcessor processor = new PayPalProcessor(); // Direct dependency

    public void makePayment(double amount) {
        processor.processPayment(amount); // Tightly coupled to PayPalProcessor
    }
}

public class Main {
    public static void main(String[] args) {
        PaymentService service = new PaymentService();
        service.makePayment(100.0);
    }
}

****
Example With DIP (Improved Code)
To follow DIP, we introduce an abstraction (interface) that both the high-level and low-level modules depend on
// Abstraction (interface)
interface PaymentProcessor {
    void processPayment(double amount);
}

// Low-level module: PayPal implementation
class PayPalProcessor implements PaymentProcessor {
    @Override
    public void processPayment(double amount) {
        System.out.println("Processing payment of $" + amount + " via PayPal");
    }
}

// Low-level module: Stripe implementation
class StripeProcessor implements PaymentProcessor {
    @Override
    public void processPayment(double amount) {
        System.out.println("Processing payment of $" + amount + " via Stripe");
    }
}

// High-level module: Depends on abstraction, not concrete classes
class PaymentService {
    private PaymentProcessor processor; // Depends on interface

    // Constructor injection for flexibility
    public PaymentService(PaymentProcessor processor) {
        this.processor = processor;
    }

    public void makePayment(double amount) {
        processor.processPayment(amount);
    }
}

public class Main {
    public static void main(String[] args) {
        // Inject PayPalProcessor
        PaymentService paypalService = new PaymentService(new PayPalProcessor());
        paypalService.makePayment(100.0);

        // Inject StripeProcessor
        PaymentService stripeService = new PaymentService(new StripeProcessor());
        stripeService.makePayment(200.0);
    }
}
