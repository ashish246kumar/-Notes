@COMPONENT->it tell the spring container to automatically create spring bean.It indicate that annotated class is spring bean or component.
3types of configuration-Java Based,xml based and annotation based
when we use @Component we donot need to create object by new keyword
@Autowired-used to inject bean automatically
@Autowired-used in constrctor injection, setter injection and field injection.
@Qualifiier-used in conjuction with autowired  to avoid confusion when we have two or more bean configured for same type
 private  ExampleInterface exampleInterface;
@Autowired
public ExampleService(@Qualifier("implementationA") ExampleInterface exampleInterface) {
        this.exampleInterface = exampleInterface;
    }
ExampleInterface  is implemented by implementationA class and implementationB class.if we not use @Qualifier annotation here then there will 
confusion that which class bean it will  create implemetationA or implementationB
@Primary-to give higher preference to bean when there are multiple bean of same type.
@Component
@Primary
public class ImplementationB implements ExampleInterface {
    @Override
    public void doSomething() {
        // Implementation B
    }
}
 private  ExampleInterface exampleInterface;
@Autowired
public ExampleService( ExampleInterface exampleInterface) {
        this.exampleInterface = exampleInterface;
    }
*****************************
@Bean-method produces a bean to be managed  by the spring container
public class vegPizza implements Pizza{

  public String getPizza(){
   return "vegPizza";
}
}
@Configuration
public class AppConfig{

 @Bean
public Pizza vegPizza(){
    return new VegPizza()
}
@Bean 
public PizzController pizzController(){
     return new PizzaController(vegPizza());
}
}

public class PizzaController{

private Pizza pizza;
public PizzaController(Pizza pizza){
   this.pizza=pizza
}
public String getPizza(){
   return pizza.getPizza();
}
}
@Bean provide init method and destroy method to perform certain action after bean initilzation or before bean destruction by the container.
@Bean annotation to create Spring Bean definitions using Java-based configuration.
*********************
@Controller-for handling http request @ResponseBody  is not included
@RestController is used for creating RESTful APIs 
**********************************************
@Lazy-@Lazy annotation to load the Spring beans lazily (on-demand).
By default Spring crete all the bean eagrly at the startup or bootStraping of the application context.
@Lazy can be useful for beans that are resource-intensive
**********************
In Spring, the 
@Scope annotation is used to define the scope of a bean in the Spring context.
 A scope defines the lifecycle of a bean — how and when a new instance of the bean is created and how long it lives
@Scope annotation is used to define the scope of the bean
Singleton: only one instance of the bean is created and shared across the entire application. This is the default scope.

Prototype: a new instance of the bean is created every time it is requested.
Request (Web Application)
Definition: A new bean instance is created for each HTTP request. It's used in web applications
Session (Web Application)
Definition: A new bean instance is created for each HTTP session
@Scope("request")
@Component
@Scope("singleton")
public class MySingletonBean {
    // Singleton bean properties and methods...
}
**********************
@SpringBootApplication-->it is mark over the main class over the spring boot application.It is a combination of @Configuration, @EnableAutoConfiguration, and @ComponentScan.
@RestController-->It indicate that the class is a web controller.and that its methods return data directly in the HTTP response body.
combination of @Controller and @ResponseBody.
@RequestMapping-->Used to map web requests to specific handler classes or handler methods. It can be applied at the class level or method level.
@Service->Indicates that a class is a service component.
@Repository-->Indicates that a class is a repository component
  @Value("${my.property}")-->it is used to get the property from application.property
@Conditional-->Marks a configuration class or bean as conditional, meaning it will only be processed if a specified condition is met.
@EnableAutoConfiguration---->Enables Spring Boot’s auto-configuration mechanism, which attempts to automatically configure your Spring application 
based on the jar dependencies you have added
@Async-->Indicates that a method should be executed asynchronously.
@EnableAsync-->Enables Spring’s asynchronous method execution capability.
@Scheduled-->Used to mark a method to be scheduled and executed at fixed intervals.
@EnableScheduling-->Enables Spring’s scheduled task execution capability.

************************************
In Spring, both @Configuration and @Component are annotations used to define beans,.
difference between @Configuration and @Component
@Configuration-->Methods annotated with @Bean inside a @Configuration class are used to define and configure beans.@Configuration class can have one or more bean defined
@Component-> The class itself is treated as a bean definition.It is a generic stereotype for any Spring-managed component.
******************************************************************************
difference between @RestController and @Controller
@Controller--> Marks a class as a Spring MVC controller.Return Type: Methods usually return ModelAndView or String representing the view name. 
To return JSON or XML, methods need to be annotated with @ResponseBody. Suitable for applications serving web pages and using views
@RestController-->@Controller that is used for RESTful web services.Methods return the response body directly (usually JSON or XML) instead of a view.
**************************************
@GetMapping(value = "/user", produces = MediaType.APPLICATION_XML_VALUE)
**********************************************************************************
@ComponentScan-->used to specify the base packages to scan for Spring components (i.e., classes annotated with @Component, @Service, @Repository, @Controller, etc.).
@ComponentScan(basePackages = "com.example.myapp")
***************************

****************************

hoising in javascript

https://www.youtube.com/shorts/CNKE5rOihdE

When JavaScript executes this code, it hoists all variable declarations (var) to the top of their scope, but not their assignments.

event loop javascript
https://youtube.com/shorts/XHglqbqgkMg?si=c4wKgyzHrgW-AfN3

Ye continuously check karta hai:
Call stack khali hai ya nahi.
Microtask queue mein koi kaam hai ya nahi.
Task queue mein koi kaam hai ya nahi.
Agar call stack khali hai, to pehle microtask queue ke saare tasks execute hote hain, phir task queue ke tasks.

slice vs splice
https://youtube.com/shorts/k2iqCT_SsuA?si=wvxg58wr68nVNOeM

string is immutable

https://youtube.com/shorts/X7bXU9rNvAg?si=J1-iPUl5F5Q7nz4N

circular reference

https://youtube.com/shorts/_D30M8sm4BM?si=xseKIgRbeG6JCTr-

how scope work

https://youtube.com/shorts/CFNbjMqSQG0?si=LwxlfyeDCKzgdtXZ

run all promises at once 
https://youtube.com/shorts/bqyvx8PRWBo?si=4h5Svqvh-lF2whRX


function expression vs function declarations
https://youtube.com/shorts/AJnSg7Xcwu0?si=Q0mkgbKGJxvjEUhc

**************************************
Angulr interview 
****************
component in angular
https://www.youtube.com/watch?v=TALdXKI0BZM&t=231s

**************
directive in angular
https://www.youtube.com/watch?v=bKTGZAHUpgE

******
lifecycle of angular
https://www.youtube.com/watch?v=hZw-QMY6fX4
https://www.youtube.com/shorts/VNcWDPHocCE
https://youtube.com/shorts/xOkpgV--Rzg?si=vQ5RE_tAY6E2oHd-

***********
api integration in angular
https://www.youtube.com/watch?v=OrN4sdIbC5g
***
module
https://www.youtube.com/watch?v=v9U1T2eIjoU


module is a container that groups together components, directives, pipes, and services that are related and can be bundled together.
 Modules help organize an application into cohesive blocks of functionality.
*****
Lazy loading
https://www.youtube.com/watch?v=nVUUSGYLYPI
**
template driven form
https://www.youtube.com/watch?v=WWLXIF0SNa8

https://www.youtube.com/shorts/1ff7JYcvjvg
************
Reactive form
https://www.youtube.com/watch?v=7gte--l3Uxo
********

two way data binding
https://youtube.com/shorts/ds2YhxM5phQ?si=BQnCKfSXtSZefPR6

***************
https://youtube.com/shorts/HF_MZemjxYk?si=TQJyg9Kz2qL9Goyf

*******
interceptor

https://www.youtube.com/watch?v=w1_AmHv2LmA&t=532s
***********
https://youtube.com/shorts/njCnO2yA5hM?si=43L7bvNLXPywqfnU
******
poling
https://www.youtube.com/watch?v=ZBM28ZPlin8&t=17s
****
pub -sub
https://www.youtube.com/watch?v=algmP8MGeL4
*****
routes in angular

https://youtube.com/shorts/XxoLwoK0Bs8?si=UmdI3Jhi7v0fXddP
https://youtube.com/shorts/GPiTcMznOYE?si=LeopagxBuqKYWIAT
***********
https://youtube.com/shorts/MxKisRjuh-M?si=7gEyngcDhFZaa_Wm

******
route guard in angular
https://www.youtube.com/watch?v=rEegtnH6oYs
https://youtube.com/shorts/lIJ8no0lfn8?si=Z5_oDNF6f6HeLWuX
*****
pipes

https://www.youtube.com/watch?v=PlfgNrSkINA
*******
How to chain and wait for multiple API calls in Angular

https://www.youtube.com/watch?v=CcdyJJolM-Y

********
spring seurity interview 

https://www.youtube.com/watch?v=7Rt6UmsQTGM

******
how does spring handle concurrent session?
https://youtube.com/shorts/5vrpkMDNb5Y?si=RDyIv28CbIykozMx
****

spring security architecure
https://www.youtube.com/watch?v=7eSQd7me6QI
******
Jwt authentication

https://youtube.com/shorts/NZNE4sDaw8s?si=M5LFLUwDS-BfNXYN
****************

duplicate bean in spring boot

https://youtube.com/shorts/R1esKZvxLWE?si=0ymAGvQtKp3fu6Xe

********
@Configuration vs @Component

https://www.youtube.com/shorts/QR5H6UX7aI4

*****
Bean overiding
https://www.youtube.com/shorts/l6V-ec36aBo

*********
feature of bean annotation
https://youtube.com/shorts/vqvPhzlYNrw?si=vQXSNxLf-c02LBo0
********
target annotation in spring booot
https://youtube.com/shorts/aIHysrmQHZg?si=uUPErjbtWWgPQDtr
******
postConstruct vs postDestroy
https://youtube.com/shorts/7dYn_NsCfr0?si=uAvRENL-SlRT7Dq6
*****
spring cloud config
https://youtube.com/shorts/tnp01jmoHy8?si=87OirWLoN6UKSCdN

************************
comandline runner
https://youtube.com/shorts/ieYA7eMBJJo?si=GODGHeuhrGd3SLje
******
Load big config file from json
https://youtube.com/shorts/kojJ-Nw8u3c?si=ES3-H9P4vltPhQXD

*******
Java generics

https://youtube.com/shorts/jK5DUo7rvM8?si=bLiVZyPJMalCZVrN

*******
print all the bean in spring boot application

https://www.youtube.com/shorts/U0fR7hAUDE0

************
@Transactional annotation

https://youtube.com/shorts/R22hFpwOk_g?si=qVPVWCu3ilpAIqmb

*****
default scope of the bean

https://youtube.com/shorts/vfSyK1oGAnA?si=9J6HV93sSQ7JOtV8
****

limit the no of bean 
https://youtube.com/shorts/mwEDqv0ALYw?si=f-DMHI0e1n9_RdYn

*****
inject protype bean in singleton bean
https://youtube.com/shorts/OO5Nd8R4SXE?si=QoWgkZiaYZlpOMLy







