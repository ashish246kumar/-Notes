MAX CONSUTIVE ONES|||
Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.
Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined
***************************
Brute force
***
class Solution {
    public int longestOnes(int[] nums, int k) {
        int zero=0,max=0;
        for(int i=0;i<nums.length;i++){
            zero=0;
            for(int j=i;j<nums.length;j++){
                if(nums[j]==0){
                    zero++;
                }
                if(zero<=k){
                    max=Math.max(max,(j-i+1));
                }
                else{
                     break;
                }
            }
          
        }
                    return max;

    }
}
************
TWO pointer
*******
class Solution {
    public int longestOnes(int[] nums, int k) {
       int zero=0,l=0,r=0,max=0;
       while(r<nums.length){
        if(nums[r]==0){
            zero++;
        }
         while(zero>k){
            if(nums[l]==0){
                zero--;
            }
            l++;
         }
         if(zero<=k){
          max=Math.max(max,r-l+1);
         }
         r++;
       }
       return max;
    }
}
***************************************************************************************************************************************************************************
Fruit Into Baskets(max length of the subarray with at most 2 type of number)
optimal
***************************
class Solution {
    public static int totalFruits(Integer[] arr) {
       HashMap<Integer,Integer> h=new HashMap<>();
       int l=0,r=0,max=0;
       while(r<arr.length){
        h.put(arr[r],h.getOrDefault(arr[r],0)+1);
            while(h.size()>2){
                h.put(arr[l],h.get(arr[l])-1);
               if(h.get(arr[l])==0){
                  h.remove(arr[l]);
               }
              l++;
           }
           
          max=Math.max(max,(r-l)+1);
          r++;
       }
       return max;
    }
}
*****************************************************************************************************
424. Longest Repeating Character Replacement
You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.
Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice
********
class Solution {
    public int characterReplacement(String s, int k) {
        int left=0,repeat=0,maxlen=Integer.MIN_VALUE;
        for(int j=0;j<s.length();j++){
            if(s.charAt(left)!=s.charAt(j)){
                   repeat++;
            }
            if(repeat<=k){
               maxlen=Math.max(maxlen,j-left+1);
            }
           while(repeat>k){
            if(s.charAt(left)==s.charAt(j)){
                repeat--;
            }
            else{
            left++;
            }
           }
        }
        return maxlen;
    }
}
******************************************************************************************************


 

