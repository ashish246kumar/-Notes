701. Insert into a Binary Search Tree

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root==null){
            return new TreeNode(val);
        }
        TreeNode root1=root;
        while(true){
            if(root1.val<=val){
                if(root1.right!=null){
                    root1=root1.right;

                }
                else{
                    root1.right=new TreeNode(val);
                    break;
                }
            }
            else{
                if(root1.left!=null){
                    root1=root1.left;
                }
                else{
                    root1.left=new TreeNode(val);
                    break;
                }

            }
        }
        return root;
    }
}
*************************************************************************************************************************************
Delete a Node in bst
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null){
            return root;
        }
        if(root.val==key){
           return helper(root);
        }
        TreeNode root1=root;
        while(root!=null){
            if(root.val>=key){
                if(root.left!=null && root.left.val==key){
                    root.left=helper(root.left);
                    break;
                }
                else{
                 root=root.left;
                }
            }
            else{
                if(root.right!=null && root.right.val==key){
                    root.right=helper(root.right);
                    break;
                }
                else{
                 root=root.right;
                }
            }
        }
        return root1;

    }
    TreeNode helper(TreeNode root){
        if(root.left==null){
            return root.right;
        }
        else if(root.right==null){
            return root.left;    
        }
        TreeNode rightChild=root.right;
        TreeNode lastright=findLastRight(root.left);
        lastright.right=rightChild;
        return root.left;
    }
    TreeNode findLastRight(TreeNode root){
           
            if(root.right==null){
               return root;
            }
            
          return findLastRight(root.right);
    }
}
**************************************************************************
ceil in a bst
************
class Tree {
    // Function to return the ceil of given number in BST.
    int findCeil(Node root, int key) {
        // if (root == null) return -1;
        // Code here
        int ceil=-1;
        while(root!=null){
            if(root.data==key){
                return root.data;
            }
            else if(root.data<key){
              root=root.right;  
            }
            else{
               ceil=root.data; 
               root=root.left; 
            }
        }
        return ceil;
    }
}
****************************************************************************
Floor in BST
*****
class Solution {
    public static int floor(Node root, int x) {
        // Code here
        int floor=-1;
        while(root!=null){
            if(root.data==x){
                return root.data;
            }
            if(root.data<x){
                floor=root.data;
               root=root.right;
               
            }
            else{
              root=root.left;  
            }
            
            
        }
        return floor;
    }
}
*****************************************************************************************************************************************
Kth smallest element in bst
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        int[] arr=new int[1];
        int[]counter=new int[1];
        traverse(root,k,counter,arr);
        return arr[0];

    }
    private void traverse(TreeNode root, int k, int[] counter,int[] arr){
         if(root==null){
            return;
         }
         traverse(root.left,k,counter,arr);
         counter[0]++;
         System.out.println(counter);
         if(counter[0]==k){
            arr[0]=root.val;
            return;
         }
        traverse(root.right,k,counter,arr);

    }
}
***************************************
kth largest Kth largest element in BST

class Solution {
    // return the Kth largest element in the given BST rooted at 'root'
    public int kthLargest(Node root, int k) {
        // Your code here
        int[] counter=new int[1];
        int[] ans=new int[1];
        reverseInorder(root,k,counter,ans);
        return ans[0];
         
    }
        public void reverseInorder(Node root,int k,int[] counter,int[]ans){
               if(root==null){
               return; 
            }

        reverseInorder(root.right,k,counter,ans);
        counter[0]++;
        if(counter[0]==k){
            ans[0]=root.data;
            return;
        }
         reverseInorder(root.left,k,counter,ans);
        }

}

*************************************************
validae binary search tree
**************************************
class Solution {
    public boolean isValidBST(TreeNode root) {
       
        int max=Integer.MAX_VALUE;
        int min=Integer.MIN_VALUE;
       return isValidBinaryST(root,min,max);
    }
    public boolean isValidBinaryST(TreeNode root,int min,int max){
         if(root==null){
            return true;
        }
        if(root.val>=max|| root.val<=min){
            return false;
        }
        
        return isValidBinaryST(root.left,min,root.val)&& isValidBinaryST(root.right,root.val,max);
 
}
*****************************************************************************************************************
LCA(Lowest cmmon ancestor in a binary search tree)
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        int curr=root.val;
      if(p.val>curr && q.val>curr){
          return lowestCommonAncestor(root.right,p,q);
      }
      if(p.val<curr && q.val<curr){
          return lowestCommonAncestor(root.left,p,q);
      }
     return root;
    }
}
***************************************************************************************************************************************************************
                                                                    Binary Tree
*******************************************************************************************************************************************************************
                                  Level order Traversal OR BINARY TREE
*********************************************************************************************************************************************************
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
       List<List<Integer>> l=new ArrayList<>();
       if(root==null){
          return l;
       }
       q.add(root);
       while(!q.isEmpty()){
        int n=q.size();
  List<Integer> l1=new ArrayList<>();
        for(int i=0;i<n;i++){
        TreeNode t1=q.poll();
             l1.add(t1.val);
             if(t1.left!=null){
                    q.add(t1.left);
             }
             if(t1.right!=null){
                q.add(t1.right);
             }
             
        
        }
        l.add(l1);
       }
       return l;       
    }
}
*****************************************
POST ORDER TRAVERSAL
***************************************************************************************************************
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> l=new ArrayList<>();
        performPostOrder(root,l);
        return l;
    }
    public void performPostOrder(TreeNode root,List<Integer>l){
            if(root==null){
                return;
            }
            performPostOrder(root.left,l);
            performPostOrder(root.right,l);
            l.add(root.val);
    }

}
**************************************************************************************************************************************************************************
POST ORDER TRAVERSAL  using two stack
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> l=new ArrayList<>();
        Stack<TreeNode> st1=new Stack<>();
                Stack<Integer> st2=new Stack<>();
          if(root==null){
            return l;
          }  
          st1.push(root);    
        while(!st1.isEmpty()){
           TreeNode elem=st1.pop();
           st2.push(elem.val);
           if(elem.left!=null){
               st1.push(elem.left);
           }
           if(elem.right!=null){
              st1.push(elem.right);
           }
        }
        while(!st2.isEmpty()){
            l.add(st2.pop());
        }
        return l;
    }
   

}
********************************************************************************************************************
binary-tree-right-side-view
***********
 class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        
        Queue<TreeNode> q=new LinkedList<>();
        List<Integer> al=new ArrayList<>();
        if(root==null){
            return al;
        }
        q.add(root);
        while(!q.isEmpty()){
            TreeNode temp=null;
            int n=q.size();
            while(n>0){
                temp=q.poll();
                if(temp.left!=null){
                    q.add(temp.left);
                }
                if(temp.right!=null){
                      q.add(temp.right);
                }
                n--;
            }
            al.add(temp.val);

        } 
        return al;
        }
}
************************************************
construct-binary-tree-from-preorder-and-inorder-traversal
***********
*********************************************************************
preorder={3,9,20,15,7}
inorder={9,3,15,20,7}
root=3
root.left=func(start,i-1)
root.right=func(i+1,end);
return root;
**********
idx=0  in preorder
root=3
i=1  in in inorder
idx++
root.left=funnc(start,i-1); (0,0)
root.right=funnc(i+1,end);(2,4)

*********
start=0,end=0
idx=1
root=9
i=0
root.left=func(0,-1)-not possible return
root.right=func(1,0)-not possible return
yaha se root jab return karega that 9 toh who 3 ka left child banega
****
start=2,end=4
idx=2
root=20
i=3
idx++
root.left=func(2,2)->15
root.right=func(4,4)->7
iska matlab 20 ka left aur right child=15,7
yaha se root return karega  that is  20 aur ye right child Banega  3 ka
 

************************************************************
class Solution {
    private int idx=0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        return func(0,preorder.length-1,preorder,inorder);
    }
    public TreeNode func(int start,int end,int[] preorder, int[] inorder){
        if(start>end){
            return null;
        }
        int val=preorder[idx];
        int i=start;
         while(i<=end){
            if(inorder[i]==val){
               break;
            }
            i++;
         }
         idx++;
        TreeNode root=new TreeNode(val);
        root.left=func(start,i-1,preorder,inorder);
        root.right=func(i+1,end,preorder,inorder);
        return root;
    }
}

**********************************
