Q)How do we handle custom Exception in java
1)First, we create a custom exception class by extending the Exception class or Extending a Runtime Exception
public class CustomException extends Exception {
    public CustomException() {
        super();
    }
}
2)Then in the code, we can throw the custom exception using the throw keyword.
public void someMethod(String param) {
        if (param == null) {
            throw new CustomRuntimeException("Parameter cannot be null");
        }
        // Additional logic
    }
3)Then Use try-catch blocks to handle the exception appropriately.
 try {
            service.someMethod(null);
        } catch (CustomRuntimeException e) {
            System.err.println("Caught custom runtime exception: " + e.getMessage());
            // Handle the exception (e.g., logging, user notification)
        }
**************
you can use the @ControllerAdvice annotation to handle exceptions globally across all controllers. 
Custom exceptions provide meaningful names and messages, making it easier to understand the type of error that occurred.
Getter
@Setter
public class APIError {

  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy hh:mm:ss")
  private LocalDateTime timestamp;

  private Integer status;
  private HttpStatus error;
  private String message;
APIError(
      final HttpStatus status, final String message, final HttpStatus error, final Throwable ex) {
    this();
    this.error = error;
    this.status = status.value();
    this.message = message;
  }
}
@ControllerAdvice
@Slf4j
@Order(Ordered.HIGHEST_PRECEDENCE)
public class GenericExceptionHandler {
private ResponseEntity<Object> buildResponseEntity(final APIError apiError) {
    return new ResponseEntity<>(apiError, apiError.getError());
  }
@ExceptionHandler(LeadNotFoundException.class)
  protected ResponseEntity<Object> handleLeadNotFoundException(final LeadNotFoundException ex) {
    MetricsUtil.increment(ex.getMetricName(), MetricType.TOTAL_FAILURE_COUNT);
    final APIError apiError =
        new APIError(HttpStatus.NOT_FOUND, ex.getMessage(), HttpStatus.OK, ex);
    return buildResponseEntity(apiError);
  }
}
HttpStatus.FORBIDDEN
always use this in controller
 return ResponseEntity.ok()
********************************************************************************
Q)what is meaning of threshhold value in context of hashMap
 the threshold value is a value that determines when the HashMap needs to resize itself.
**
Capacity: This is the number of buckets in the HashMap. It defines the initial size of the internal array used to store entries.
**
Load Factor: This is a measure of how full the HashMap is allowed
 to get before its capacity is automatically increased. The default load factor is 0.75, 
which provides a good balance between time and space costs.
*******
When the number of entries in the HashMap exceeds the threshold, the HashMap resizes itself by doubling its capacity and rehashing all of its entries into the new internal array.
When you create a HashMap without specifying the capacity, it defaults to 16.
threshold = capacity * load factor
           = 16 * 0.75
           = 12
**********
In Java 8, significant changes were made to the HashMap to improve performance, particularly in handling hash collisions. The major change is the introduction of balanced trees (specifically, red-black trees) for buckets with a high number of collisions. 
**********
Before Java 8:HashMap was optimized to handle cases where many keys have the same hash code (i.e., hash collisions). When multiple entries hash to the same bucket (i.e., collision), they are stored in a linked list. As the number of collisions increases, the time complexity for operations like get and put degrades to O(n) in the worst case.
Java 8: To address this, Java 8 introduces a threshold for converting a linked list to a balanced tree (red-black tree) within a bucket. This is known as the treeification threshold, which is set to 8 by default.
Impact: When the number of entries in a single bucket exceeds this threshold, the linked list is converted to a red-black tree, reducing the time complexity for operations in that bucket to O(log n).
************
java 8 added several useful methods to the Map interface, which HashMap implements. Some of these methods include:

V computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)
V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
************
 Q)why are you using map.entrySet().stream() that is why are you using entrySet
When you need to operate on both the keys and the values of the map entries, entrySet() provides an efficient way to do so
Map<String, Integer> studentScores = new HashMap<>();
        studentScores.put("Alice", 85);
        studentScores.put("Bob", 60);
Map<String, Integer> filteredScores = studentScores.entrySet().stream()
                .filter(entry -> entry.getValue() > 70)
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
******************************************
@Transactional annotation-->

public void saveEntry(JournalEntry journalEntry, String userName) { 
User user=userservice.findByUserName (userllame); 
journalEntry.setDate(LocalDateTime.now()); 
JournalEntry saved =journalEntryRepository.save(journalEntry);
 user.get.JournalEntries().add(saved);
 user.setUserName(null);
 userservice.saveEntry(user);
}
Problem ye hai iss case me ki JournalEntry me toh save ho ja raha hai but userName hum set null kar rahe aur hum model
me ye define kiye hai ki userName null na rahe.toh yaha exception throw ho jayga aur user save nhi ho payga database me par
JournalEntry save ho ja raha hai.


@Transactional method ke upar lagane se ye hoga ki agar kuch bhi error ata hai method me toh rollback kar do sucess chige 
ko bhi.


@Configuration
@EnableTransactionManagement
public class TransactionConfig {

  @Autowired private MongoDatabaseFactory mongoDbFactory;

  @Bean
  public MongoTransactionManager transactionManager() {
    return new MongoTransactionManager(mongoDbFactory);
  }
}
@Import(TransactionConfig.class)
ye main class ke upar laga denge.
MongoTransactionManager plateFormTransactionManager ko implement kar raha hai

************************************************************************





