Q)How do we handle custom Exception in java
1)First, we create a custom exception class by extending the Exception class or Extending a Runtime Exception
public class CustomException extends Exception {
    public CustomException() {
        super();
    }
}
2)Then in the code, we can throw the custom exception using the throw keyword.
public void someMethod(String param) {
        if (param == null) {
            throw new CustomRuntimeException("Parameter cannot be null");
        }
        // Additional logic
    }
3)Then Use try-catch blocks to handle the exception appropriately.
 try {
            service.someMethod(null);
        } catch (CustomRuntimeException e) {
            System.err.println("Caught custom runtime exception: " + e.getMessage());
            // Handle the exception (e.g., logging, user notification)
        }
**************
you can use the @ControllerAdvice annotation to handle exceptions globally across all controllers. 
Custom exceptions provide meaningful names and messages, making it easier to understand the type of error that occurred.
Getter
@Setter
public class APIError {

  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy hh:mm:ss")
  private LocalDateTime timestamp;

  private Integer status;
  private HttpStatus error;
  private String message;
APIError(
      final HttpStatus status, final String message, final HttpStatus error, final Throwable ex) {
    this();
    this.error = error;
    this.status = status.value();
    this.message = message;
  }
}
@ControllerAdvice
@Slf4j
@Order(Ordered.HIGHEST_PRECEDENCE)
public class GenericExceptionHandler {
private ResponseEntity<Object> buildResponseEntity(final APIError apiError) {
    return new ResponseEntity<>(apiError, apiError.getError());
  }
@ExceptionHandler(LeadNotFoundException.class)
  protected ResponseEntity<Object> handleLeadNotFoundException(final LeadNotFoundException ex) {
    MetricsUtil.increment(ex.getMetricName(), MetricType.TOTAL_FAILURE_COUNT);
    final APIError apiError =
        new APIError(HttpStatus.NOT_FOUND, ex.getMessage(), HttpStatus.OK, ex);
    return buildResponseEntity(apiError);
  }
}
HttpStatus.FORBIDDEN
always use this in controller
 return ResponseEntity.ok()
********************************************************************************
Q)what is meaning of threshhold value in context of hashMap
 the threshold value is a value that determines when the HashMap needs to resize itself.
**
Capacity: This is the number of buckets in the HashMap. It defines the initial size of the internal array used to store entries.
**
Load Factor: This is a measure of how full the HashMap is allowed
 to get before its capacity is automatically increased. The default load factor is 0.75, 
which provides a good balance between time and space costs.
*******
When the number of entries in the HashMap exceeds the threshold, the HashMap resizes itself by doubling its capacity and rehashing all of its entries into the new internal array.
When you create a HashMap without specifying the capacity, it defaults to 16.
threshold = capacity * load factor
           = 16 * 0.75
           = 12
**********
In Java 8, significant changes were made to the HashMap to improve performance, particularly in handling hash collisions. The major change is the introduction of balanced trees (specifically, red-black trees) for buckets with a high number of collisions. 
**********
Before Java 8:HashMap was optimized to handle cases where many keys have the same hash code (i.e., hash collisions). When multiple entries hash to the same bucket (i.e., collision), they are stored in a linked list. As the number of collisions increases, the time complexity for operations like get and put degrades to O(n) in the worst case.
Java 8: To address this, Java 8 introduces a threshold for converting a linked list to a balanced tree (red-black tree) within a bucket. This is known as the treeification threshold, which is set to 8 by default.
Impact: When the number of entries in a single bucket exceeds this threshold, the linked list is converted to a red-black tree, reducing the time complexity for operations in that bucket to O(log n).
************
java 8 added several useful methods to the Map interface, which HashMap implements. Some of these methods include:

V computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)
V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
************
 Q)why are you using map.entrySet().stream() that is why are you using entrySet
When you need to operate on both the keys and the values of the map entries, entrySet() provides an efficient way to do so
Map<String, Integer> studentScores = new HashMap<>();
        studentScores.put("Alice", 85);
        studentScores.put("Bob", 60);
Map<String, Integer> filteredScores = studentScores.entrySet().stream()
                .filter(entry -> entry.getValue() > 70)
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
******************************************
@Transactional annotation-->
To ensure a series of database operations either all succeed or all fail, preventing partial updates

public void saveEntry(JournalEntry journalEntry, String userName) { 
User user=userservice.findByUserName (userllame); 
journalEntry.setDate(LocalDateTime.now()); 
JournalEntry saved =journalEntryRepository.save(journalEntry);
 user.get.JournalEntries().add(saved);
 user.setUserName(null);
 userservice.saveEntry(user);
}
Problem ye hai iss case me ki JournalEntry me toh save ho ja raha hai but userName hum set null kar rahe aur hum model
me ye define kiye hai ki userName null na rahe.toh yaha exception throw ho jayga aur user save nhi ho payga database me par
JournalEntry save ho ja raha hai.


@Transactional method ke upar lagane se ye hoga ki agar kuch bhi error ata hai method me toh rollback kar do sucess chige 
ko bhi.


@Configuration
@EnableTransactionManagement
public class TransactionConfig {

  @Autowired private MongoDatabaseFactory mongoDbFactory;

  @Bean
  public MongoTransactionManager transactionManager() {
    return new MongoTransactionManager(mongoDbFactory);
  }
}
@Import(TransactionConfig.class)
ye main class ke upar laga denge.
MongoTransactionManager plateFormTransactionManager ko implement kar raha hai

************************************************************************
public- it is accessible to anywhere in your application
private:-The member is accessible with in the same package
protected:- Accessible within the same package and by subclasses, even if they are in different packages
default:-Accessible only within the same package.
**************************************************************
Comparable vs Comparator
Comparable and Comparator are interfaces that are used for sorting objects, but they serve different purposes and are used in different contexts
 final List<Phone> phoneList = customerDetail.getPhones();
 existingRecordLists.get().sort((r1, r2) -> r2.getCreatedAt().compareTo(r1.getCreatedAt()));
phoneList.sort((r1, r2) -> Integer.compare(r2.getPriority(), r1.getPriority()));--aabove two are example of comparator
Comparator is a functional interface in Java that defines a method for comparing two objects.
uuidBigInt.compareTo(BigInteger.ZERO)->example of comparable interface
 BigInteger uuidBigInt = new BigInteger(UUID.randomUUID().toString().replace("-", ""), SIXTEEN);
Comparable is an interface in Java that defines a method for comparing the current object with another object of the same type.
final List<Map.Entry<String, Integer>> list = new LinkedList<>(map.entrySet());

    // Sorting the list of entries by values using a comparator
    list.sort(Map.Entry.comparingByValue());
********************************************************
Dependency Injection-->Means Inject object to another Object.It is used to acieve loose coupling.
we can achieve dependency Injection by SetterMethod Dependency Injection and Constructor Dependency Injection.
Address class is injected into Student class
class Student{
private String name;
private int roollNo;
private Address address;
 public Student(String name, int rollNo, String city, String pin) {
        this.name = name;
        this.rollNo = rollNo;
        this.address = new Address(city, pin); // Direct instantiation
    } 
}
class Address{
String city;
String pin;
public Address(String city, String pin) {
        this.city = city;
        this.pin = pin;
    }
}
This is an example of tight coupling
****************

*********************************************************************************************************
 <bean id="address" class="com.example.Address">
        <property name="city" value="New York"/> <!-- Inject city -->
        <property name="pin" value="10001"/>      <!-- Inject pin -->
    </bean>

    <!-- Define the Student bean and inject the Address bean -->
    <bean id="student" class="com.example.Student">
        <property name="name" value="John Doe"/> <!-- Inject name -->
        <property name="rollNo" value="123"/>     <!-- Inject rollNo -->
  <property name="address" ref="address"/>   <!-- Reference to Address bean -->
    </bean>
public class Main {
    public static void main(String[] args) {
        // Load the Spring application context from XML
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");

        // Retrieve the Student bean
        Student student = (Student) context.getBean("student");

        // Display the student's details
        System.out.println("Student Name: " + student.getName());
        System.out.println("Roll No: " + student.getRollNo());
}
This is setter method dependency Injection
*********
This Constructor based dependency Injection
<bean id="address" class="com.example.Address">
        <constructor-arg value="New York"/> <!-- city -->
        <constructor-arg value="10001"/>    <!-- pin -->
    </bean>

    <!-- Define the Student bean and inject the Address bean -->
    <bean id="student" class="com.example.Student">
        <constructor-arg value="John Doe"/> <!-- name -->
        <constructor-arg value="123"/>      <!-- rollNo -->
        <constructor-arg ref="address"/>     <!-- reference to Address bean -->
    </bean>
******************************************************************************************************
Spring Container responsebility:
Bean lifyCycle management.
Dependency Injection
Configuration management
AOP support
*****************************************************************************************
LifeCycle of Bean:
LOADING BEAN DEFINATION(spring load bean defination from various sources such as xml configuration files
java based configuration)
(These bean defination contain info about bean classes, dependency and other configuration details)
|
|
Bean Instansiation
(After bean defination are loaded the spring container create instanses of bean based on this defination.This involve 
involving the bean class constructor either the default constructor or specified constructor to create actual 
instanse of bean)(Student-->name=nul,age=0)
|
|
Bean Initilazation (name="ak",age=11)
|
|
Bean used
|
|
Bean Destruction

*********************************
MicroService Communication
2 types
Synchronous Blcking-->A microservices make a call to another microservices and block a operation while wating for response
Asynchronous->Non Blocking
******
Synchronous-->Request/Response
Asynchronous-->Request/response(rest over http)-->In this approach one service have some how knowledge of another service
               event driven(Topic based messaging system,Queue based brocker)-->In this approach one service does not 
               have knowledge of another service.It is used to scale the system.
               shared database(file system,Database)
         
eg->order service-->notification service
No two service can have share same database if both the services are reading and writing.

*********************************************
serviceA--->Meassage Brocker--->ServiceB
2types of message brocker topic based and queue based
in queue based queue If the message is not consumed then it is placed in the dead letter queue
in topic based if message is not consued then it need to be retryed upto certain no of times
problem or chalanges come while implementaing event based communication
lost of messages
duplicacy of message
order of message
consumer at fault

solutiion:
sending the same message twice
Retention based message

************************************************
Sleep vs Wait
The sleep method is a static method of the Thread class.
 It is used to pause the execution of the current thread for a specified number of milliseconds.
It does not releases the lock
It is typically used for slowing down the execution
It throws InterruptedException


wait method is an instance method of the Object class.
used for inter-thread communication, allowing one thread to wait until another thread notifies it
called from a synchronized block or method
It releases a lock allowing another thread to acquire.
Typically used in conjunction with notify or notifyAll for implementing thread communication

***************************
Object class & its method available

public boolean equals(Object obj)
public String toString()
public final void notify()
public final void wait(long timeout) throws InterruptedException
******************************************************************
HashSet:-not guarantee any specific order of the elements||Does not allow duplicate elements|| Allows a single null element.
ArrayList: Maintains the insertion order|| Allows a Multiple null element.
************
Autowire these 2 userName & userPassword  and explain this in terms of dependency injection:

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AppConfig {

    @Bean
    public String userName() {
        return "exampleUser";
    }

    @Bean
    public String userPassword() {
        return "examplePassword";
    }
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired
    private String userName;

    @Autowired
    private String userPassword;

    public void printCredentials() {
        System.out.println("UserName: " + userName);
        System.out.println("UserPassword: " + userPassword);
    }
}
*****************************************************************
Difference between LocalDateTime.now() and new Date()
LocalDateTime
API: Part of the java.time package introduced in Java 8.
LocalDateTime is immutable, meaning that its value cannot be changed once it is created.
 It represents a date and time without a time zone
It is ThreadSafe because it is immutable.

Date
java.util package
Mutable, which can lead to unintended changes.
Less comprehensive support for time zones and formatting
***************************************************
Q)Give all the word that have been repeated
 String s1="there is a tree and tree has a leaves and leaves are green";
        String[] s3=s1.split(" ");
        Map<String,Long> map=Arrays.stream(s3).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
        map.entrySet().stream().filter(v->v.getValue()>1).forEach(e->System.out.println(e.getKey()+":"+e.getValue()));
*******
Q)Give the count of tree word
Long treeCount=Arrays.stream(s3).filter(v->v.equals("tree")).count();
**********
Q)Give the count of how many word that are repeated
 Map<String,Long> map=Arrays.stream(s3).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
        Long count=map.entrySet().stream().filter(v->v.getValue()>1).count();
        System.out.println(count);
**********
Q)Give the distinct word that are not repeated
Map<String,Long> map=Arrays.stream(s3).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
        map.entrySet().stream().filter(v->v.getValue()==1).forEach(x->System.out.println(x.getKey()));
***************************************************************
Q)Shift all the 1 in the array to the left
int[] arr={1, 3, 1, 2, 1, 2, 1, 2};
int left = 0;

        for (int right = 0; right < arr.length; right++) {

           if (arr[right] == 1) {
                // Swap arr[left] and arr[right]
               int temp = arr[left];
               arr[left] = arr[right];
               arr[right] = temp;
               left++;
            }
        }
******************************************************
@Transactional
  @Modifying(flushAutomatically = true, clearAutomatically = true)
  @Query(
      nativeQuery = true,
      value =
          "UPDATE addresses SET\n"
              + "primary_address =:isPrimary,\n"
              + "modified_at =:modifiedAt\n"
              + "where id=:id")
  void updatePrimaryAddressFlagForId(boolean isPrimary, LocalDateTime modifiedAt, UUID id);
*******************************************************************************************************
@Modifying Annotation
The @Modifying annotation is used in Spring Data JPA to indicate that a query method is modifying the data (i.e., it is an UPDATE, DELETE, or INSERT query) 
Flush: In JPA, flushing means synchronizing the state of the persistence context
(the in-memory representation of the entities) with the underlying database. 
When you make changes to entities, those changes are stored in the persistence
context and may not be immediately written to the database.
*********************************************************************************************************
flushAutomatically = true: This means that before executing the modifying query,
the current state of the persistence context will be flushed to the database. 
This ensures that any pending changes are written to the database before the query is executed
***********************
Q) can we overide a static method
 No we cannot override static methods because method overriding is based on dynamic binding at runtime
and the static methods are bonded using static binding at compile time. So, we cannot override static methods.
While you cannot override static methods, you can hide them. If you define a static method with the same signature in a 
subclass, it hides the static method in the superclass. This is known as method hiding rather than method overriding
***********************
when the class is loaded into the memory at that time static member will be loaded in to the memory and exceuted
post then when object is created by the constructor of that class and which method that is called by the instance of that c
class will be executed
************













